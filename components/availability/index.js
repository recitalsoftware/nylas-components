(function (Wn, ae) {
  typeof exports == "object" && typeof module != "undefined"
    ? (module.exports = ae())
    : typeof define == "function" && define.amd
    ? define(ae)
    : ((Wn = typeof globalThis != "undefined" ? globalThis : Wn || self),
      (Wn.app = ae()));
})(this, function () {
  "use strict";
  const Wn = window.customElements.define.bind(window.customElements);
  window.customElements.define = (e, ...t) => {
    if (!customElements.get(e)) return Wn(e, ...t);
  };
  function ae() {}
  function Ft(e, t) {
    for (const n in t) e[n] = t[n];
    return e;
  }
  function di(e) {
    return e();
  }
  function ca() {
    return Object.create(null);
  }
  function Lt(e) {
    e.forEach(di);
  }
  function Hn(e) {
    return typeof e == "function";
  }
  function vn(e, t) {
    return e != e
      ? t == t
      : e !== t || (e && typeof e == "object") || typeof e == "function";
  }
  let Tr;
  function da(e, t) {
    return (
      Tr || (Tr = document.createElement("a")), (Tr.href = t), e === Tr.href
    );
  }
  function Qs(e, t) {
    return e != e ? t == t : e !== t;
  }
  function ha(e) {
    return Object.keys(e).length === 0;
  }
  function ma(e, ...t) {
    if (e == null) return ae;
    const n = e.subscribe(...t);
    return n.unsubscribe ? () => n.unsubscribe() : n;
  }
  function Zn(e, t, n) {
    e.$$.on_destroy.push(ma(t, n));
  }
  function _n(e) {
    const t = {};
    for (const n in e) n[0] !== "$" && (t[n] = e[n]);
    return t;
  }
  function Xs(e) {
    return e && Hn(e.destroy) ? e.destroy : ae;
  }
  let Or = !1;
  function Ks() {
    Or = !0;
  }
  function $s() {
    Or = !1;
  }
  function eu(e, t, n, o) {
    for (; e < t; ) {
      const l = e + ((t - e) >> 1);
      n(l) <= o ? (e = l + 1) : (t = l);
    }
    return e;
  }
  function tu(e) {
    if (e.hydrate_init) return;
    e.hydrate_init = !0;
    let t = e.childNodes;
    if (e.nodeName === "HEAD") {
      const h = [];
      for (let y = 0; y < t.length; y++) {
        const p = t[y];
        p.claim_order !== void 0 && h.push(p);
      }
      t = h;
    }
    const n = new Int32Array(t.length + 1),
      o = new Int32Array(t.length);
    n[0] = -1;
    let l = 0;
    for (let h = 0; h < t.length; h++) {
      const y = t[h].claim_order,
        p =
          (l > 0 && t[n[l]].claim_order <= y
            ? l + 1
            : eu(1, l, (k) => t[n[k]].claim_order, y)) - 1;
      o[h] = n[p] + 1;
      const w = p + 1;
      (n[w] = h), (l = Math.max(w, l));
    }
    const c = [],
      d = [];
    let m = t.length - 1;
    for (let h = n[l] + 1; h != 0; h = o[h - 1]) {
      for (c.push(t[h - 1]); m >= h; m--) d.push(t[m]);
      m--;
    }
    for (; m >= 0; m--) d.push(t[m]);
    c.reverse(), d.sort((h, y) => h.claim_order - y.claim_order);
    for (let h = 0, y = 0; h < d.length; h++) {
      for (; y < c.length && d[h].claim_order >= c[y].claim_order; ) y++;
      const p = y < c.length ? c[y] : null;
      e.insertBefore(d[h], p);
    }
  }
  function j(e, t) {
    e.appendChild(t);
  }
  function hi(e, t) {
    if (Or) {
      for (
        tu(e),
          (e.actual_end_child === void 0 ||
            (e.actual_end_child !== null &&
              e.actual_end_child.parentElement !== e)) &&
            (e.actual_end_child = e.firstChild);
        e.actual_end_child !== null &&
        e.actual_end_child.claim_order === void 0;

      )
        e.actual_end_child = e.actual_end_child.nextSibling;
      t !== e.actual_end_child
        ? (t.claim_order !== void 0 || t.parentNode !== e) &&
          e.insertBefore(t, e.actual_end_child)
        : (e.actual_end_child = t.nextSibling);
    } else (t.parentNode !== e || t.nextSibling !== null) && e.appendChild(t);
  }
  function ie(e, t, n) {
    e.insertBefore(t, n || null);
  }
  function ga(e, t, n) {
    Or && !n
      ? hi(e, t)
      : (t.parentNode !== e || t.nextSibling != n) &&
        e.insertBefore(t, n || null);
  }
  function $(e) {
    e.parentNode.removeChild(e);
  }
  function Mr(e, t) {
    for (let n = 0; n < e.length; n += 1) e[n] && e[n].d(t);
  }
  function G(e) {
    return document.createElement(e);
  }
  function jn(e) {
    return document.createElementNS("http://www.w3.org/2000/svg", e);
  }
  function xe(e) {
    return document.createTextNode(e);
  }
  function we() {
    return xe(" ");
  }
  function mi() {
    return xe("");
  }
  function bt(e, t, n, o) {
    return e.addEventListener(t, n, o), () => e.removeEventListener(t, n, o);
  }
  function z(e, t, n) {
    n == null
      ? e.removeAttribute(t)
      : e.getAttribute(t) !== n && e.setAttribute(t, n);
  }
  function Dr(e, t) {
    for (const n in t) z(e, n, t[n]);
  }
  function ya(e, t, n) {
    t in e
      ? (e[t] = typeof e[t] == "boolean" && n === "" ? !0 : n)
      : z(e, t, n);
  }
  function Yn(e) {
    return Array.from(e.childNodes);
  }
  function nu(e) {
    e.claim_info === void 0 &&
      (e.claim_info = { last_index: 0, total_claimed: 0 });
  }
  function ru(e, t, n, o, l = !1) {
    nu(e);
    const c = (() => {
      for (let d = e.claim_info.last_index; d < e.length; d++) {
        const m = e[d];
        if (t(m)) {
          const h = n(m);
          return (
            h === void 0 ? e.splice(d, 1) : (e[d] = h),
            l || (e.claim_info.last_index = d),
            m
          );
        }
      }
      for (let d = e.claim_info.last_index - 1; d >= 0; d--) {
        const m = e[d];
        if (t(m)) {
          const h = n(m);
          return (
            h === void 0 ? e.splice(d, 1) : (e[d] = h),
            l
              ? h === void 0 && e.claim_info.last_index--
              : (e.claim_info.last_index = d),
            m
          );
        }
      }
      return o();
    })();
    return (
      (c.claim_order = e.claim_info.total_claimed),
      (e.claim_info.total_claimed += 1),
      c
    );
  }
  function iu(e, t, n, o) {
    return ru(
      e,
      (l) => l.nodeName === t,
      (l) => {
        const c = [];
        for (let d = 0; d < l.attributes.length; d++) {
          const m = l.attributes[d];
          n[m.name] || c.push(m.name);
        }
        c.forEach((d) => l.removeAttribute(d));
      },
      () => o(t),
    );
  }
  function xr(e, t, n) {
    return iu(e, t, n, jn);
  }
  function qe(e, t) {
    (t = "" + t), e.wholeText !== t && (e.data = t);
  }
  function ye(e, t, n, o) {
    n === null
      ? e.style.removeProperty(t)
      : e.style.setProperty(t, n, o ? "important" : "");
  }
  let Er;
  function au() {
    if (Er === void 0) {
      Er = !1;
      try {
        typeof window != "undefined" && window.parent && window.parent.document;
      } catch (e) {
        Er = !0;
      }
    }
    return Er;
  }
  function va(e, t) {
    getComputedStyle(e).position === "static" &&
      (e.style.position = "relative");
    const o = G("iframe");
    o.setAttribute(
      "style",
      "display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;",
    ),
      o.setAttribute("aria-hidden", "true"),
      (o.tabIndex = -1);
    const l = au();
    let c;
    return (
      l
        ? ((o.src =
            "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>"),
          (c = bt(window, "message", (d) => {
            d.source === o.contentWindow && t();
          })))
        : ((o.src = "about:blank"),
          (o.onload = () => {
            c = bt(o.contentWindow, "resize", t);
          })),
      j(e, o),
      () => {
        (l || (c && o.contentWindow)) && c(), $(o);
      }
    );
  }
  function be(e, t, n) {
    e.classList[n ? "add" : "remove"](t);
  }
  function Nr(e) {
    const t = {};
    for (const n of e) t[n.name] = n.value;
    return t;
  }
  let qn;
  function Jn(e) {
    qn = e;
  }
  function gi() {
    if (!qn)
      throw new Error("Function called outside component initialization");
    return qn;
  }
  function ou(e) {
    gi().$$.before_update.push(e);
  }
  function su(e) {
    gi().$$.on_mount.push(e);
  }
  const Bn = [],
    pn = [],
    Ir = [],
    _a = [],
    pa = Promise.resolve();
  let yi = !1;
  function ba() {
    yi || ((yi = !0), pa.then(J));
  }
  function uu() {
    return ba(), pa;
  }
  function Gn(e) {
    Ir.push(e);
  }
  const vi = new Set();
  let Cr = 0;
  function J() {
    const e = qn;
    do {
      for (; Cr < Bn.length; ) {
        const t = Bn[Cr];
        Cr++, Jn(t), lu(t.$$);
      }
      for (Jn(null), Bn.length = 0, Cr = 0; pn.length; ) pn.pop()();
      for (let t = 0; t < Ir.length; t += 1) {
        const n = Ir[t];
        vi.has(n) || (vi.add(n), n());
      }
      Ir.length = 0;
    } while (Bn.length);
    for (; _a.length; ) _a.pop()();
    (yi = !1), vi.clear(), Jn(e);
  }
  function lu(e) {
    if (e.fragment !== null) {
      e.update(), Lt(e.before_update);
      const t = e.dirty;
      (e.dirty = [-1]),
        e.fragment && e.fragment.p(e.ctx, t),
        e.after_update.forEach(Gn);
    }
  }
  const Ar = new Set();
  let Yt;
  function Fr() {
    Yt = { r: 0, c: [], p: Yt };
  }
  function Lr() {
    Yt.r || Lt(Yt.c), (Yt = Yt.p);
  }
  function He(e, t) {
    e && e.i && (Ar.delete(e), e.i(t));
  }
  function ut(e, t, n, o) {
    if (e && e.o) {
      if (Ar.has(e)) return;
      Ar.add(e),
        Yt.c.push(() => {
          Ar.delete(e), o && (n && e.d(1), o());
        }),
        e.o(t);
    }
  }
  function wa(e, t) {
    e.d(1), t.delete(e.key);
  }
  function ka(e, t, n, o, l, c, d, m, h, y, p, w) {
    let k = e.length,
      N = c.length,
      T = k;
    const H = {};
    for (; T--; ) H[e[T].key] = T;
    const F = [],
      I = new Map(),
      R = new Map();
    for (T = N; T--; ) {
      const L = w(l, c, T),
        Z = n(L);
      let O = d.get(Z);
      O ? o && O.p(L, t) : ((O = y(Z, L)), O.c()),
        I.set(Z, (F[T] = O)),
        Z in H && R.set(Z, Math.abs(T - H[Z]));
    }
    const te = new Set(),
      ne = new Set();
    function me(L) {
      He(L, 1), L.m(m, p), d.set(L.key, L), (p = L.first), N--;
    }
    for (; k && N; ) {
      const L = F[N - 1],
        Z = e[k - 1],
        O = L.key,
        ue = Z.key;
      L === Z
        ? ((p = L.first), k--, N--)
        : I.has(ue)
        ? !d.has(O) || te.has(O)
          ? me(L)
          : ne.has(ue)
          ? k--
          : R.get(O) > R.get(ue)
          ? (ne.add(O), me(L))
          : (te.add(ue), k--)
        : (h(Z, d), k--);
    }
    for (; k--; ) {
      const L = e[k];
      I.has(L.key) || h(L, d);
    }
    for (; N; ) me(F[N - 1]);
    return F;
  }
  function Sa(e, t) {
    const n = {},
      o = {},
      l = { $$scope: 1 };
    let c = e.length;
    for (; c--; ) {
      const d = e[c],
        m = t[c];
      if (m) {
        for (const h in d) h in m || (o[h] = 1);
        for (const h in m) l[h] || ((n[h] = m[h]), (l[h] = 1));
        e[c] = m;
      } else for (const h in d) l[h] = 1;
    }
    for (const d in o) d in n || (n[d] = void 0);
    return n;
  }
  function Ta(e) {
    e && e.c();
  }
  function _i(e, t, n, o) {
    const { fragment: l, on_mount: c, on_destroy: d, after_update: m } = e.$$;
    l && l.m(t, n),
      o ||
        Gn(() => {
          const h = c.map(di).filter(Hn);
          d ? d.push(...h) : Lt(h), (e.$$.on_mount = []);
        }),
      m.forEach(Gn);
  }
  function Ur(e, t) {
    const n = e.$$;
    n.fragment !== null &&
      (Lt(n.on_destroy),
      n.fragment && n.fragment.d(t),
      (n.on_destroy = n.fragment = null),
      (n.ctx = []));
  }
  function fu(e, t) {
    e.$$.dirty[0] === -1 && (Bn.push(e), ba(), e.$$.dirty.fill(0)),
      (e.$$.dirty[(t / 31) | 0] |= 1 << t % 31);
  }
  function bn(e, t, n, o, l, c, d, m = [-1]) {
    const h = qn;
    Jn(e);
    const y = (e.$$ = {
      fragment: null,
      ctx: null,
      props: c,
      update: ae,
      not_equal: l,
      bound: ca(),
      on_mount: [],
      on_destroy: [],
      on_disconnect: [],
      before_update: [],
      after_update: [],
      context: new Map(t.context || (h ? h.$$.context : [])),
      callbacks: ca(),
      dirty: m,
      skip_bound: !1,
      root: t.target || h.$$.root,
    });
    d && d(y.root);
    let p = !1;
    if (
      ((y.ctx = n
        ? n(e, t.props || {}, (w, k, ...N) => {
            const T = N.length ? N[0] : k;
            return (
              y.ctx &&
                l(y.ctx[w], (y.ctx[w] = T)) &&
                (!y.skip_bound && y.bound[w] && y.bound[w](T), p && fu(e, w)),
              k
            );
          })
        : []),
      y.update(),
      (p = !0),
      Lt(y.before_update),
      (y.fragment = o ? o(y.ctx) : !1),
      t.target)
    ) {
      if (t.hydrate) {
        Ks();
        const w = Yn(t.target);
        y.fragment && y.fragment.l(w), w.forEach($);
      } else y.fragment && y.fragment.c();
      t.intro && He(e.$$.fragment),
        _i(e, t.target, t.anchor, t.customElement),
        $s(),
        J();
    }
    Jn(h);
  }
  let Qn;
  typeof HTMLElement == "function" &&
    (Qn = class extends HTMLElement {
      constructor() {
        super();
        this.attachShadow({ mode: "open" });
      }
      connectedCallback() {
        const { on_mount: e } = this.$$;
        this.$$.on_disconnect = e.map(di).filter(Hn);
        for (const t in this.$$.slotted) this.appendChild(this.$$.slotted[t]);
      }
      attributeChangedCallback(e, t, n) {
        this[e] = n;
      }
      disconnectedCallback() {
        Lt(this.$$.on_disconnect);
      }
      $destroy() {
        Ur(this, 1), (this.$destroy = ae);
      }
      $on(e, t) {
        const n = this.$$.callbacks[e] || (this.$$.callbacks[e] = []);
        return (
          n.push(t),
          () => {
            const o = n.indexOf(t);
            o !== -1 && n.splice(o, 1);
          }
        );
      }
      $set(e) {
        this.$$set &&
          !ha(e) &&
          ((this.$$.skip_bound = !0), this.$$set(e), (this.$$.skip_bound = !1));
      }
    });
  class Oa {
    $destroy() {
      Ur(this, 1), (this.$destroy = ae);
    }
    $on(t, n) {
      const o = this.$$.callbacks[t] || (this.$$.callbacks[t] = []);
      return (
        o.push(n),
        () => {
          const l = o.indexOf(n);
          l !== -1 && o.splice(l, 1);
        }
      );
    }
    $set(t) {
      this.$$set &&
        !ha(t) &&
        ((this.$$.skip_bound = !0), this.$$set(t), (this.$$.skip_bound = !1));
    }
  }
  function cu(e, t, n) {
    return (
      (n = {
        path: t,
        exports: {},
        require: function (o, l) {
          return du(o, l == null ? n.path : l);
        },
      }),
      e(n, n.exports),
      n.exports
    );
  }
  function du() {
    throw new Error(
      "Dynamic requires are not currently supported by @rollup/plugin-commonjs",
    );
  }
  var wn = cu(function (e, t) {
    Object.defineProperty(t, "__esModule", { value: !0 });
    function n(i, u) {
      for (var a = 0; a < u.length; a++) {
        var r = u[a];
        (r.enumerable = r.enumerable || !1),
          (r.configurable = !0),
          "value" in r && (r.writable = !0),
          Object.defineProperty(i, r.key, r);
      }
    }
    function o(i, u, a) {
      return u && n(i.prototype, u), a && n(i, a), i;
    }
    function l() {
      return (
        (l =
          Object.assign ||
          function (i) {
            for (var u = 1; u < arguments.length; u++) {
              var a = arguments[u];
              for (var r in a)
                Object.prototype.hasOwnProperty.call(a, r) && (i[r] = a[r]);
            }
            return i;
          }),
        l.apply(this, arguments)
      );
    }
    function c(i, u) {
      (i.prototype = Object.create(u.prototype)),
        (i.prototype.constructor = i),
        m(i, u);
    }
    function d(i) {
      return (
        (d = Object.setPrototypeOf
          ? Object.getPrototypeOf
          : function (a) {
              return a.__proto__ || Object.getPrototypeOf(a);
            }),
        d(i)
      );
    }
    function m(i, u) {
      return (
        (m =
          Object.setPrototypeOf ||
          function (r, s) {
            return (r.__proto__ = s), r;
          }),
        m(i, u)
      );
    }
    function h() {
      if (
        typeof Reflect == "undefined" ||
        !Reflect.construct ||
        Reflect.construct.sham
      )
        return !1;
      if (typeof Proxy == "function") return !0;
      try {
        return (
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {}),
          ),
          !0
        );
      } catch (i) {
        return !1;
      }
    }
    function y(i, u, a) {
      return (
        h()
          ? (y = Reflect.construct)
          : (y = function (s, f, g) {
              var v = [null];
              v.push.apply(v, f);
              var b = Function.bind.apply(s, v),
                S = new b();
              return g && m(S, g.prototype), S;
            }),
        y.apply(null, arguments)
      );
    }
    function p(i) {
      return Function.toString.call(i).indexOf("[native code]") !== -1;
    }
    function w(i) {
      var u = typeof Map == "function" ? new Map() : void 0;
      return (
        (w = function (r) {
          if (r === null || !p(r)) return r;
          if (typeof r != "function")
            throw new TypeError(
              "Super expression must either be null or a function",
            );
          if (typeof u != "undefined") {
            if (u.has(r)) return u.get(r);
            u.set(r, s);
          }
          function s() {
            return y(r, arguments, d(this).constructor);
          }
          return (
            (s.prototype = Object.create(r.prototype, {
              constructor: {
                value: s,
                enumerable: !1,
                writable: !0,
                configurable: !0,
              },
            })),
            m(s, r)
          );
        }),
        w(i)
      );
    }
    function k(i, u) {
      if (i == null) return {};
      var a = {},
        r = Object.keys(i),
        s,
        f;
      for (f = 0; f < r.length; f++)
        (s = r[f]), !(u.indexOf(s) >= 0) && (a[s] = i[s]);
      return a;
    }
    function N(i, u) {
      if (!!i) {
        if (typeof i == "string") return T(i, u);
        var a = Object.prototype.toString.call(i).slice(8, -1);
        if (
          (a === "Object" && i.constructor && (a = i.constructor.name),
          a === "Map" || a === "Set")
        )
          return Array.from(i);
        if (
          a === "Arguments" ||
          /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)
        )
          return T(i, u);
      }
    }
    function T(i, u) {
      (u == null || u > i.length) && (u = i.length);
      for (var a = 0, r = new Array(u); a < u; a++) r[a] = i[a];
      return r;
    }
    function H(i, u) {
      var a =
        (typeof Symbol != "undefined" && i[Symbol.iterator]) || i["@@iterator"];
      if (a) return (a = a.call(i)).next.bind(a);
      if (
        Array.isArray(i) ||
        (a = N(i)) ||
        (u && i && typeof i.length == "number")
      ) {
        a && (i = a);
        var r = 0;
        return function () {
          return r >= i.length ? { done: !0 } : { done: !1, value: i[r++] };
        };
      }
      throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
    }
    var F = (function (i) {
        c(u, i);
        function u() {
          return i.apply(this, arguments) || this;
        }
        return u;
      })(w(Error)),
      I = (function (i) {
        c(u, i);
        function u(a) {
          return i.call(this, "Invalid DateTime: " + a.toMessage()) || this;
        }
        return u;
      })(F),
      R = (function (i) {
        c(u, i);
        function u(a) {
          return i.call(this, "Invalid Interval: " + a.toMessage()) || this;
        }
        return u;
      })(F),
      te = (function (i) {
        c(u, i);
        function u(a) {
          return i.call(this, "Invalid Duration: " + a.toMessage()) || this;
        }
        return u;
      })(F),
      ne = (function (i) {
        c(u, i);
        function u() {
          return i.apply(this, arguments) || this;
        }
        return u;
      })(F),
      me = (function (i) {
        c(u, i);
        function u(a) {
          return i.call(this, "Invalid unit " + a) || this;
        }
        return u;
      })(F),
      L = (function (i) {
        c(u, i);
        function u() {
          return i.apply(this, arguments) || this;
        }
        return u;
      })(F),
      Z = (function (i) {
        c(u, i);
        function u() {
          return i.call(this, "Zone is an abstract class") || this;
        }
        return u;
      })(F),
      O = "numeric",
      ue = "short",
      oe = "long",
      q = { year: O, month: O, day: O },
      ve = { year: O, month: ue, day: O },
      Se = { year: O, month: ue, day: O, weekday: ue },
      Fe = { year: O, month: oe, day: O },
      ke = { year: O, month: oe, day: O, weekday: oe },
      V = { hour: O, minute: O },
      K = { hour: O, minute: O, second: O },
      Ne = { hour: O, minute: O, second: O, timeZoneName: ue },
      Le = { hour: O, minute: O, second: O, timeZoneName: oe },
      Kt = { hour: O, minute: O, hourCycle: "h23" },
      $t = { hour: O, minute: O, second: O, hourCycle: "h23" },
      en = {
        hour: O,
        minute: O,
        second: O,
        hourCycle: "h23",
        timeZoneName: ue,
      },
      tn = {
        hour: O,
        minute: O,
        second: O,
        hourCycle: "h23",
        timeZoneName: oe,
      },
      nn = { year: O, month: O, day: O, hour: O, minute: O },
      rn = { year: O, month: O, day: O, hour: O, minute: O, second: O },
      an = { year: O, month: ue, day: O, hour: O, minute: O },
      on = { year: O, month: ue, day: O, hour: O, minute: O, second: O },
      Cn = { year: O, month: ue, day: O, weekday: ue, hour: O, minute: O },
      P = { year: O, month: oe, day: O, hour: O, minute: O, timeZoneName: ue },
      re = {
        year: O,
        month: oe,
        day: O,
        hour: O,
        minute: O,
        second: O,
        timeZoneName: ue,
      },
      se = {
        year: O,
        month: oe,
        day: O,
        weekday: oe,
        hour: O,
        minute: O,
        timeZoneName: oe,
      },
      x = {
        year: O,
        month: oe,
        day: O,
        weekday: oe,
        hour: O,
        minute: O,
        second: O,
        timeZoneName: oe,
      };
    function B(i) {
      return typeof i == "undefined";
    }
    function le(i) {
      return typeof i == "number";
    }
    function Me(i) {
      return typeof i == "number" && i % 1 == 0;
    }
    function Ce(i) {
      return typeof i == "string";
    }
    function Be(i) {
      return Object.prototype.toString.call(i) === "[object Date]";
    }
    function Pt() {
      try {
        return typeof Intl != "undefined" && !!Intl.RelativeTimeFormat;
      } catch (i) {
        return !1;
      }
    }
    function Yr(i) {
      return Array.isArray(i) ? i : [i];
    }
    function ur(i, u, a) {
      if (i.length !== 0)
        return i.reduce(function (r, s) {
          var f = [u(s), s];
          return r && a(r[0], f[0]) === r[0] ? r : f;
        }, null)[1];
    }
    function qr(i, u) {
      return u.reduce(function (a, r) {
        return (a[r] = i[r]), a;
      }, {});
    }
    function Mt(i, u) {
      return Object.prototype.hasOwnProperty.call(i, u);
    }
    function Ge(i, u, a) {
      return Me(i) && i >= u && i <= a;
    }
    function Jr(i, u) {
      return i - u * Math.floor(i / u);
    }
    function Te(i, u) {
      u === void 0 && (u = 2);
      var a = i < 0,
        r;
      return (
        a
          ? (r = "-" + ("" + -i).padStart(u, "0"))
          : (r = ("" + i).padStart(u, "0")),
        r
      );
    }
    function je(i) {
      if (!(B(i) || i === null || i === "")) return parseInt(i, 10);
    }
    function Dt(i) {
      if (!(B(i) || i === null || i === "")) return parseFloat(i);
    }
    function C(i) {
      if (!(B(i) || i === null || i === "")) {
        var u = parseFloat("0." + i) * 1e3;
        return Math.floor(u);
      }
    }
    function xt(i, u, a) {
      a === void 0 && (a = !1);
      var r = Math.pow(10, u),
        s = a ? Math.trunc : Math.round;
      return s(i * r) / r;
    }
    function Qe(i) {
      return i % 4 == 0 && (i % 100 != 0 || i % 400 == 0);
    }
    function nt(i) {
      return Qe(i) ? 366 : 365;
    }
    function Xe(i, u) {
      var a = Jr(u - 1, 12) + 1,
        r = i + (u - a) / 12;
      return a === 2
        ? Qe(r)
          ? 29
          : 28
        : [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][a - 1];
    }
    function Et(i) {
      var u = Date.UTC(
        i.year,
        i.month - 1,
        i.day,
        i.hour,
        i.minute,
        i.second,
        i.millisecond,
      );
      return (
        i.year < 100 &&
          i.year >= 0 &&
          ((u = new Date(u)), u.setUTCFullYear(u.getUTCFullYear() - 1900)),
        +u
      );
    }
    function ht(i) {
      var u =
          (i + Math.floor(i / 4) - Math.floor(i / 100) + Math.floor(i / 400)) %
          7,
        a = i - 1,
        r =
          (a + Math.floor(a / 4) - Math.floor(a / 100) + Math.floor(a / 400)) %
          7;
      return u === 4 || r === 3 ? 53 : 52;
    }
    function An(i) {
      return i > 99 ? i : i > 60 ? 1900 + i : 2e3 + i;
    }
    function mt(i, u, a, r) {
      r === void 0 && (r = null);
      var s = new Date(i),
        f = {
          hourCycle: "h23",
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
        };
      r && (f.timeZone = r);
      var g = l({ timeZoneName: u }, f),
        v = new Intl.DateTimeFormat(a, g).formatToParts(s).find(function (b) {
          return b.type.toLowerCase() === "timezonename";
        });
      return v ? v.value : null;
    }
    function We(i, u) {
      var a = parseInt(i, 10);
      Number.isNaN(a) && (a = 0);
      var r = parseInt(u, 10) || 0,
        s = a < 0 || Object.is(a, -0) ? -r : r;
      return a * 60 + s;
    }
    function Fn(i) {
      var u = Number(i);
      if (typeof i == "boolean" || i === "" || Number.isNaN(u))
        throw new L("Invalid unit value " + i);
      return u;
    }
    function Vt(i, u) {
      var a = {};
      for (var r in i)
        if (Mt(i, r)) {
          var s = i[r];
          if (s == null) continue;
          a[u(r)] = Fn(s);
        }
      return a;
    }
    function gt(i, u) {
      var a = Math.trunc(Math.abs(i / 60)),
        r = Math.trunc(Math.abs(i % 60)),
        s = i >= 0 ? "+" : "-";
      switch (u) {
        case "short":
          return "" + s + Te(a, 2) + ":" + Te(r, 2);
        case "narrow":
          return "" + s + a + (r > 0 ? ":" + r : "");
        case "techie":
          return "" + s + Te(a, 2) + Te(r, 2);
        default:
          throw new RangeError(
            "Value format " + u + " is out of range for property format",
          );
      }
    }
    function yt(i) {
      return qr(i, ["hour", "minute", "second", "millisecond"]);
    }
    var vt =
        /[A-Za-z_+-]{1,256}(:?\/[A-Za-z0-9_+-]{1,256}(\/[A-Za-z0-9_+-]{1,256})?)?/,
      _t = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ],
      Wt = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ],
      Br = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
    function lr(i) {
      switch (i) {
        case "narrow":
          return [].concat(Br);
        case "short":
          return [].concat(Wt);
        case "long":
          return [].concat(_t);
        case "numeric":
          return [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
          ];
        case "2-digit":
          return [
            "01",
            "02",
            "03",
            "04",
            "05",
            "06",
            "07",
            "08",
            "09",
            "10",
            "11",
            "12",
          ];
        default:
          return null;
      }
    }
    var fr = [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday",
      ],
      cr = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
      Gr = ["M", "T", "W", "T", "F", "S", "S"];
    function Qr(i) {
      switch (i) {
        case "narrow":
          return [].concat(Gr);
        case "short":
          return [].concat(cr);
        case "long":
          return [].concat(fr);
        case "numeric":
          return ["1", "2", "3", "4", "5", "6", "7"];
        default:
          return null;
      }
    }
    var sn = ["AM", "PM"],
      Bi = ["Before Christ", "Anno Domini"],
      pe = ["BC", "AD"],
      dr = ["B", "A"];
    function rt(i) {
      switch (i) {
        case "narrow":
          return [].concat(dr);
        case "short":
          return [].concat(pe);
        case "long":
          return [].concat(Bi);
        default:
          return null;
      }
    }
    function hr(i) {
      return sn[i.hour < 12 ? 0 : 1];
    }
    function Ht(i, u) {
      return Qr(u)[i.weekday - 1];
    }
    function Nt(i, u) {
      return lr(u)[i.month - 1];
    }
    function Xr(i, u) {
      return rt(u)[i.year < 0 ? 0 : 1];
    }
    function un(i, u, a, r) {
      a === void 0 && (a = "always"), r === void 0 && (r = !1);
      var s = {
          years: ["year", "yr."],
          quarters: ["quarter", "qtr."],
          months: ["month", "mo."],
          weeks: ["week", "wk."],
          days: ["day", "day", "days"],
          hours: ["hour", "hr."],
          minutes: ["minute", "min."],
          seconds: ["second", "sec."],
        },
        f = ["hours", "minutes", "seconds"].indexOf(i) === -1;
      if (a === "auto" && f) {
        var g = i === "days";
        switch (u) {
          case 1:
            return g ? "tomorrow" : "next " + s[i][0];
          case -1:
            return g ? "yesterday" : "last " + s[i][0];
          case 0:
            return g ? "today" : "this " + s[i][0];
        }
      }
      var v = Object.is(u, -0) || u < 0,
        b = Math.abs(u),
        S = b === 1,
        A = s[i],
        D = r ? (S ? A[1] : A[2] || A[1]) : S ? s[i][0] : i;
      return v ? b + " " + D + " ago" : "in " + b + " " + D;
    }
    function ln(i, u) {
      for (var a = "", r = H(i), s; !(s = r()).done; ) {
        var f = s.value;
        f.literal ? (a += f.val) : (a += u(f.val));
      }
      return a;
    }
    var Kr = {
        D: q,
        DD: ve,
        DDD: Fe,
        DDDD: ke,
        t: V,
        tt: K,
        ttt: Ne,
        tttt: Le,
        T: Kt,
        TT: $t,
        TTT: en,
        TTTT: tn,
        f: nn,
        ff: an,
        fff: P,
        ffff: se,
        F: rn,
        FF: on,
        FFF: re,
        FFFF: x,
      },
      Ke = (function () {
        (i.create = function (r, s) {
          return s === void 0 && (s = {}), new i(r, s);
        }),
          (i.parseFormat = function (r) {
            for (
              var s = null, f = "", g = !1, v = [], b = 0;
              b < r.length;
              b++
            ) {
              var S = r.charAt(b);
              S === "'"
                ? (f.length > 0 && v.push({ literal: g, val: f }),
                  (s = null),
                  (f = ""),
                  (g = !g))
                : g || S === s
                ? (f += S)
                : (f.length > 0 && v.push({ literal: !1, val: f }),
                  (f = S),
                  (s = S));
            }
            return f.length > 0 && v.push({ literal: g, val: f }), v;
          }),
          (i.macroTokenToFormatOpts = function (r) {
            return Kr[r];
          });
        function i(a, r) {
          (this.opts = r), (this.loc = a), (this.systemLoc = null);
        }
        var u = i.prototype;
        return (
          (u.formatWithSystemDefault = function (r, s) {
            this.systemLoc === null &&
              (this.systemLoc = this.loc.redefaultToSystem());
            var f = this.systemLoc.dtFormatter(r, l({}, this.opts, s));
            return f.format();
          }),
          (u.formatDateTime = function (r, s) {
            s === void 0 && (s = {});
            var f = this.loc.dtFormatter(r, l({}, this.opts, s));
            return f.format();
          }),
          (u.formatDateTimeParts = function (r, s) {
            s === void 0 && (s = {});
            var f = this.loc.dtFormatter(r, l({}, this.opts, s));
            return f.formatToParts();
          }),
          (u.resolvedOptions = function (r, s) {
            s === void 0 && (s = {});
            var f = this.loc.dtFormatter(r, l({}, this.opts, s));
            return f.resolvedOptions();
          }),
          (u.num = function (r, s) {
            if ((s === void 0 && (s = 0), this.opts.forceSimple))
              return Te(r, s);
            var f = l({}, this.opts);
            return (
              s > 0 && (f.padTo = s), this.loc.numberFormatter(f).format(r)
            );
          }),
          (u.formatDateTimeFromString = function (r, s) {
            var f = this,
              g = this.loc.listingMode() === "en",
              v =
                this.loc.outputCalendar &&
                this.loc.outputCalendar !== "gregory",
              b = function (Q, Re) {
                return f.loc.extract(r, Q, Re);
              },
              S = function (Q) {
                return r.isOffsetFixed && r.offset === 0 && Q.allowZ
                  ? "Z"
                  : r.isValid
                  ? r.zone.formatOffset(r.ts, Q.format)
                  : "";
              },
              A = function () {
                return g
                  ? hr(r)
                  : b({ hour: "numeric", hourCycle: "h12" }, "dayperiod");
              },
              D = function (Q, Re) {
                return g
                  ? Nt(r, Q)
                  : b(
                      Re ? { month: Q } : { month: Q, day: "numeric" },
                      "month",
                    );
              },
              E = function (Q, Re) {
                return g
                  ? Ht(r, Q)
                  : b(
                      Re
                        ? { weekday: Q }
                        : { weekday: Q, month: "long", day: "numeric" },
                      "weekday",
                    );
              },
              W = function (Q) {
                var Re = i.macroTokenToFormatOpts(Q);
                return Re ? f.formatWithSystemDefault(r, Re) : Q;
              },
              X = function (Q) {
                return g ? Xr(r, Q) : b({ era: Q }, "era");
              },
              de = function (Q) {
                switch (Q) {
                  case "S":
                    return f.num(r.millisecond);
                  case "u":
                  case "SSS":
                    return f.num(r.millisecond, 3);
                  case "s":
                    return f.num(r.second);
                  case "ss":
                    return f.num(r.second, 2);
                  case "uu":
                    return f.num(Math.floor(r.millisecond / 10), 2);
                  case "uuu":
                    return f.num(Math.floor(r.millisecond / 100));
                  case "m":
                    return f.num(r.minute);
                  case "mm":
                    return f.num(r.minute, 2);
                  case "h":
                    return f.num(r.hour % 12 == 0 ? 12 : r.hour % 12);
                  case "hh":
                    return f.num(r.hour % 12 == 0 ? 12 : r.hour % 12, 2);
                  case "H":
                    return f.num(r.hour);
                  case "HH":
                    return f.num(r.hour, 2);
                  case "Z":
                    return S({ format: "narrow", allowZ: f.opts.allowZ });
                  case "ZZ":
                    return S({ format: "short", allowZ: f.opts.allowZ });
                  case "ZZZ":
                    return S({ format: "techie", allowZ: f.opts.allowZ });
                  case "ZZZZ":
                    return r.zone.offsetName(r.ts, {
                      format: "short",
                      locale: f.loc.locale,
                    });
                  case "ZZZZZ":
                    return r.zone.offsetName(r.ts, {
                      format: "long",
                      locale: f.loc.locale,
                    });
                  case "z":
                    return r.zoneName;
                  case "a":
                    return A();
                  case "d":
                    return v ? b({ day: "numeric" }, "day") : f.num(r.day);
                  case "dd":
                    return v ? b({ day: "2-digit" }, "day") : f.num(r.day, 2);
                  case "c":
                    return f.num(r.weekday);
                  case "ccc":
                    return E("short", !0);
                  case "cccc":
                    return E("long", !0);
                  case "ccccc":
                    return E("narrow", !0);
                  case "E":
                    return f.num(r.weekday);
                  case "EEE":
                    return E("short", !1);
                  case "EEEE":
                    return E("long", !1);
                  case "EEEEE":
                    return E("narrow", !1);
                  case "L":
                    return v
                      ? b({ month: "numeric", day: "numeric" }, "month")
                      : f.num(r.month);
                  case "LL":
                    return v
                      ? b({ month: "2-digit", day: "numeric" }, "month")
                      : f.num(r.month, 2);
                  case "LLL":
                    return D("short", !0);
                  case "LLLL":
                    return D("long", !0);
                  case "LLLLL":
                    return D("narrow", !0);
                  case "M":
                    return v
                      ? b({ month: "numeric" }, "month")
                      : f.num(r.month);
                  case "MM":
                    return v
                      ? b({ month: "2-digit" }, "month")
                      : f.num(r.month, 2);
                  case "MMM":
                    return D("short", !1);
                  case "MMMM":
                    return D("long", !1);
                  case "MMMMM":
                    return D("narrow", !1);
                  case "y":
                    return v ? b({ year: "numeric" }, "year") : f.num(r.year);
                  case "yy":
                    return v
                      ? b({ year: "2-digit" }, "year")
                      : f.num(r.year.toString().slice(-2), 2);
                  case "yyyy":
                    return v
                      ? b({ year: "numeric" }, "year")
                      : f.num(r.year, 4);
                  case "yyyyyy":
                    return v
                      ? b({ year: "numeric" }, "year")
                      : f.num(r.year, 6);
                  case "G":
                    return X("short");
                  case "GG":
                    return X("long");
                  case "GGGGG":
                    return X("narrow");
                  case "kk":
                    return f.num(r.weekYear.toString().slice(-2), 2);
                  case "kkkk":
                    return f.num(r.weekYear, 4);
                  case "W":
                    return f.num(r.weekNumber);
                  case "WW":
                    return f.num(r.weekNumber, 2);
                  case "o":
                    return f.num(r.ordinal);
                  case "ooo":
                    return f.num(r.ordinal, 3);
                  case "q":
                    return f.num(r.quarter);
                  case "qq":
                    return f.num(r.quarter, 2);
                  case "X":
                    return f.num(Math.floor(r.ts / 1e3));
                  case "x":
                    return f.num(r.ts);
                  default:
                    return W(Q);
                }
              };
            return ln(i.parseFormat(s), de);
          }),
          (u.formatDurationFromString = function (r, s) {
            var f = this,
              g = function (E) {
                switch (E[0]) {
                  case "S":
                    return "millisecond";
                  case "s":
                    return "second";
                  case "m":
                    return "minute";
                  case "h":
                    return "hour";
                  case "d":
                    return "day";
                  case "M":
                    return "month";
                  case "y":
                    return "year";
                  default:
                    return null;
                }
              },
              v = function (E) {
                return function (W) {
                  var X = g(W);
                  return X ? f.num(E.get(X), W.length) : W;
                };
              },
              b = i.parseFormat(s),
              S = b.reduce(function (D, E) {
                var W = E.literal,
                  X = E.val;
                return W ? D : D.concat(X);
              }, []),
              A = r.shiftTo.apply(
                r,
                S.map(g).filter(function (D) {
                  return D;
                }),
              );
            return ln(b, v(A));
          }),
          i
        );
      })(),
      Ye = (function () {
        function i(a, r) {
          (this.reason = a), (this.explanation = r);
        }
        var u = i.prototype;
        return (
          (u.toMessage = function () {
            return this.explanation
              ? this.reason + ": " + this.explanation
              : this.reason;
          }),
          i
        );
      })(),
      Zt = (function () {
        function i() {}
        var u = i.prototype;
        return (
          (u.offsetName = function (r, s) {
            throw new Z();
          }),
          (u.formatOffset = function (r, s) {
            throw new Z();
          }),
          (u.offset = function (r) {
            throw new Z();
          }),
          (u.equals = function (r) {
            throw new Z();
          }),
          o(i, [
            {
              key: "type",
              get: function () {
                throw new Z();
              },
            },
            {
              key: "name",
              get: function () {
                throw new Z();
              },
            },
            {
              key: "isUniversal",
              get: function () {
                throw new Z();
              },
            },
            {
              key: "isValid",
              get: function () {
                throw new Z();
              },
            },
          ]),
          i
        );
      })(),
      mr = null,
      fn = (function (i) {
        c(u, i);
        function u() {
          return i.apply(this, arguments) || this;
        }
        var a = u.prototype;
        return (
          (a.offsetName = function (s, f) {
            var g = f.format,
              v = f.locale;
            return mt(s, g, v);
          }),
          (a.formatOffset = function (s, f) {
            return gt(this.offset(s), f);
          }),
          (a.offset = function (s) {
            return -new Date(s).getTimezoneOffset();
          }),
          (a.equals = function (s) {
            return s.type === "system";
          }),
          o(
            u,
            [
              {
                key: "type",
                get: function () {
                  return "system";
                },
              },
              {
                key: "name",
                get: function () {
                  return new Intl.DateTimeFormat().resolvedOptions().timeZone;
                },
              },
              {
                key: "isUniversal",
                get: function () {
                  return !1;
                },
              },
              {
                key: "isValid",
                get: function () {
                  return !0;
                },
              },
            ],
            [
              {
                key: "instance",
                get: function () {
                  return mr === null && (mr = new u()), mr;
                },
              },
            ],
          ),
          u
        );
      })(Zt),
      $r = RegExp("^" + vt.source + "$"),
      cn = {};
    function ei(i) {
      return (
        cn[i] ||
          (cn[i] = new Intl.DateTimeFormat("en-US", {
            hour12: !1,
            timeZone: i,
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
          })),
        cn[i]
      );
    }
    var Gi = { year: 0, month: 1, day: 2, hour: 3, minute: 4, second: 5 };
    function It(i, u) {
      var a = i.format(u).replace(/\u200E/g, ""),
        r = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(a),
        s = r[1],
        f = r[2],
        g = r[3],
        v = r[4],
        b = r[5],
        S = r[6];
      return [g, s, f, v, b, S];
    }
    function dn(i, u) {
      for (var a = i.formatToParts(u), r = [], s = 0; s < a.length; s++) {
        var f = a[s],
          g = f.type,
          v = f.value,
          b = Gi[g];
        B(b) || (r[b] = parseInt(v, 10));
      }
      return r;
    }
    var Ln = {},
      it = (function (i) {
        c(u, i),
          (u.create = function (s) {
            return Ln[s] || (Ln[s] = new u(s)), Ln[s];
          }),
          (u.resetCache = function () {
            (Ln = {}), (cn = {});
          }),
          (u.isValidSpecifier = function (s) {
            return !!(s && s.match($r));
          }),
          (u.isValidZone = function (s) {
            if (!s) return !1;
            try {
              return (
                new Intl.DateTimeFormat("en-US", { timeZone: s }).format(), !0
              );
            } catch (f) {
              return !1;
            }
          });
        function u(r) {
          var s;
          return (
            (s = i.call(this) || this),
            (s.zoneName = r),
            (s.valid = u.isValidZone(r)),
            s
          );
        }
        var a = u.prototype;
        return (
          (a.offsetName = function (s, f) {
            var g = f.format,
              v = f.locale;
            return mt(s, g, v, this.name);
          }),
          (a.formatOffset = function (s, f) {
            return gt(this.offset(s), f);
          }),
          (a.offset = function (s) {
            var f = new Date(s);
            if (isNaN(f)) return NaN;
            var g = ei(this.name),
              v = g.formatToParts ? dn(g, f) : It(g, f),
              b = v[0],
              S = v[1],
              A = v[2],
              D = v[3],
              E = v[4],
              W = v[5],
              X = D === 24 ? 0 : D,
              de = Et({
                year: b,
                month: S,
                day: A,
                hour: X,
                minute: E,
                second: W,
                millisecond: 0,
              }),
              ce = +f,
              Q = ce % 1e3;
            return (ce -= Q >= 0 ? Q : 1e3 + Q), (de - ce) / (60 * 1e3);
          }),
          (a.equals = function (s) {
            return s.type === "iana" && s.name === this.name;
          }),
          o(u, [
            {
              key: "type",
              get: function () {
                return "iana";
              },
            },
            {
              key: "name",
              get: function () {
                return this.zoneName;
              },
            },
            {
              key: "isUniversal",
              get: function () {
                return !1;
              },
            },
            {
              key: "isValid",
              get: function () {
                return this.valid;
              },
            },
          ]),
          u
        );
      })(Zt),
      gr = null,
      Pe = (function (i) {
        c(u, i),
          (u.instance = function (s) {
            return s === 0 ? u.utcInstance : new u(s);
          }),
          (u.parseSpecifier = function (s) {
            if (s) {
              var f = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
              if (f) return new u(We(f[1], f[2]));
            }
            return null;
          });
        function u(r) {
          var s;
          return (s = i.call(this) || this), (s.fixed = r), s;
        }
        var a = u.prototype;
        return (
          (a.offsetName = function () {
            return this.name;
          }),
          (a.formatOffset = function (s, f) {
            return gt(this.fixed, f);
          }),
          (a.offset = function () {
            return this.fixed;
          }),
          (a.equals = function (s) {
            return s.type === "fixed" && s.fixed === this.fixed;
          }),
          o(
            u,
            [
              {
                key: "type",
                get: function () {
                  return "fixed";
                },
              },
              {
                key: "name",
                get: function () {
                  return this.fixed === 0
                    ? "UTC"
                    : "UTC" + gt(this.fixed, "narrow");
                },
              },
              {
                key: "isUniversal",
                get: function () {
                  return !0;
                },
              },
              {
                key: "isValid",
                get: function () {
                  return !0;
                },
              },
            ],
            [
              {
                key: "utcInstance",
                get: function () {
                  return gr === null && (gr = new u(0)), gr;
                },
              },
            ],
          ),
          u
        );
      })(Zt),
      Ct = (function (i) {
        c(u, i);
        function u(r) {
          var s;
          return (s = i.call(this) || this), (s.zoneName = r), s;
        }
        var a = u.prototype;
        return (
          (a.offsetName = function () {
            return null;
          }),
          (a.formatOffset = function () {
            return "";
          }),
          (a.offset = function () {
            return NaN;
          }),
          (a.equals = function () {
            return !1;
          }),
          o(u, [
            {
              key: "type",
              get: function () {
                return "invalid";
              },
            },
            {
              key: "name",
              get: function () {
                return this.zoneName;
              },
            },
            {
              key: "isUniversal",
              get: function () {
                return !1;
              },
            },
            {
              key: "isValid",
              get: function () {
                return !1;
              },
            },
          ]),
          u
        );
      })(Zt);
    function pt(i, u) {
      if (B(i) || i === null) return u;
      if (i instanceof Zt) return i;
      if (Ce(i)) {
        var a = i.toLowerCase();
        return a === "local" || a === "system"
          ? u
          : a === "utc" || a === "gmt"
          ? Pe.utcInstance
          : it.isValidSpecifier(a)
          ? it.create(i)
          : Pe.parseSpecifier(a) || new Ct(i);
      } else return le(i) ? Pe.instance(i) : typeof i == "object" && i.offset && typeof i.offset == "number" ? i : new Ct(i);
    }
    var ti = function () {
        return Date.now();
      },
      ni = "system",
      ri = null,
      ii = null,
      ai = null,
      oi,
      Oe = (function () {
        function i() {}
        return (
          (i.resetCaches = function () {
            Ae.resetCache(), it.resetCache();
          }),
          o(i, null, [
            {
              key: "now",
              get: function () {
                return ti;
              },
              set: function (a) {
                ti = a;
              },
            },
            {
              key: "defaultZone",
              get: function () {
                return pt(ni, fn.instance);
              },
              set: function (a) {
                ni = a;
              },
            },
            {
              key: "defaultLocale",
              get: function () {
                return ri;
              },
              set: function (a) {
                ri = a;
              },
            },
            {
              key: "defaultNumberingSystem",
              get: function () {
                return ii;
              },
              set: function (a) {
                ii = a;
              },
            },
            {
              key: "defaultOutputCalendar",
              get: function () {
                return ai;
              },
              set: function (a) {
                ai = a;
              },
            },
            {
              key: "throwOnInvalid",
              get: function () {
                return oi;
              },
              set: function (a) {
                oi = a;
              },
            },
          ]),
          i
        );
      })(),
      Qi = ["base"],
      Xi = ["padTo", "floor"],
      _ = {};
    function M(i, u) {
      u === void 0 && (u = {});
      var a = JSON.stringify([i, u]),
        r = _[a];
      return r || ((r = new Intl.ListFormat(i, u)), (_[a] = r)), r;
    }
    var Y = {};
    function U(i, u) {
      u === void 0 && (u = {});
      var a = JSON.stringify([i, u]),
        r = Y[a];
      return r || ((r = new Intl.DateTimeFormat(i, u)), (Y[a] = r)), r;
    }
    var ee = {};
    function _e(i, u) {
      u === void 0 && (u = {});
      var a = JSON.stringify([i, u]),
        r = ee[a];
      return r || ((r = new Intl.NumberFormat(i, u)), (ee[a] = r)), r;
    }
    var Ue = {};
    function jt(i, u) {
      u === void 0 && (u = {});
      var a = u;
      a.base;
      var r = k(a, Qi),
        s = JSON.stringify([i, r]),
        f = Ue[s];
      return f || ((f = new Intl.RelativeTimeFormat(i, u)), (Ue[s] = f)), f;
    }
    var $e = null;
    function at() {
      return (
        $e || (($e = new Intl.DateTimeFormat().resolvedOptions().locale), $e)
      );
    }
    function At(i) {
      var u = i.indexOf("-u-");
      if (u === -1) return [i];
      var a,
        r = i.substring(0, u);
      try {
        a = U(i).resolvedOptions();
      } catch (v) {
        a = U(r).resolvedOptions();
      }
      var s = a,
        f = s.numberingSystem,
        g = s.calendar;
      return [r, f, g];
    }
    function yr(i, u, a) {
      return (
        (a || u) &&
          ((i += "-u"), a && (i += "-ca-" + a), u && (i += "-nu-" + u)),
        i
      );
    }
    function Pc(i) {
      for (var u = [], a = 1; a <= 12; a++) {
        var r = De.utc(2016, a, 1);
        u.push(i(r));
      }
      return u;
    }
    function Vc(i) {
      for (var u = [], a = 1; a <= 7; a++) {
        var r = De.utc(2016, 11, 13 + a);
        u.push(i(r));
      }
      return u;
    }
    function si(i, u, a, r, s) {
      var f = i.listingMode(a);
      return f === "error" ? null : f === "en" ? r(u) : s(u);
    }
    function Wc(i) {
      return i.numberingSystem && i.numberingSystem !== "latn"
        ? !1
        : i.numberingSystem === "latn" ||
            !i.locale ||
            i.locale.startsWith("en") ||
            new Intl.DateTimeFormat(i.intl).resolvedOptions()
              .numberingSystem === "latn";
    }
    var Hc = (function () {
        function i(a, r, s) {
          (this.padTo = s.padTo || 0),
            (this.floor = s.floor || !1),
            s.padTo,
            s.floor;
          var f = k(s, Xi);
          if (!r || Object.keys(f).length > 0) {
            var g = l({ useGrouping: !1 }, s);
            s.padTo > 0 && (g.minimumIntegerDigits = s.padTo),
              (this.inf = _e(a, g));
          }
        }
        var u = i.prototype;
        return (
          (u.format = function (r) {
            if (this.inf) {
              var s = this.floor ? Math.floor(r) : r;
              return this.inf.format(s);
            } else {
              var f = this.floor ? Math.floor(r) : xt(r, 3);
              return Te(f, this.padTo);
            }
          }),
          i
        );
      })(),
      Zc = (function () {
        function i(a, r, s) {
          this.opts = s;
          var f;
          if (a.zone.isUniversal) {
            var g = -1 * (a.offset / 60),
              v = g >= 0 ? "Etc/GMT+" + g : "Etc/GMT" + g;
            a.offset !== 0 && it.create(v).valid
              ? ((f = v), (this.dt = a))
              : ((f = "UTC"),
                s.timeZoneName
                  ? (this.dt = a)
                  : (this.dt =
                      a.offset === 0
                        ? a
                        : De.fromMillis(a.ts + a.offset * 60 * 1e3)));
          } else
            a.zone.type === "system"
              ? (this.dt = a)
              : ((this.dt = a), (f = a.zone.name));
          var b = l({}, this.opts);
          f && (b.timeZone = f), (this.dtf = U(r, b));
        }
        var u = i.prototype;
        return (
          (u.format = function () {
            return this.dtf.format(this.dt.toJSDate());
          }),
          (u.formatToParts = function () {
            return this.dtf.formatToParts(this.dt.toJSDate());
          }),
          (u.resolvedOptions = function () {
            return this.dtf.resolvedOptions();
          }),
          i
        );
      })(),
      jc = (function () {
        function i(a, r, s) {
          (this.opts = l({ style: "long" }, s)),
            !r && Pt() && (this.rtf = jt(a, s));
        }
        var u = i.prototype;
        return (
          (u.format = function (r, s) {
            return this.rtf
              ? this.rtf.format(r, s)
              : un(s, r, this.opts.numeric, this.opts.style !== "long");
          }),
          (u.formatToParts = function (r, s) {
            return this.rtf ? this.rtf.formatToParts(r, s) : [];
          }),
          i
        );
      })(),
      Ae = (function () {
        (i.fromOpts = function (r) {
          return i.create(
            r.locale,
            r.numberingSystem,
            r.outputCalendar,
            r.defaultToEN,
          );
        }),
          (i.create = function (r, s, f, g) {
            g === void 0 && (g = !1);
            var v = r || Oe.defaultLocale,
              b = v || (g ? "en-US" : at()),
              S = s || Oe.defaultNumberingSystem,
              A = f || Oe.defaultOutputCalendar;
            return new i(b, S, A, v);
          }),
          (i.resetCache = function () {
            ($e = null), (Y = {}), (ee = {}), (Ue = {});
          }),
          (i.fromObject = function (r) {
            var s = r === void 0 ? {} : r,
              f = s.locale,
              g = s.numberingSystem,
              v = s.outputCalendar;
            return i.create(f, g, v);
          });
        function i(a, r, s, f) {
          var g = At(a),
            v = g[0],
            b = g[1],
            S = g[2];
          (this.locale = v),
            (this.numberingSystem = r || b || null),
            (this.outputCalendar = s || S || null),
            (this.intl = yr(
              this.locale,
              this.numberingSystem,
              this.outputCalendar,
            )),
            (this.weekdaysCache = { format: {}, standalone: {} }),
            (this.monthsCache = { format: {}, standalone: {} }),
            (this.meridiemCache = null),
            (this.eraCache = {}),
            (this.specifiedLocale = f),
            (this.fastNumbersCached = null);
        }
        var u = i.prototype;
        return (
          (u.listingMode = function () {
            var r = this.isEnglish(),
              s =
                (this.numberingSystem === null ||
                  this.numberingSystem === "latn") &&
                (this.outputCalendar === null ||
                  this.outputCalendar === "gregory");
            return r && s ? "en" : "intl";
          }),
          (u.clone = function (r) {
            return !r || Object.getOwnPropertyNames(r).length === 0
              ? this
              : i.create(
                  r.locale || this.specifiedLocale,
                  r.numberingSystem || this.numberingSystem,
                  r.outputCalendar || this.outputCalendar,
                  r.defaultToEN || !1,
                );
          }),
          (u.redefaultToEN = function (r) {
            return (
              r === void 0 && (r = {}),
              this.clone(l({}, r, { defaultToEN: !0 }))
            );
          }),
          (u.redefaultToSystem = function (r) {
            return (
              r === void 0 && (r = {}),
              this.clone(l({}, r, { defaultToEN: !1 }))
            );
          }),
          (u.months = function (r, s, f) {
            var g = this;
            return (
              s === void 0 && (s = !1),
              f === void 0 && (f = !0),
              si(this, r, f, lr, function () {
                var v = s ? { month: r, day: "numeric" } : { month: r },
                  b = s ? "format" : "standalone";
                return (
                  g.monthsCache[b][r] ||
                    (g.monthsCache[b][r] = Pc(function (S) {
                      return g.extract(S, v, "month");
                    })),
                  g.monthsCache[b][r]
                );
              })
            );
          }),
          (u.weekdays = function (r, s, f) {
            var g = this;
            return (
              s === void 0 && (s = !1),
              f === void 0 && (f = !0),
              si(this, r, f, Qr, function () {
                var v = s
                    ? {
                        weekday: r,
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      }
                    : { weekday: r },
                  b = s ? "format" : "standalone";
                return (
                  g.weekdaysCache[b][r] ||
                    (g.weekdaysCache[b][r] = Vc(function (S) {
                      return g.extract(S, v, "weekday");
                    })),
                  g.weekdaysCache[b][r]
                );
              })
            );
          }),
          (u.meridiems = function (r) {
            var s = this;
            return (
              r === void 0 && (r = !0),
              si(
                this,
                void 0,
                r,
                function () {
                  return sn;
                },
                function () {
                  if (!s.meridiemCache) {
                    var f = { hour: "numeric", hourCycle: "h12" };
                    s.meridiemCache = [
                      De.utc(2016, 11, 13, 9),
                      De.utc(2016, 11, 13, 19),
                    ].map(function (g) {
                      return s.extract(g, f, "dayperiod");
                    });
                  }
                  return s.meridiemCache;
                },
              )
            );
          }),
          (u.eras = function (r, s) {
            var f = this;
            return (
              s === void 0 && (s = !0),
              si(this, r, s, rt, function () {
                var g = { era: r };
                return (
                  f.eraCache[r] ||
                    (f.eraCache[r] = [
                      De.utc(-40, 1, 1),
                      De.utc(2017, 1, 1),
                    ].map(function (v) {
                      return f.extract(v, g, "era");
                    })),
                  f.eraCache[r]
                );
              })
            );
          }),
          (u.extract = function (r, s, f) {
            var g = this.dtFormatter(r, s),
              v = g.formatToParts(),
              b = v.find(function (S) {
                return S.type.toLowerCase() === f;
              });
            return b ? b.value : null;
          }),
          (u.numberFormatter = function (r) {
            return (
              r === void 0 && (r = {}),
              new Hc(this.intl, r.forceSimple || this.fastNumbers, r)
            );
          }),
          (u.dtFormatter = function (r, s) {
            return s === void 0 && (s = {}), new Zc(r, this.intl, s);
          }),
          (u.relFormatter = function (r) {
            return (
              r === void 0 && (r = {}), new jc(this.intl, this.isEnglish(), r)
            );
          }),
          (u.listFormatter = function (r) {
            return r === void 0 && (r = {}), M(this.intl, r);
          }),
          (u.isEnglish = function () {
            return (
              this.locale === "en" ||
              this.locale.toLowerCase() === "en-us" ||
              new Intl.DateTimeFormat(this.intl)
                .resolvedOptions()
                .locale.startsWith("en-us")
            );
          }),
          (u.equals = function (r) {
            return (
              this.locale === r.locale &&
              this.numberingSystem === r.numberingSystem &&
              this.outputCalendar === r.outputCalendar
            );
          }),
          o(i, [
            {
              key: "fastNumbers",
              get: function () {
                return (
                  this.fastNumbersCached == null &&
                    (this.fastNumbersCached = Wc(this)),
                  this.fastNumbersCached
                );
              },
            },
          ]),
          i
        );
      })();
    function Un() {
      for (var i = arguments.length, u = new Array(i), a = 0; a < i; a++)
        u[a] = arguments[a];
      var r = u.reduce(function (s, f) {
        return s + f.source;
      }, "");
      return RegExp("^" + r + "$");
    }
    function hn() {
      for (var i = arguments.length, u = new Array(i), a = 0; a < i; a++)
        u[a] = arguments[a];
      return function (r) {
        return u
          .reduce(
            function (s, f) {
              var g = s[0],
                v = s[1],
                b = s[2],
                S = f(r, b),
                A = S[0],
                D = S[1],
                E = S[2];
              return [l({}, g, A), v || D, E];
            },
            [{}, null, 1],
          )
          .slice(0, 2);
      };
    }
    function zn(i) {
      if (i == null) return [null, null];
      for (
        var u = arguments.length, a = new Array(u > 1 ? u - 1 : 0), r = 1;
        r < u;
        r++
      )
        a[r - 1] = arguments[r];
      for (var s = 0, f = a; s < f.length; s++) {
        var g = f[s],
          v = g[0],
          b = g[1],
          S = v.exec(i);
        if (S) return b(S);
      }
      return [null, null];
    }
    function cs() {
      for (var i = arguments.length, u = new Array(i), a = 0; a < i; a++)
        u[a] = arguments[a];
      return function (r, s) {
        var f = {},
          g;
        for (g = 0; g < u.length; g++) f[u[g]] = je(r[s + g]);
        return [f, null, s + g];
      };
    }
    var ds = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,
      Ki = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,
      hs = RegExp("" + Ki.source + ds.source + "?"),
      $i = RegExp("(?:T" + hs.source + ")?"),
      Yc = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,
      qc = /(\d{4})-?W(\d\d)(?:-?(\d))?/,
      Jc = /(\d{4})-?(\d{3})/,
      Bc = cs("weekYear", "weekNumber", "weekDay"),
      Gc = cs("year", "ordinal"),
      Qc = /(\d{4})-(\d\d)-(\d\d)/,
      ms = RegExp(Ki.source + " ?(?:" + ds.source + "|(" + vt.source + "))?"),
      Xc = RegExp("(?: " + ms.source + ")?");
    function Rn(i, u, a) {
      var r = i[u];
      return B(r) ? a : je(r);
    }
    function gs(i, u) {
      var a = { year: Rn(i, u), month: Rn(i, u + 1, 1), day: Rn(i, u + 2, 1) };
      return [a, null, u + 3];
    }
    function mn(i, u) {
      var a = {
        hours: Rn(i, u, 0),
        minutes: Rn(i, u + 1, 0),
        seconds: Rn(i, u + 2, 0),
        milliseconds: C(i[u + 3]),
      };
      return [a, null, u + 4];
    }
    function Pn(i, u) {
      var a = !i[u] && !i[u + 1],
        r = We(i[u + 1], i[u + 2]),
        s = a ? null : Pe.instance(r);
      return [{}, s, u + 3];
    }
    function ys(i, u) {
      var a = i[u] ? it.create(i[u]) : null;
      return [{}, a, u + 1];
    }
    var Kc = RegExp("^T?" + Ki.source + "$"),
      $c =
        /^-?P(?:(?:(-?\d{1,9}(?:\.\d{1,9})?)Y)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,9}(?:\.\d{1,9})?)W)?(?:(-?\d{1,9}(?:\.\d{1,9})?)D)?(?:T(?:(-?\d{1,9}(?:\.\d{1,9})?)H)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;
    function ed(i) {
      var u = i[0],
        a = i[1],
        r = i[2],
        s = i[3],
        f = i[4],
        g = i[5],
        v = i[6],
        b = i[7],
        S = i[8],
        A = u[0] === "-",
        D = b && b[0] === "-",
        E = function (X, de) {
          return (
            de === void 0 && (de = !1),
            X !== void 0 && (de || (X && A)) ? -X : X
          );
        };
      return [
        {
          years: E(Dt(a)),
          months: E(Dt(r)),
          weeks: E(Dt(s)),
          days: E(Dt(f)),
          hours: E(Dt(g)),
          minutes: E(Dt(v)),
          seconds: E(Dt(b), b === "-0"),
          milliseconds: E(C(S), D),
        },
      ];
    }
    var td = {
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60,
    };
    function ea(i, u, a, r, s, f, g) {
      var v = {
        year: u.length === 2 ? An(je(u)) : je(u),
        month: Wt.indexOf(a) + 1,
        day: je(r),
        hour: je(s),
        minute: je(f),
      };
      return (
        g && (v.second = je(g)),
        i && (v.weekday = i.length > 3 ? fr.indexOf(i) + 1 : cr.indexOf(i) + 1),
        v
      );
    }
    var nd =
      /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
    function rd(i) {
      var u = i[1],
        a = i[2],
        r = i[3],
        s = i[4],
        f = i[5],
        g = i[6],
        v = i[7],
        b = i[8],
        S = i[9],
        A = i[10],
        D = i[11],
        E = ea(u, s, r, a, f, g, v),
        W;
      return b ? (W = td[b]) : S ? (W = 0) : (W = We(A, D)), [E, new Pe(W)];
    }
    function id(i) {
      return i
        .replace(/\([^)]*\)|[\n\t]/g, " ")
        .replace(/(\s\s+)/g, " ")
        .trim();
    }
    var ad =
        /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
      od =
        /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
      sd =
        /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
    function vs(i) {
      var u = i[1],
        a = i[2],
        r = i[3],
        s = i[4],
        f = i[5],
        g = i[6],
        v = i[7],
        b = ea(u, s, r, a, f, g, v);
      return [b, Pe.utcInstance];
    }
    function ud(i) {
      var u = i[1],
        a = i[2],
        r = i[3],
        s = i[4],
        f = i[5],
        g = i[6],
        v = i[7],
        b = ea(u, v, a, r, s, f, g);
      return [b, Pe.utcInstance];
    }
    var ld = Un(Yc, $i),
      fd = Un(qc, $i),
      cd = Un(Jc, $i),
      dd = Un(hs),
      hd = hn(gs, mn, Pn),
      md = hn(Bc, mn, Pn),
      gd = hn(Gc, mn, Pn),
      yd = hn(mn, Pn);
    function vd(i) {
      return zn(i, [ld, hd], [fd, md], [cd, gd], [dd, yd]);
    }
    function _d(i) {
      return zn(id(i), [nd, rd]);
    }
    function pd(i) {
      return zn(i, [ad, vs], [od, vs], [sd, ud]);
    }
    function bd(i) {
      return zn(i, [$c, ed]);
    }
    var wd = hn(mn);
    function kd(i) {
      return zn(i, [Kc, wd]);
    }
    var Sd = Un(Qc, Xc),
      Td = Un(ms),
      Od = hn(gs, mn, Pn, ys),
      Md = hn(mn, Pn, ys);
    function Dd(i) {
      return zn(i, [Sd, Od], [Td, Md]);
    }
    var xd = "Invalid Duration",
      _s = {
        weeks: {
          days: 7,
          hours: 7 * 24,
          minutes: 7 * 24 * 60,
          seconds: 7 * 24 * 60 * 60,
          milliseconds: 7 * 24 * 60 * 60 * 1e3,
        },
        days: {
          hours: 24,
          minutes: 24 * 60,
          seconds: 24 * 60 * 60,
          milliseconds: 24 * 60 * 60 * 1e3,
        },
        hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1e3 },
        minutes: { seconds: 60, milliseconds: 60 * 1e3 },
        seconds: { milliseconds: 1e3 },
      },
      Ed = l(
        {
          years: {
            quarters: 4,
            months: 12,
            weeks: 52,
            days: 365,
            hours: 365 * 24,
            minutes: 365 * 24 * 60,
            seconds: 365 * 24 * 60 * 60,
            milliseconds: 365 * 24 * 60 * 60 * 1e3,
          },
          quarters: {
            months: 3,
            weeks: 13,
            days: 91,
            hours: 91 * 24,
            minutes: 91 * 24 * 60,
            seconds: 91 * 24 * 60 * 60,
            milliseconds: 91 * 24 * 60 * 60 * 1e3,
          },
          months: {
            weeks: 4,
            days: 30,
            hours: 30 * 24,
            minutes: 30 * 24 * 60,
            seconds: 30 * 24 * 60 * 60,
            milliseconds: 30 * 24 * 60 * 60 * 1e3,
          },
        },
        _s,
      ),
      et = 146097 / 400,
      Vn = 146097 / 4800,
      Nd = l(
        {
          years: {
            quarters: 4,
            months: 12,
            weeks: et / 7,
            days: et,
            hours: et * 24,
            minutes: et * 24 * 60,
            seconds: et * 24 * 60 * 60,
            milliseconds: et * 24 * 60 * 60 * 1e3,
          },
          quarters: {
            months: 3,
            weeks: et / 28,
            days: et / 4,
            hours: (et * 24) / 4,
            minutes: (et * 24 * 60) / 4,
            seconds: (et * 24 * 60 * 60) / 4,
            milliseconds: (et * 24 * 60 * 60 * 1e3) / 4,
          },
          months: {
            weeks: Vn / 7,
            days: Vn,
            hours: Vn * 24,
            minutes: Vn * 24 * 60,
            seconds: Vn * 24 * 60 * 60,
            milliseconds: Vn * 24 * 60 * 60 * 1e3,
          },
        },
        _s,
      ),
      gn = [
        "years",
        "quarters",
        "months",
        "weeks",
        "days",
        "hours",
        "minutes",
        "seconds",
        "milliseconds",
      ],
      Id = gn.slice(0).reverse();
    function yn(i, u, a) {
      a === void 0 && (a = !1);
      var r = {
        values: a ? u.values : l({}, i.values, u.values || {}),
        loc: i.loc.clone(u.loc),
        conversionAccuracy: u.conversionAccuracy || i.conversionAccuracy,
      };
      return new ze(r);
    }
    function Cd(i) {
      return i < 0 ? Math.floor(i) : Math.ceil(i);
    }
    function ps(i, u, a, r, s) {
      var f = i[s][a],
        g = u[a] / f,
        v = Math.sign(g) === Math.sign(r[s]),
        b = !v && r[s] !== 0 && Math.abs(g) <= 1 ? Cd(g) : Math.trunc(g);
      (r[s] += b), (u[a] -= b * f);
    }
    function Ad(i, u) {
      Id.reduce(function (a, r) {
        return B(u[r]) ? a : (a && ps(i, u, a, u, r), r);
      }, null);
    }
    var ze = (function () {
        function i(a) {
          var r = a.conversionAccuracy === "longterm" || !1;
          (this.values = a.values),
            (this.loc = a.loc || Ae.create()),
            (this.conversionAccuracy = r ? "longterm" : "casual"),
            (this.invalid = a.invalid || null),
            (this.matrix = r ? Nd : Ed),
            (this.isLuxonDuration = !0);
        }
        (i.fromMillis = function (r, s) {
          return i.fromObject({ milliseconds: r }, s);
        }),
          (i.fromObject = function (r, s) {
            if ((s === void 0 && (s = {}), r == null || typeof r != "object"))
              throw new L(
                "Duration.fromObject: argument expected to be an object, got " +
                  (r === null ? "null" : typeof r),
              );
            return new i({
              values: Vt(r, i.normalizeUnit),
              loc: Ae.fromObject(s),
              conversionAccuracy: s.conversionAccuracy,
            });
          }),
          (i.fromDurationLike = function (r) {
            if (le(r)) return i.fromMillis(r);
            if (i.isDuration(r)) return r;
            if (typeof r == "object") return i.fromObject(r);
            throw new L(
              "Unknown duration argument " + r + " of type " + typeof r,
            );
          }),
          (i.fromISO = function (r, s) {
            var f = bd(r),
              g = f[0];
            return g
              ? i.fromObject(g, s)
              : i.invalid(
                  "unparsable",
                  'the input "' + r + `" can't be parsed as ISO 8601`,
                );
          }),
          (i.fromISOTime = function (r, s) {
            var f = kd(r),
              g = f[0];
            return g
              ? i.fromObject(g, s)
              : i.invalid(
                  "unparsable",
                  'the input "' + r + `" can't be parsed as ISO 8601`,
                );
          }),
          (i.invalid = function (r, s) {
            if ((s === void 0 && (s = null), !r))
              throw new L("need to specify a reason the Duration is invalid");
            var f = r instanceof Ye ? r : new Ye(r, s);
            if (Oe.throwOnInvalid) throw new te(f);
            return new i({ invalid: f });
          }),
          (i.normalizeUnit = function (r) {
            var s = {
              year: "years",
              years: "years",
              quarter: "quarters",
              quarters: "quarters",
              month: "months",
              months: "months",
              week: "weeks",
              weeks: "weeks",
              day: "days",
              days: "days",
              hour: "hours",
              hours: "hours",
              minute: "minutes",
              minutes: "minutes",
              second: "seconds",
              seconds: "seconds",
              millisecond: "milliseconds",
              milliseconds: "milliseconds",
            }[r && r.toLowerCase()];
            if (!s) throw new me(r);
            return s;
          }),
          (i.isDuration = function (r) {
            return (r && r.isLuxonDuration) || !1;
          });
        var u = i.prototype;
        return (
          (u.toFormat = function (r, s) {
            s === void 0 && (s = {});
            var f = l({}, s, { floor: s.round !== !1 && s.floor !== !1 });
            return this.isValid
              ? Ke.create(this.loc, f).formatDurationFromString(this, r)
              : xd;
          }),
          (u.toHuman = function (r) {
            var s = this;
            r === void 0 && (r = {});
            var f = gn
              .map(function (g) {
                var v = s.values[g];
                return B(v)
                  ? null
                  : s.loc
                      .numberFormatter(
                        l({ style: "unit", unitDisplay: "long" }, r, {
                          unit: g.slice(0, -1),
                        }),
                      )
                      .format(v);
              })
              .filter(function (g) {
                return g;
              });
            return this.loc
              .listFormatter(
                l({ type: "conjunction", style: r.listStyle || "narrow" }, r),
              )
              .format(f);
          }),
          (u.toObject = function () {
            return this.isValid ? l({}, this.values) : {};
          }),
          (u.toISO = function () {
            if (!this.isValid) return null;
            var r = "P";
            return (
              this.years !== 0 && (r += this.years + "Y"),
              (this.months !== 0 || this.quarters !== 0) &&
                (r += this.months + this.quarters * 3 + "M"),
              this.weeks !== 0 && (r += this.weeks + "W"),
              this.days !== 0 && (r += this.days + "D"),
              (this.hours !== 0 ||
                this.minutes !== 0 ||
                this.seconds !== 0 ||
                this.milliseconds !== 0) &&
                (r += "T"),
              this.hours !== 0 && (r += this.hours + "H"),
              this.minutes !== 0 && (r += this.minutes + "M"),
              (this.seconds !== 0 || this.milliseconds !== 0) &&
                (r += xt(this.seconds + this.milliseconds / 1e3, 3) + "S"),
              r === "P" && (r += "T0S"),
              r
            );
          }),
          (u.toISOTime = function (r) {
            if ((r === void 0 && (r = {}), !this.isValid)) return null;
            var s = this.toMillis();
            if (s < 0 || s >= 864e5) return null;
            r = l(
              {
                suppressMilliseconds: !1,
                suppressSeconds: !1,
                includePrefix: !1,
                format: "extended",
              },
              r,
            );
            var f = this.shiftTo("hours", "minutes", "seconds", "milliseconds"),
              g = r.format === "basic" ? "hhmm" : "hh:mm";
            (!r.suppressSeconds || f.seconds !== 0 || f.milliseconds !== 0) &&
              ((g += r.format === "basic" ? "ss" : ":ss"),
              (!r.suppressMilliseconds || f.milliseconds !== 0) &&
                (g += ".SSS"));
            var v = f.toFormat(g);
            return r.includePrefix && (v = "T" + v), v;
          }),
          (u.toJSON = function () {
            return this.toISO();
          }),
          (u.toString = function () {
            return this.toISO();
          }),
          (u.toMillis = function () {
            return this.as("milliseconds");
          }),
          (u.valueOf = function () {
            return this.toMillis();
          }),
          (u.plus = function (r) {
            if (!this.isValid) return this;
            for (
              var s = i.fromDurationLike(r), f = {}, g = H(gn), v;
              !(v = g()).done;

            ) {
              var b = v.value;
              (Mt(s.values, b) || Mt(this.values, b)) &&
                (f[b] = s.get(b) + this.get(b));
            }
            return yn(this, { values: f }, !0);
          }),
          (u.minus = function (r) {
            if (!this.isValid) return this;
            var s = i.fromDurationLike(r);
            return this.plus(s.negate());
          }),
          (u.mapUnits = function (r) {
            if (!this.isValid) return this;
            for (
              var s = {}, f = 0, g = Object.keys(this.values);
              f < g.length;
              f++
            ) {
              var v = g[f];
              s[v] = Fn(r(this.values[v], v));
            }
            return yn(this, { values: s }, !0);
          }),
          (u.get = function (r) {
            return this[i.normalizeUnit(r)];
          }),
          (u.set = function (r) {
            if (!this.isValid) return this;
            var s = l({}, this.values, Vt(r, i.normalizeUnit));
            return yn(this, { values: s });
          }),
          (u.reconfigure = function (r) {
            var s = r === void 0 ? {} : r,
              f = s.locale,
              g = s.numberingSystem,
              v = s.conversionAccuracy,
              b = this.loc.clone({ locale: f, numberingSystem: g }),
              S = { loc: b };
            return v && (S.conversionAccuracy = v), yn(this, S);
          }),
          (u.as = function (r) {
            return this.isValid ? this.shiftTo(r).get(r) : NaN;
          }),
          (u.normalize = function () {
            if (!this.isValid) return this;
            var r = this.toObject();
            return Ad(this.matrix, r), yn(this, { values: r }, !0);
          }),
          (u.shiftTo = function () {
            for (var r = arguments.length, s = new Array(r), f = 0; f < r; f++)
              s[f] = arguments[f];
            if (!this.isValid) return this;
            if (s.length === 0) return this;
            s = s.map(function (Re) {
              return i.normalizeUnit(Re);
            });
            for (
              var g = {}, v = {}, b = this.toObject(), S, A = H(gn), D;
              !(D = A()).done;

            ) {
              var E = D.value;
              if (s.indexOf(E) >= 0) {
                S = E;
                var W = 0;
                for (var X in v) (W += this.matrix[X][E] * v[X]), (v[X] = 0);
                le(b[E]) && (W += b[E]);
                var de = Math.trunc(W);
                (g[E] = de), (v[E] = (W * 1e3 - de * 1e3) / 1e3);
                for (var ce in b)
                  gn.indexOf(ce) > gn.indexOf(E) &&
                    ps(this.matrix, b, ce, g, E);
              } else le(b[E]) && (v[E] = b[E]);
            }
            for (var Q in v)
              v[Q] !== 0 && (g[S] += Q === S ? v[Q] : v[Q] / this.matrix[S][Q]);
            return yn(this, { values: g }, !0).normalize();
          }),
          (u.negate = function () {
            if (!this.isValid) return this;
            for (
              var r = {}, s = 0, f = Object.keys(this.values);
              s < f.length;
              s++
            ) {
              var g = f[s];
              r[g] = -this.values[g];
            }
            return yn(this, { values: r }, !0);
          }),
          (u.equals = function (r) {
            if (!this.isValid || !r.isValid || !this.loc.equals(r.loc))
              return !1;
            function s(b, S) {
              return b === void 0 || b === 0
                ? S === void 0 || S === 0
                : b === S;
            }
            for (var f = H(gn), g; !(g = f()).done; ) {
              var v = g.value;
              if (!s(this.values[v], r.values[v])) return !1;
            }
            return !0;
          }),
          o(i, [
            {
              key: "locale",
              get: function () {
                return this.isValid ? this.loc.locale : null;
              },
            },
            {
              key: "numberingSystem",
              get: function () {
                return this.isValid ? this.loc.numberingSystem : null;
              },
            },
            {
              key: "years",
              get: function () {
                return this.isValid ? this.values.years || 0 : NaN;
              },
            },
            {
              key: "quarters",
              get: function () {
                return this.isValid ? this.values.quarters || 0 : NaN;
              },
            },
            {
              key: "months",
              get: function () {
                return this.isValid ? this.values.months || 0 : NaN;
              },
            },
            {
              key: "weeks",
              get: function () {
                return this.isValid ? this.values.weeks || 0 : NaN;
              },
            },
            {
              key: "days",
              get: function () {
                return this.isValid ? this.values.days || 0 : NaN;
              },
            },
            {
              key: "hours",
              get: function () {
                return this.isValid ? this.values.hours || 0 : NaN;
              },
            },
            {
              key: "minutes",
              get: function () {
                return this.isValid ? this.values.minutes || 0 : NaN;
              },
            },
            {
              key: "seconds",
              get: function () {
                return this.isValid ? this.values.seconds || 0 : NaN;
              },
            },
            {
              key: "milliseconds",
              get: function () {
                return this.isValid ? this.values.milliseconds || 0 : NaN;
              },
            },
            {
              key: "isValid",
              get: function () {
                return this.invalid === null;
              },
            },
            {
              key: "invalidReason",
              get: function () {
                return this.invalid ? this.invalid.reason : null;
              },
            },
            {
              key: "invalidExplanation",
              get: function () {
                return this.invalid ? this.invalid.explanation : null;
              },
            },
          ]),
          i
        );
      })(),
      vr = "Invalid Interval";
    function Fd(i, u) {
      return !i || !i.isValid
        ? _r.invalid("missing or invalid start")
        : !u || !u.isValid
        ? _r.invalid("missing or invalid end")
        : u < i
        ? _r.invalid(
            "end before start",
            "The end of an interval must be after its start, but you had start=" +
              i.toISO() +
              " and end=" +
              u.toISO(),
          )
        : null;
    }
    var _r = (function () {
        function i(a) {
          (this.s = a.start),
            (this.e = a.end),
            (this.invalid = a.invalid || null),
            (this.isLuxonInterval = !0);
        }
        (i.invalid = function (r, s) {
          if ((s === void 0 && (s = null), !r))
            throw new L("need to specify a reason the Interval is invalid");
          var f = r instanceof Ye ? r : new Ye(r, s);
          if (Oe.throwOnInvalid) throw new R(f);
          return new i({ invalid: f });
        }),
          (i.fromDateTimes = function (r, s) {
            var f = kr(r),
              g = kr(s),
              v = Fd(f, g);
            return v == null ? new i({ start: f, end: g }) : v;
          }),
          (i.after = function (r, s) {
            var f = ze.fromDurationLike(s),
              g = kr(r);
            return i.fromDateTimes(g, g.plus(f));
          }),
          (i.before = function (r, s) {
            var f = ze.fromDurationLike(s),
              g = kr(r);
            return i.fromDateTimes(g.minus(f), g);
          }),
          (i.fromISO = function (r, s) {
            var f = (r || "").split("/", 2),
              g = f[0],
              v = f[1];
            if (g && v) {
              var b, S;
              try {
                (b = De.fromISO(g, s)), (S = b.isValid);
              } catch (X) {
                S = !1;
              }
              var A, D;
              try {
                (A = De.fromISO(v, s)), (D = A.isValid);
              } catch (X) {
                D = !1;
              }
              if (S && D) return i.fromDateTimes(b, A);
              if (S) {
                var E = ze.fromISO(v, s);
                if (E.isValid) return i.after(b, E);
              } else if (D) {
                var W = ze.fromISO(g, s);
                if (W.isValid) return i.before(A, W);
              }
            }
            return i.invalid(
              "unparsable",
              'the input "' + r + `" can't be parsed as ISO 8601`,
            );
          }),
          (i.isInterval = function (r) {
            return (r && r.isLuxonInterval) || !1;
          });
        var u = i.prototype;
        return (
          (u.length = function (r) {
            return (
              r === void 0 && (r = "milliseconds"),
              this.isValid ? this.toDuration.apply(this, [r]).get(r) : NaN
            );
          }),
          (u.count = function (r) {
            if ((r === void 0 && (r = "milliseconds"), !this.isValid))
              return NaN;
            var s = this.start.startOf(r),
              f = this.end.startOf(r);
            return Math.floor(f.diff(s, r).get(r)) + 1;
          }),
          (u.hasSame = function (r) {
            return this.isValid
              ? this.isEmpty() || this.e.minus(1).hasSame(this.s, r)
              : !1;
          }),
          (u.isEmpty = function () {
            return this.s.valueOf() === this.e.valueOf();
          }),
          (u.isAfter = function (r) {
            return this.isValid ? this.s > r : !1;
          }),
          (u.isBefore = function (r) {
            return this.isValid ? this.e <= r : !1;
          }),
          (u.contains = function (r) {
            return this.isValid ? this.s <= r && this.e > r : !1;
          }),
          (u.set = function (r) {
            var s = r === void 0 ? {} : r,
              f = s.start,
              g = s.end;
            return this.isValid
              ? i.fromDateTimes(f || this.s, g || this.e)
              : this;
          }),
          (u.splitAt = function () {
            var r = this;
            if (!this.isValid) return [];
            for (var s = arguments.length, f = new Array(s), g = 0; g < s; g++)
              f[g] = arguments[g];
            for (
              var v = f
                  .map(kr)
                  .filter(function (W) {
                    return r.contains(W);
                  })
                  .sort(),
                b = [],
                S = this.s,
                A = 0;
              S < this.e;

            ) {
              var D = v[A] || this.e,
                E = +D > +this.e ? this.e : D;
              b.push(i.fromDateTimes(S, E)), (S = E), (A += 1);
            }
            return b;
          }),
          (u.splitBy = function (r) {
            var s = ze.fromDurationLike(r);
            if (!this.isValid || !s.isValid || s.as("milliseconds") === 0)
              return [];
            for (var f = this.s, g = 1, v, b = []; f < this.e; ) {
              var S = this.start.plus(
                s.mapUnits(function (A) {
                  return A * g;
                }),
              );
              (v = +S > +this.e ? this.e : S),
                b.push(i.fromDateTimes(f, v)),
                (f = v),
                (g += 1);
            }
            return b;
          }),
          (u.divideEqually = function (r) {
            return this.isValid
              ? this.splitBy(this.length() / r).slice(0, r)
              : [];
          }),
          (u.overlaps = function (r) {
            return this.e > r.s && this.s < r.e;
          }),
          (u.abutsStart = function (r) {
            return this.isValid ? +this.e == +r.s : !1;
          }),
          (u.abutsEnd = function (r) {
            return this.isValid ? +r.e == +this.s : !1;
          }),
          (u.engulfs = function (r) {
            return this.isValid ? this.s <= r.s && this.e >= r.e : !1;
          }),
          (u.equals = function (r) {
            return !this.isValid || !r.isValid
              ? !1
              : this.s.equals(r.s) && this.e.equals(r.e);
          }),
          (u.intersection = function (r) {
            if (!this.isValid) return this;
            var s = this.s > r.s ? this.s : r.s,
              f = this.e < r.e ? this.e : r.e;
            return s >= f ? null : i.fromDateTimes(s, f);
          }),
          (u.union = function (r) {
            if (!this.isValid) return this;
            var s = this.s < r.s ? this.s : r.s,
              f = this.e > r.e ? this.e : r.e;
            return i.fromDateTimes(s, f);
          }),
          (i.merge = function (r) {
            var s = r
                .sort(function (v, b) {
                  return v.s - b.s;
                })
                .reduce(
                  function (v, b) {
                    var S = v[0],
                      A = v[1];
                    return A
                      ? A.overlaps(b) || A.abutsStart(b)
                        ? [S, A.union(b)]
                        : [S.concat([A]), b]
                      : [S, b];
                  },
                  [[], null],
                ),
              f = s[0],
              g = s[1];
            return g && f.push(g), f;
          }),
          (i.xor = function (r) {
            for (
              var s,
                f = null,
                g = 0,
                v = [],
                b = r.map(function (X) {
                  return [
                    { time: X.s, type: "s" },
                    { time: X.e, type: "e" },
                  ];
                }),
                S = (s = Array.prototype).concat.apply(s, b),
                A = S.sort(function (X, de) {
                  return X.time - de.time;
                }),
                D = H(A),
                E;
              !(E = D()).done;

            ) {
              var W = E.value;
              (g += W.type === "s" ? 1 : -1),
                g === 1
                  ? (f = W.time)
                  : (f && +f != +W.time && v.push(i.fromDateTimes(f, W.time)),
                    (f = null));
            }
            return i.merge(v);
          }),
          (u.difference = function () {
            for (
              var r = this, s = arguments.length, f = new Array(s), g = 0;
              g < s;
              g++
            )
              f[g] = arguments[g];
            return i
              .xor([this].concat(f))
              .map(function (v) {
                return r.intersection(v);
              })
              .filter(function (v) {
                return v && !v.isEmpty();
              });
          }),
          (u.toString = function () {
            return this.isValid
              ? "[" + this.s.toISO() + " \u2013 " + this.e.toISO() + ")"
              : vr;
          }),
          (u.toISO = function (r) {
            return this.isValid ? this.s.toISO(r) + "/" + this.e.toISO(r) : vr;
          }),
          (u.toISODate = function () {
            return this.isValid
              ? this.s.toISODate() + "/" + this.e.toISODate()
              : vr;
          }),
          (u.toISOTime = function (r) {
            return this.isValid
              ? this.s.toISOTime(r) + "/" + this.e.toISOTime(r)
              : vr;
          }),
          (u.toFormat = function (r, s) {
            var f = s === void 0 ? {} : s,
              g = f.separator,
              v = g === void 0 ? " \u2013 " : g;
            return this.isValid
              ? "" + this.s.toFormat(r) + v + this.e.toFormat(r)
              : vr;
          }),
          (u.toDuration = function (r, s) {
            return this.isValid
              ? this.e.diff(this.s, r, s)
              : ze.invalid(this.invalidReason);
          }),
          (u.mapEndpoints = function (r) {
            return i.fromDateTimes(r(this.s), r(this.e));
          }),
          o(i, [
            {
              key: "start",
              get: function () {
                return this.isValid ? this.s : null;
              },
            },
            {
              key: "end",
              get: function () {
                return this.isValid ? this.e : null;
              },
            },
            {
              key: "isValid",
              get: function () {
                return this.invalidReason === null;
              },
            },
            {
              key: "invalidReason",
              get: function () {
                return this.invalid ? this.invalid.reason : null;
              },
            },
            {
              key: "invalidExplanation",
              get: function () {
                return this.invalid ? this.invalid.explanation : null;
              },
            },
          ]),
          i
        );
      })(),
      pr = (function () {
        function i() {}
        return (
          (i.hasDST = function (a) {
            a === void 0 && (a = Oe.defaultZone);
            var r = De.now().setZone(a).set({ month: 12 });
            return !a.isUniversal && r.offset !== r.set({ month: 6 }).offset;
          }),
          (i.isValidIANAZone = function (a) {
            return it.isValidSpecifier(a) && it.isValidZone(a);
          }),
          (i.normalizeZone = function (a) {
            return pt(a, Oe.defaultZone);
          }),
          (i.months = function (a, r) {
            a === void 0 && (a = "long");
            var s = r === void 0 ? {} : r,
              f = s.locale,
              g = f === void 0 ? null : f,
              v = s.numberingSystem,
              b = v === void 0 ? null : v,
              S = s.locObj,
              A = S === void 0 ? null : S,
              D = s.outputCalendar,
              E = D === void 0 ? "gregory" : D;
            return (A || Ae.create(g, b, E)).months(a);
          }),
          (i.monthsFormat = function (a, r) {
            a === void 0 && (a = "long");
            var s = r === void 0 ? {} : r,
              f = s.locale,
              g = f === void 0 ? null : f,
              v = s.numberingSystem,
              b = v === void 0 ? null : v,
              S = s.locObj,
              A = S === void 0 ? null : S,
              D = s.outputCalendar,
              E = D === void 0 ? "gregory" : D;
            return (A || Ae.create(g, b, E)).months(a, !0);
          }),
          (i.weekdays = function (a, r) {
            a === void 0 && (a = "long");
            var s = r === void 0 ? {} : r,
              f = s.locale,
              g = f === void 0 ? null : f,
              v = s.numberingSystem,
              b = v === void 0 ? null : v,
              S = s.locObj,
              A = S === void 0 ? null : S;
            return (A || Ae.create(g, b, null)).weekdays(a);
          }),
          (i.weekdaysFormat = function (a, r) {
            a === void 0 && (a = "long");
            var s = r === void 0 ? {} : r,
              f = s.locale,
              g = f === void 0 ? null : f,
              v = s.numberingSystem,
              b = v === void 0 ? null : v,
              S = s.locObj,
              A = S === void 0 ? null : S;
            return (A || Ae.create(g, b, null)).weekdays(a, !0);
          }),
          (i.meridiems = function (a) {
            var r = a === void 0 ? {} : a,
              s = r.locale,
              f = s === void 0 ? null : s;
            return Ae.create(f).meridiems();
          }),
          (i.eras = function (a, r) {
            a === void 0 && (a = "short");
            var s = r === void 0 ? {} : r,
              f = s.locale,
              g = f === void 0 ? null : f;
            return Ae.create(g, null, "gregory").eras(a);
          }),
          (i.features = function () {
            return { relative: Pt() };
          }),
          i
        );
      })();
    function bs(i, u) {
      var a = function (f) {
          return f.toUTC(0, { keepLocalTime: !0 }).startOf("day").valueOf();
        },
        r = a(u) - a(i);
      return Math.floor(ze.fromMillis(r).as("days"));
    }
    function Ld(i, u, a) {
      for (
        var r = [
            [
              "years",
              function (de, ce) {
                return ce.year - de.year;
              },
            ],
            [
              "quarters",
              function (de, ce) {
                return ce.quarter - de.quarter;
              },
            ],
            [
              "months",
              function (de, ce) {
                return ce.month - de.month + (ce.year - de.year) * 12;
              },
            ],
            [
              "weeks",
              function (de, ce) {
                var Q = bs(de, ce);
                return (Q - (Q % 7)) / 7;
              },
            ],
            ["days", bs],
          ],
          s = {},
          f,
          g,
          v = 0,
          b = r;
        v < b.length;
        v++
      ) {
        var S = b[v],
          A = S[0],
          D = S[1];
        if (a.indexOf(A) >= 0) {
          var E;
          f = A;
          var W = D(i, u);
          if (((g = i.plus(((E = {}), (E[A] = W), E))), g > u)) {
            var X;
            (i = i.plus(((X = {}), (X[A] = W - 1), X))), (W -= 1);
          } else i = g;
          s[A] = W;
        }
      }
      return [i, s, g, f];
    }
    function Ud(i, u, a, r) {
      var s = Ld(i, u, a),
        f = s[0],
        g = s[1],
        v = s[2],
        b = s[3],
        S = u - f,
        A = a.filter(function (X) {
          return (
            ["hours", "minutes", "seconds", "milliseconds"].indexOf(X) >= 0
          );
        });
      if (A.length === 0) {
        if (v < u) {
          var D;
          v = f.plus(((D = {}), (D[b] = 1), D));
        }
        v !== f && (g[b] = (g[b] || 0) + S / (v - f));
      }
      var E = ze.fromObject(g, r);
      if (A.length > 0) {
        var W;
        return (W = ze.fromMillis(S, r)).shiftTo.apply(W, A).plus(E);
      } else return E;
    }
    var ta = {
        arab: "[\u0660-\u0669]",
        arabext: "[\u06F0-\u06F9]",
        bali: "[\u1B50-\u1B59]",
        beng: "[\u09E6-\u09EF]",
        deva: "[\u0966-\u096F]",
        fullwide: "[\uFF10-\uFF19]",
        gujr: "[\u0AE6-\u0AEF]",
        hanidec:
          "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
        khmr: "[\u17E0-\u17E9]",
        knda: "[\u0CE6-\u0CEF]",
        laoo: "[\u0ED0-\u0ED9]",
        limb: "[\u1946-\u194F]",
        mlym: "[\u0D66-\u0D6F]",
        mong: "[\u1810-\u1819]",
        mymr: "[\u1040-\u1049]",
        orya: "[\u0B66-\u0B6F]",
        tamldec: "[\u0BE6-\u0BEF]",
        telu: "[\u0C66-\u0C6F]",
        thai: "[\u0E50-\u0E59]",
        tibt: "[\u0F20-\u0F29]",
        latn: "\\d",
      },
      ws = {
        arab: [1632, 1641],
        arabext: [1776, 1785],
        bali: [6992, 7001],
        beng: [2534, 2543],
        deva: [2406, 2415],
        fullwide: [65296, 65303],
        gujr: [2790, 2799],
        khmr: [6112, 6121],
        knda: [3302, 3311],
        laoo: [3792, 3801],
        limb: [6470, 6479],
        mlym: [3430, 3439],
        mong: [6160, 6169],
        mymr: [4160, 4169],
        orya: [2918, 2927],
        tamldec: [3046, 3055],
        telu: [3174, 3183],
        thai: [3664, 3673],
        tibt: [3872, 3881],
      },
      zd = ta.hanidec.replace(/[\[|\]]/g, "").split("");
    function Rd(i) {
      var u = parseInt(i, 10);
      if (isNaN(u)) {
        u = "";
        for (var a = 0; a < i.length; a++) {
          var r = i.charCodeAt(a);
          if (i[a].search(ta.hanidec) !== -1) u += zd.indexOf(i[a]);
          else
            for (var s in ws) {
              var f = ws[s],
                g = f[0],
                v = f[1];
              r >= g && r <= v && (u += r - g);
            }
        }
        return parseInt(u, 10);
      } else return u;
    }
    function ot(i, u) {
      var a = i.numberingSystem;
      return u === void 0 && (u = ""), new RegExp("" + ta[a || "latn"] + u);
    }
    var Pd = "missing Intl.DateTimeFormat.formatToParts support";
    function ge(i, u) {
      return (
        u === void 0 &&
          (u = function (r) {
            return r;
          }),
        {
          regex: i,
          deser: function (r) {
            var s = r[0];
            return u(Rd(s));
          },
        }
      );
    }
    var Vd = String.fromCharCode(160),
      ks = "( |" + Vd + ")",
      Ss = new RegExp(ks, "g");
    function Wd(i) {
      return i.replace(/\./g, "\\.?").replace(Ss, ks);
    }
    function Ts(i) {
      return i.replace(/\./g, "").replace(Ss, " ").toLowerCase();
    }
    function st(i, u) {
      return i === null
        ? null
        : {
            regex: RegExp(i.map(Wd).join("|")),
            deser: function (r) {
              var s = r[0];
              return (
                i.findIndex(function (f) {
                  return Ts(s) === Ts(f);
                }) + u
              );
            },
          };
    }
    function Os(i, u) {
      return {
        regex: i,
        deser: function (r) {
          var s = r[1],
            f = r[2];
          return We(s, f);
        },
        groups: u,
      };
    }
    function na(i) {
      return {
        regex: i,
        deser: function (a) {
          var r = a[0];
          return r;
        },
      };
    }
    function Hd(i) {
      return i.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    }
    function Zd(i, u) {
      var a = ot(u),
        r = ot(u, "{2}"),
        s = ot(u, "{3}"),
        f = ot(u, "{4}"),
        g = ot(u, "{6}"),
        v = ot(u, "{1,2}"),
        b = ot(u, "{1,3}"),
        S = ot(u, "{1,6}"),
        A = ot(u, "{1,9}"),
        D = ot(u, "{2,4}"),
        E = ot(u, "{4,6}"),
        W = function (Q) {
          return {
            regex: RegExp(Hd(Q.val)),
            deser: function (ci) {
              var la = ci[0];
              return la;
            },
            literal: !0,
          };
        },
        X = function (Q) {
          if (i.literal) return W(Q);
          switch (Q.val) {
            case "G":
              return st(u.eras("short", !1), 0);
            case "GG":
              return st(u.eras("long", !1), 0);
            case "y":
              return ge(S);
            case "yy":
              return ge(D, An);
            case "yyyy":
              return ge(f);
            case "yyyyy":
              return ge(E);
            case "yyyyyy":
              return ge(g);
            case "M":
              return ge(v);
            case "MM":
              return ge(r);
            case "MMM":
              return st(u.months("short", !0, !1), 1);
            case "MMMM":
              return st(u.months("long", !0, !1), 1);
            case "L":
              return ge(v);
            case "LL":
              return ge(r);
            case "LLL":
              return st(u.months("short", !1, !1), 1);
            case "LLLL":
              return st(u.months("long", !1, !1), 1);
            case "d":
              return ge(v);
            case "dd":
              return ge(r);
            case "o":
              return ge(b);
            case "ooo":
              return ge(s);
            case "HH":
              return ge(r);
            case "H":
              return ge(v);
            case "hh":
              return ge(r);
            case "h":
              return ge(v);
            case "mm":
              return ge(r);
            case "m":
              return ge(v);
            case "q":
              return ge(v);
            case "qq":
              return ge(r);
            case "s":
              return ge(v);
            case "ss":
              return ge(r);
            case "S":
              return ge(b);
            case "SSS":
              return ge(s);
            case "u":
              return na(A);
            case "uu":
              return na(v);
            case "uuu":
              return ge(a);
            case "a":
              return st(u.meridiems(), 0);
            case "kkkk":
              return ge(f);
            case "kk":
              return ge(D, An);
            case "W":
              return ge(v);
            case "WW":
              return ge(r);
            case "E":
            case "c":
              return ge(a);
            case "EEE":
              return st(u.weekdays("short", !1, !1), 1);
            case "EEEE":
              return st(u.weekdays("long", !1, !1), 1);
            case "ccc":
              return st(u.weekdays("short", !0, !1), 1);
            case "cccc":
              return st(u.weekdays("long", !0, !1), 1);
            case "Z":
            case "ZZ":
              return Os(
                new RegExp("([+-]" + v.source + ")(?::(" + r.source + "))?"),
                2,
              );
            case "ZZZ":
              return Os(
                new RegExp("([+-]" + v.source + ")(" + r.source + ")?"),
                2,
              );
            case "z":
              return na(/[a-z_+-/]{1,256}?/i);
            default:
              return W(Q);
          }
        },
        de = X(i) || { invalidReason: Pd };
      return (de.token = i), de;
    }
    var jd = {
      year: { "2-digit": "yy", numeric: "yyyyy" },
      month: { numeric: "M", "2-digit": "MM", short: "MMM", long: "MMMM" },
      day: { numeric: "d", "2-digit": "dd" },
      weekday: { short: "EEE", long: "EEEE" },
      dayperiod: "a",
      dayPeriod: "a",
      hour: { numeric: "h", "2-digit": "hh" },
      minute: { numeric: "m", "2-digit": "mm" },
      second: { numeric: "s", "2-digit": "ss" },
    };
    function Yd(i, u, a) {
      var r = i.type,
        s = i.value;
      if (r === "literal") return { literal: !0, val: s };
      var f = a[r],
        g = jd[r];
      if ((typeof g == "object" && (g = g[f]), g))
        return { literal: !1, val: g };
    }
    function qd(i) {
      var u = i
        .map(function (a) {
          return a.regex;
        })
        .reduce(function (a, r) {
          return a + "(" + r.source + ")";
        }, "");
      return ["^" + u + "$", i];
    }
    function Jd(i, u, a) {
      var r = i.match(u);
      if (r) {
        var s = {},
          f = 1;
        for (var g in a)
          if (Mt(a, g)) {
            var v = a[g],
              b = v.groups ? v.groups + 1 : 1;
            !v.literal &&
              v.token &&
              (s[v.token.val[0]] = v.deser(r.slice(f, f + b))),
              (f += b);
          }
        return [r, s];
      } else return [r, {}];
    }
    function Bd(i) {
      var u = function (g) {
          switch (g) {
            case "S":
              return "millisecond";
            case "s":
              return "second";
            case "m":
              return "minute";
            case "h":
            case "H":
              return "hour";
            case "d":
              return "day";
            case "o":
              return "ordinal";
            case "L":
            case "M":
              return "month";
            case "y":
              return "year";
            case "E":
            case "c":
              return "weekday";
            case "W":
              return "weekNumber";
            case "k":
              return "weekYear";
            case "q":
              return "quarter";
            default:
              return null;
          }
        },
        a = null,
        r;
      B(i.z) || (a = it.create(i.z)),
        B(i.Z) || (a || (a = new Pe(i.Z)), (r = i.Z)),
        B(i.q) || (i.M = (i.q - 1) * 3 + 1),
        B(i.h) ||
          (i.h < 12 && i.a === 1
            ? (i.h += 12)
            : i.h === 12 && i.a === 0 && (i.h = 0)),
        i.G === 0 && i.y && (i.y = -i.y),
        B(i.u) || (i.S = C(i.u));
      var s = Object.keys(i).reduce(function (f, g) {
        var v = u(g);
        return v && (f[v] = i[g]), f;
      }, {});
      return [s, a, r];
    }
    var ra = null;
    function Gd() {
      return ra || (ra = De.fromMillis(1555555555555)), ra;
    }
    function Qd(i, u) {
      if (i.literal) return i;
      var a = Ke.macroTokenToFormatOpts(i.val);
      if (!a) return i;
      var r = Ke.create(u, a),
        s = r.formatDateTimeParts(Gd()),
        f = s.map(function (g) {
          return Yd(g, u, a);
        });
      return f.includes(void 0) ? i : f;
    }
    function Xd(i, u) {
      var a;
      return (a = Array.prototype).concat.apply(
        a,
        i.map(function (r) {
          return Qd(r, u);
        }),
      );
    }
    function Ms(i, u, a) {
      var r = Xd(Ke.parseFormat(a), i),
        s = r.map(function (Q) {
          return Zd(Q, i);
        }),
        f = s.find(function (Q) {
          return Q.invalidReason;
        });
      if (f) return { input: u, tokens: r, invalidReason: f.invalidReason };
      var g = qd(s),
        v = g[0],
        b = g[1],
        S = RegExp(v, "i"),
        A = Jd(u, S, b),
        D = A[0],
        E = A[1],
        W = E ? Bd(E) : [null, null, void 0],
        X = W[0],
        de = W[1],
        ce = W[2];
      if (Mt(E, "a") && Mt(E, "H"))
        throw new ne("Can't include meridiem when specifying 24-hour format");
      return {
        input: u,
        tokens: r,
        regex: S,
        rawMatches: D,
        matches: E,
        result: X,
        zone: de,
        specificOffset: ce,
      };
    }
    function Kd(i, u, a) {
      var r = Ms(i, u, a),
        s = r.result,
        f = r.zone,
        g = r.specificOffset,
        v = r.invalidReason;
      return [s, f, g, v];
    }
    var Ds = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
      xs = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
    function tt(i, u) {
      return new Ye(
        "unit out of range",
        "you specified " +
          u +
          " (of type " +
          typeof u +
          ") as a " +
          i +
          ", which is invalid",
      );
    }
    function Es(i, u, a) {
      var r = new Date(Date.UTC(i, u - 1, a)).getUTCDay();
      return r === 0 ? 7 : r;
    }
    function Ns(i, u, a) {
      return a + (Qe(i) ? xs : Ds)[u - 1];
    }
    function Is(i, u) {
      var a = Qe(i) ? xs : Ds,
        r = a.findIndex(function (f) {
          return f < u;
        }),
        s = u - a[r];
      return { month: r + 1, day: s };
    }
    function ia(i) {
      var u = i.year,
        a = i.month,
        r = i.day,
        s = Ns(u, a, r),
        f = Es(u, a, r),
        g = Math.floor((s - f + 10) / 7),
        v;
      return (
        g < 1
          ? ((v = u - 1), (g = ht(v)))
          : g > ht(u)
          ? ((v = u + 1), (g = 1))
          : (v = u),
        l({ weekYear: v, weekNumber: g, weekday: f }, yt(i))
      );
    }
    function Cs(i) {
      var u = i.weekYear,
        a = i.weekNumber,
        r = i.weekday,
        s = Es(u, 1, 4),
        f = nt(u),
        g = a * 7 + r - s - 3,
        v;
      g < 1
        ? ((v = u - 1), (g += nt(v)))
        : g > f
        ? ((v = u + 1), (g -= nt(u)))
        : (v = u);
      var b = Is(v, g),
        S = b.month,
        A = b.day;
      return l({ year: v, month: S, day: A }, yt(i));
    }
    function aa(i) {
      var u = i.year,
        a = i.month,
        r = i.day,
        s = Ns(u, a, r);
      return l({ year: u, ordinal: s }, yt(i));
    }
    function As(i) {
      var u = i.year,
        a = i.ordinal,
        r = Is(u, a),
        s = r.month,
        f = r.day;
      return l({ year: u, month: s, day: f }, yt(i));
    }
    function $d(i) {
      var u = Me(i.weekYear),
        a = Ge(i.weekNumber, 1, ht(i.weekYear)),
        r = Ge(i.weekday, 1, 7);
      return u
        ? a
          ? r
            ? !1
            : tt("weekday", i.weekday)
          : tt("week", i.week)
        : tt("weekYear", i.weekYear);
    }
    function eh(i) {
      var u = Me(i.year),
        a = Ge(i.ordinal, 1, nt(i.year));
      return u ? (a ? !1 : tt("ordinal", i.ordinal)) : tt("year", i.year);
    }
    function Fs(i) {
      var u = Me(i.year),
        a = Ge(i.month, 1, 12),
        r = Ge(i.day, 1, Xe(i.year, i.month));
      return u
        ? a
          ? r
            ? !1
            : tt("day", i.day)
          : tt("month", i.month)
        : tt("year", i.year);
    }
    function Ls(i) {
      var u = i.hour,
        a = i.minute,
        r = i.second,
        s = i.millisecond,
        f = Ge(u, 0, 23) || (u === 24 && a === 0 && r === 0 && s === 0),
        g = Ge(a, 0, 59),
        v = Ge(r, 0, 59),
        b = Ge(s, 0, 999);
      return f
        ? g
          ? v
            ? b
              ? !1
              : tt("millisecond", s)
            : tt("second", r)
          : tt("minute", a)
        : tt("hour", u);
    }
    var oa = "Invalid DateTime",
      Us = 864e13;
    function ui(i) {
      return new Ye(
        "unsupported zone",
        'the zone "' + i.name + '" is not supported',
      );
    }
    function sa(i) {
      return i.weekData === null && (i.weekData = ia(i.c)), i.weekData;
    }
    function br(i, u) {
      var a = {
        ts: i.ts,
        zone: i.zone,
        c: i.c,
        o: i.o,
        loc: i.loc,
        invalid: i.invalid,
      };
      return new De(l({}, a, u, { old: a }));
    }
    function zs(i, u, a) {
      var r = i - u * 60 * 1e3,
        s = a.offset(r);
      if (u === s) return [r, u];
      r -= (s - u) * 60 * 1e3;
      var f = a.offset(r);
      return s === f ? [r, s] : [i - Math.min(s, f) * 60 * 1e3, Math.max(s, f)];
    }
    function Rs(i, u) {
      i += u * 60 * 1e3;
      var a = new Date(i);
      return {
        year: a.getUTCFullYear(),
        month: a.getUTCMonth() + 1,
        day: a.getUTCDate(),
        hour: a.getUTCHours(),
        minute: a.getUTCMinutes(),
        second: a.getUTCSeconds(),
        millisecond: a.getUTCMilliseconds(),
      };
    }
    function li(i, u, a) {
      return zs(Et(i), u, a);
    }
    function Ps(i, u) {
      var a = i.o,
        r = i.c.year + Math.trunc(u.years),
        s = i.c.month + Math.trunc(u.months) + Math.trunc(u.quarters) * 3,
        f = l({}, i.c, {
          year: r,
          month: s,
          day:
            Math.min(i.c.day, Xe(r, s)) +
            Math.trunc(u.days) +
            Math.trunc(u.weeks) * 7,
        }),
        g = ze
          .fromObject({
            years: u.years - Math.trunc(u.years),
            quarters: u.quarters - Math.trunc(u.quarters),
            months: u.months - Math.trunc(u.months),
            weeks: u.weeks - Math.trunc(u.weeks),
            days: u.days - Math.trunc(u.days),
            hours: u.hours,
            minutes: u.minutes,
            seconds: u.seconds,
            milliseconds: u.milliseconds,
          })
          .as("milliseconds"),
        v = Et(f),
        b = zs(v, a, i.zone),
        S = b[0],
        A = b[1];
      return g !== 0 && ((S += g), (A = i.zone.offset(S))), { ts: S, o: A };
    }
    function wr(i, u, a, r, s, f) {
      var g = a.setZone,
        v = a.zone;
      if (i && Object.keys(i).length !== 0) {
        var b = u || v,
          S = De.fromObject(i, l({}, a, { zone: b, specificOffset: f }));
        return g ? S : S.setZone(v);
      } else return De.invalid(new Ye("unparsable", 'the input "' + s + `" can't be parsed as ` + r));
    }
    function fi(i, u, a) {
      return (
        a === void 0 && (a = !0),
        i.isValid
          ? Ke.create(Ae.create("en-US"), {
              allowZ: a,
              forceSimple: !0,
            }).formatDateTimeFromString(i, u)
          : null
      );
    }
    function ua(i, u) {
      var a = i.c.year > 9999 || i.c.year < 0,
        r = "";
      return (
        a && i.c.year >= 0 && (r += "+"),
        (r += Te(i.c.year, a ? 6 : 4)),
        u
          ? ((r += "-"), (r += Te(i.c.month)), (r += "-"), (r += Te(i.c.day)))
          : ((r += Te(i.c.month)), (r += Te(i.c.day))),
        r
      );
    }
    function Vs(i, u, a, r, s) {
      var f = Te(i.c.hour);
      return (
        u
          ? ((f += ":"),
            (f += Te(i.c.minute)),
            (i.c.second !== 0 || !a) && (f += ":"))
          : (f += Te(i.c.minute)),
        (i.c.second !== 0 || !a) &&
          ((f += Te(i.c.second)),
          (i.c.millisecond !== 0 || !r) &&
            ((f += "."), (f += Te(i.c.millisecond, 3)))),
        s &&
          (i.isOffsetFixed && i.offset === 0
            ? (f += "Z")
            : i.o < 0
            ? ((f += "-"),
              (f += Te(Math.trunc(-i.o / 60))),
              (f += ":"),
              (f += Te(Math.trunc(-i.o % 60))))
            : ((f += "+"),
              (f += Te(Math.trunc(i.o / 60))),
              (f += ":"),
              (f += Te(Math.trunc(i.o % 60))))),
        f
      );
    }
    var Ws = {
        month: 1,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0,
      },
      th = {
        weekNumber: 1,
        weekday: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0,
      },
      nh = { ordinal: 1, hour: 0, minute: 0, second: 0, millisecond: 0 },
      Hs = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
      rh = [
        "weekYear",
        "weekNumber",
        "weekday",
        "hour",
        "minute",
        "second",
        "millisecond",
      ],
      ih = ["year", "ordinal", "hour", "minute", "second", "millisecond"];
    function Zs(i) {
      var u = {
        year: "year",
        years: "year",
        month: "month",
        months: "month",
        day: "day",
        days: "day",
        hour: "hour",
        hours: "hour",
        minute: "minute",
        minutes: "minute",
        quarter: "quarter",
        quarters: "quarter",
        second: "second",
        seconds: "second",
        millisecond: "millisecond",
        milliseconds: "millisecond",
        weekday: "weekday",
        weekdays: "weekday",
        weeknumber: "weekNumber",
        weeksnumber: "weekNumber",
        weeknumbers: "weekNumber",
        weekyear: "weekYear",
        weekyears: "weekYear",
        ordinal: "ordinal",
      }[i.toLowerCase()];
      if (!u) throw new me(i);
      return u;
    }
    function js(i, u) {
      var a = pt(u.zone, Oe.defaultZone),
        r = Ae.fromObject(u),
        s = Oe.now(),
        f,
        g;
      if (B(i.year)) f = s;
      else {
        for (var v = H(Hs), b; !(b = v()).done; ) {
          var S = b.value;
          B(i[S]) && (i[S] = Ws[S]);
        }
        var A = Fs(i) || Ls(i);
        if (A) return De.invalid(A);
        var D = a.offset(s),
          E = li(i, D, a);
        (f = E[0]), (g = E[1]);
      }
      return new De({ ts: f, zone: a, loc: r, o: g });
    }
    function Ys(i, u, a) {
      var r = B(a.round) ? !0 : a.round,
        s = function (D, E) {
          D = xt(D, r || a.calendary ? 0 : 2, !0);
          var W = u.loc.clone(a).relFormatter(a);
          return W.format(D, E);
        },
        f = function (D) {
          return a.calendary
            ? u.hasSame(i, D)
              ? 0
              : u.startOf(D).diff(i.startOf(D), D).get(D)
            : u.diff(i, D).get(D);
        };
      if (a.unit) return s(f(a.unit), a.unit);
      for (var g = H(a.units), v; !(v = g()).done; ) {
        var b = v.value,
          S = f(b);
        if (Math.abs(S) >= 1) return s(S, b);
      }
      return s(i > u ? -0 : 0, a.units[a.units.length - 1]);
    }
    function qs(i) {
      var u = {},
        a;
      return (
        i.length > 0 && typeof i[i.length - 1] == "object"
          ? ((u = i[i.length - 1]), (a = Array.from(i).slice(0, i.length - 1)))
          : (a = Array.from(i)),
        [u, a]
      );
    }
    var De = (function () {
      function i(a) {
        var r = a.zone || Oe.defaultZone,
          s =
            a.invalid ||
            (Number.isNaN(a.ts) ? new Ye("invalid input") : null) ||
            (r.isValid ? null : ui(r));
        this.ts = B(a.ts) ? Oe.now() : a.ts;
        var f = null,
          g = null;
        if (!s) {
          var v = a.old && a.old.ts === this.ts && a.old.zone.equals(r);
          if (v) {
            var b = [a.old.c, a.old.o];
            (f = b[0]), (g = b[1]);
          } else {
            var S = r.offset(this.ts);
            (f = Rs(this.ts, S)),
              (s = Number.isNaN(f.year) ? new Ye("invalid input") : null),
              (f = s ? null : f),
              (g = s ? null : S);
          }
        }
        (this._zone = r),
          (this.loc = a.loc || Ae.create()),
          (this.invalid = s),
          (this.weekData = null),
          (this.c = f),
          (this.o = g),
          (this.isLuxonDateTime = !0);
      }
      (i.now = function () {
        return new i({});
      }),
        (i.local = function () {
          var r = qs(arguments),
            s = r[0],
            f = r[1],
            g = f[0],
            v = f[1],
            b = f[2],
            S = f[3],
            A = f[4],
            D = f[5],
            E = f[6];
          return js(
            {
              year: g,
              month: v,
              day: b,
              hour: S,
              minute: A,
              second: D,
              millisecond: E,
            },
            s,
          );
        }),
        (i.utc = function () {
          var r = qs(arguments),
            s = r[0],
            f = r[1],
            g = f[0],
            v = f[1],
            b = f[2],
            S = f[3],
            A = f[4],
            D = f[5],
            E = f[6];
          return (
            (s.zone = Pe.utcInstance),
            js(
              {
                year: g,
                month: v,
                day: b,
                hour: S,
                minute: A,
                second: D,
                millisecond: E,
              },
              s,
            )
          );
        }),
        (i.fromJSDate = function (r, s) {
          s === void 0 && (s = {});
          var f = Be(r) ? r.valueOf() : NaN;
          if (Number.isNaN(f)) return i.invalid("invalid input");
          var g = pt(s.zone, Oe.defaultZone);
          return g.isValid
            ? new i({ ts: f, zone: g, loc: Ae.fromObject(s) })
            : i.invalid(ui(g));
        }),
        (i.fromMillis = function (r, s) {
          if ((s === void 0 && (s = {}), le(r)))
            return r < -Us || r > Us
              ? i.invalid("Timestamp out of range")
              : new i({
                  ts: r,
                  zone: pt(s.zone, Oe.defaultZone),
                  loc: Ae.fromObject(s),
                });
          throw new L(
            "fromMillis requires a numerical input, but received a " +
              typeof r +
              " with value " +
              r,
          );
        }),
        (i.fromSeconds = function (r, s) {
          if ((s === void 0 && (s = {}), le(r)))
            return new i({
              ts: r * 1e3,
              zone: pt(s.zone, Oe.defaultZone),
              loc: Ae.fromObject(s),
            });
          throw new L("fromSeconds requires a numerical input");
        }),
        (i.fromObject = function (r, s) {
          s === void 0 && (s = {}), (r = r || {});
          var f = pt(s.zone, Oe.defaultZone);
          if (!f.isValid) return i.invalid(ui(f));
          var g = Oe.now(),
            v = B(s.specificOffset) ? f.offset(g) : s.specificOffset,
            b = Vt(r, Zs),
            S = !B(b.ordinal),
            A = !B(b.year),
            D = !B(b.month) || !B(b.day),
            E = A || D,
            W = b.weekYear || b.weekNumber,
            X = Ae.fromObject(s);
          if ((E || S) && W)
            throw new ne(
              "Can't mix weekYear/weekNumber units with year/month/day or ordinals",
            );
          if (D && S) throw new ne("Can't mix ordinal dates with month/day");
          var de = W || (b.weekday && !E),
            ce,
            Q,
            Re = Rs(g, v);
          de
            ? ((ce = rh), (Q = th), (Re = ia(Re)))
            : S
            ? ((ce = ih), (Q = nh), (Re = aa(Re)))
            : ((ce = Hs), (Q = Ws));
          for (var ci = !1, la = H(ce), Js; !(Js = la()).done; ) {
            var Sr = Js.value,
              oh = b[Sr];
            B(oh) ? (ci ? (b[Sr] = Q[Sr]) : (b[Sr] = Re[Sr])) : (ci = !0);
          }
          var sh = de ? $d(b) : S ? eh(b) : Fs(b),
            Bs = sh || Ls(b);
          if (Bs) return i.invalid(Bs);
          var uh = de ? Cs(b) : S ? As(b) : b,
            Gs = li(uh, v, f),
            lh = Gs[0],
            fh = Gs[1],
            fa = new i({ ts: lh, zone: f, o: fh, loc: X });
          return b.weekday && E && r.weekday !== fa.weekday
            ? i.invalid(
                "mismatched weekday",
                "you can't specify both a weekday of " +
                  b.weekday +
                  " and a date of " +
                  fa.toISO(),
              )
            : fa;
        }),
        (i.fromISO = function (r, s) {
          s === void 0 && (s = {});
          var f = vd(r),
            g = f[0],
            v = f[1];
          return wr(g, v, s, "ISO 8601", r);
        }),
        (i.fromRFC2822 = function (r, s) {
          s === void 0 && (s = {});
          var f = _d(r),
            g = f[0],
            v = f[1];
          return wr(g, v, s, "RFC 2822", r);
        }),
        (i.fromHTTP = function (r, s) {
          s === void 0 && (s = {});
          var f = pd(r),
            g = f[0],
            v = f[1];
          return wr(g, v, s, "HTTP", s);
        }),
        (i.fromFormat = function (r, s, f) {
          if ((f === void 0 && (f = {}), B(r) || B(s)))
            throw new L("fromFormat requires an input string and a format");
          var g = f,
            v = g.locale,
            b = v === void 0 ? null : v,
            S = g.numberingSystem,
            A = S === void 0 ? null : S,
            D = Ae.fromOpts({ locale: b, numberingSystem: A, defaultToEN: !0 }),
            E = Kd(D, r, s),
            W = E[0],
            X = E[1],
            de = E[2],
            ce = E[3];
          return ce ? i.invalid(ce) : wr(W, X, f, "format " + s, r, de);
        }),
        (i.fromString = function (r, s, f) {
          return f === void 0 && (f = {}), i.fromFormat(r, s, f);
        }),
        (i.fromSQL = function (r, s) {
          s === void 0 && (s = {});
          var f = Dd(r),
            g = f[0],
            v = f[1];
          return wr(g, v, s, "SQL", r);
        }),
        (i.invalid = function (r, s) {
          if ((s === void 0 && (s = null), !r))
            throw new L("need to specify a reason the DateTime is invalid");
          var f = r instanceof Ye ? r : new Ye(r, s);
          if (Oe.throwOnInvalid) throw new I(f);
          return new i({ invalid: f });
        }),
        (i.isDateTime = function (r) {
          return (r && r.isLuxonDateTime) || !1;
        });
      var u = i.prototype;
      return (
        (u.get = function (r) {
          return this[r];
        }),
        (u.resolvedLocaleOptions = function (r) {
          r === void 0 && (r = {});
          var s = Ke.create(this.loc.clone(r), r).resolvedOptions(this),
            f = s.locale,
            g = s.numberingSystem,
            v = s.calendar;
          return { locale: f, numberingSystem: g, outputCalendar: v };
        }),
        (u.toUTC = function (r, s) {
          return (
            r === void 0 && (r = 0),
            s === void 0 && (s = {}),
            this.setZone(Pe.instance(r), s)
          );
        }),
        (u.toLocal = function () {
          return this.setZone(Oe.defaultZone);
        }),
        (u.setZone = function (r, s) {
          var f = s === void 0 ? {} : s,
            g = f.keepLocalTime,
            v = g === void 0 ? !1 : g,
            b = f.keepCalendarTime,
            S = b === void 0 ? !1 : b;
          if (((r = pt(r, Oe.defaultZone)), r.equals(this.zone))) return this;
          if (r.isValid) {
            var A = this.ts;
            if (v || S) {
              var D = r.offset(this.ts),
                E = this.toObject(),
                W = li(E, D, r);
              A = W[0];
            }
            return br(this, { ts: A, zone: r });
          } else return i.invalid(ui(r));
        }),
        (u.reconfigure = function (r) {
          var s = r === void 0 ? {} : r,
            f = s.locale,
            g = s.numberingSystem,
            v = s.outputCalendar,
            b = this.loc.clone({
              locale: f,
              numberingSystem: g,
              outputCalendar: v,
            });
          return br(this, { loc: b });
        }),
        (u.setLocale = function (r) {
          return this.reconfigure({ locale: r });
        }),
        (u.set = function (r) {
          if (!this.isValid) return this;
          var s = Vt(r, Zs),
            f = !B(s.weekYear) || !B(s.weekNumber) || !B(s.weekday),
            g = !B(s.ordinal),
            v = !B(s.year),
            b = !B(s.month) || !B(s.day),
            S = v || b,
            A = s.weekYear || s.weekNumber;
          if ((S || g) && A)
            throw new ne(
              "Can't mix weekYear/weekNumber units with year/month/day or ordinals",
            );
          if (b && g) throw new ne("Can't mix ordinal dates with month/day");
          var D;
          f
            ? (D = Cs(l({}, ia(this.c), s)))
            : B(s.ordinal)
            ? ((D = l({}, this.toObject(), s)),
              B(s.day) && (D.day = Math.min(Xe(D.year, D.month), D.day)))
            : (D = As(l({}, aa(this.c), s)));
          var E = li(D, this.o, this.zone),
            W = E[0],
            X = E[1];
          return br(this, { ts: W, o: X });
        }),
        (u.plus = function (r) {
          if (!this.isValid) return this;
          var s = ze.fromDurationLike(r);
          return br(this, Ps(this, s));
        }),
        (u.minus = function (r) {
          if (!this.isValid) return this;
          var s = ze.fromDurationLike(r).negate();
          return br(this, Ps(this, s));
        }),
        (u.startOf = function (r) {
          if (!this.isValid) return this;
          var s = {},
            f = ze.normalizeUnit(r);
          switch (f) {
            case "years":
              s.month = 1;
            case "quarters":
            case "months":
              s.day = 1;
            case "weeks":
            case "days":
              s.hour = 0;
            case "hours":
              s.minute = 0;
            case "minutes":
              s.second = 0;
            case "seconds":
              s.millisecond = 0;
              break;
          }
          if ((f === "weeks" && (s.weekday = 1), f === "quarters")) {
            var g = Math.ceil(this.month / 3);
            s.month = (g - 1) * 3 + 1;
          }
          return this.set(s);
        }),
        (u.endOf = function (r) {
          var s;
          return this.isValid
            ? this.plus(((s = {}), (s[r] = 1), s))
                .startOf(r)
                .minus(1)
            : this;
        }),
        (u.toFormat = function (r, s) {
          return (
            s === void 0 && (s = {}),
            this.isValid
              ? Ke.create(this.loc.redefaultToEN(s)).formatDateTimeFromString(
                  this,
                  r,
                )
              : oa
          );
        }),
        (u.toLocaleString = function (r, s) {
          return (
            r === void 0 && (r = q),
            s === void 0 && (s = {}),
            this.isValid
              ? Ke.create(this.loc.clone(s), r).formatDateTime(this)
              : oa
          );
        }),
        (u.toLocaleParts = function (r) {
          return (
            r === void 0 && (r = {}),
            this.isValid
              ? Ke.create(this.loc.clone(r), r).formatDateTimeParts(this)
              : []
          );
        }),
        (u.toISO = function (r) {
          var s = r === void 0 ? {} : r,
            f = s.format,
            g = f === void 0 ? "extended" : f,
            v = s.suppressSeconds,
            b = v === void 0 ? !1 : v,
            S = s.suppressMilliseconds,
            A = S === void 0 ? !1 : S,
            D = s.includeOffset,
            E = D === void 0 ? !0 : D;
          if (!this.isValid) return null;
          var W = g === "extended",
            X = ua(this, W);
          return (X += "T"), (X += Vs(this, W, b, A, E)), X;
        }),
        (u.toISODate = function (r) {
          var s = r === void 0 ? {} : r,
            f = s.format,
            g = f === void 0 ? "extended" : f;
          return this.isValid ? ua(this, g === "extended") : null;
        }),
        (u.toISOWeekDate = function () {
          return fi(this, "kkkk-'W'WW-c");
        }),
        (u.toISOTime = function (r) {
          var s = r === void 0 ? {} : r,
            f = s.suppressMilliseconds,
            g = f === void 0 ? !1 : f,
            v = s.suppressSeconds,
            b = v === void 0 ? !1 : v,
            S = s.includeOffset,
            A = S === void 0 ? !0 : S,
            D = s.includePrefix,
            E = D === void 0 ? !1 : D,
            W = s.format,
            X = W === void 0 ? "extended" : W;
          if (!this.isValid) return null;
          var de = E ? "T" : "";
          return de + Vs(this, X === "extended", b, g, A);
        }),
        (u.toRFC2822 = function () {
          return fi(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", !1);
        }),
        (u.toHTTP = function () {
          return fi(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
        }),
        (u.toSQLDate = function () {
          return this.isValid ? ua(this, !0) : null;
        }),
        (u.toSQLTime = function (r) {
          var s = r === void 0 ? {} : r,
            f = s.includeOffset,
            g = f === void 0 ? !0 : f,
            v = s.includeZone,
            b = v === void 0 ? !1 : v,
            S = "HH:mm:ss.SSS";
          return (
            (b || g) && ((S += " "), b ? (S += "z") : g && (S += "ZZ")),
            fi(this, S, !0)
          );
        }),
        (u.toSQL = function (r) {
          return (
            r === void 0 && (r = {}),
            this.isValid ? this.toSQLDate() + " " + this.toSQLTime(r) : null
          );
        }),
        (u.toString = function () {
          return this.isValid ? this.toISO() : oa;
        }),
        (u.valueOf = function () {
          return this.toMillis();
        }),
        (u.toMillis = function () {
          return this.isValid ? this.ts : NaN;
        }),
        (u.toSeconds = function () {
          return this.isValid ? this.ts / 1e3 : NaN;
        }),
        (u.toJSON = function () {
          return this.toISO();
        }),
        (u.toBSON = function () {
          return this.toJSDate();
        }),
        (u.toObject = function (r) {
          if ((r === void 0 && (r = {}), !this.isValid)) return {};
          var s = l({}, this.c);
          return (
            r.includeConfig &&
              ((s.outputCalendar = this.outputCalendar),
              (s.numberingSystem = this.loc.numberingSystem),
              (s.locale = this.loc.locale)),
            s
          );
        }),
        (u.toJSDate = function () {
          return new Date(this.isValid ? this.ts : NaN);
        }),
        (u.diff = function (r, s, f) {
          if (
            (s === void 0 && (s = "milliseconds"),
            f === void 0 && (f = {}),
            !this.isValid || !r.isValid)
          )
            return ze.invalid("created by diffing an invalid DateTime");
          var g = l(
              { locale: this.locale, numberingSystem: this.numberingSystem },
              f,
            ),
            v = Yr(s).map(ze.normalizeUnit),
            b = r.valueOf() > this.valueOf(),
            S = b ? this : r,
            A = b ? r : this,
            D = Ud(S, A, v, g);
          return b ? D.negate() : D;
        }),
        (u.diffNow = function (r, s) {
          return (
            r === void 0 && (r = "milliseconds"),
            s === void 0 && (s = {}),
            this.diff(i.now(), r, s)
          );
        }),
        (u.until = function (r) {
          return this.isValid ? _r.fromDateTimes(this, r) : this;
        }),
        (u.hasSame = function (r, s) {
          if (!this.isValid) return !1;
          var f = r.valueOf(),
            g = this.setZone(r.zone, { keepLocalTime: !0 });
          return g.startOf(s) <= f && f <= g.endOf(s);
        }),
        (u.equals = function (r) {
          return (
            this.isValid &&
            r.isValid &&
            this.valueOf() === r.valueOf() &&
            this.zone.equals(r.zone) &&
            this.loc.equals(r.loc)
          );
        }),
        (u.toRelative = function (r) {
          if ((r === void 0 && (r = {}), !this.isValid)) return null;
          var s = r.base || i.fromObject({}, { zone: this.zone }),
            f = r.padding ? (this < s ? -r.padding : r.padding) : 0,
            g = ["years", "months", "days", "hours", "minutes", "seconds"],
            v = r.unit;
          return (
            Array.isArray(r.unit) && ((g = r.unit), (v = void 0)),
            Ys(
              s,
              this.plus(f),
              l({}, r, { numeric: "always", units: g, unit: v }),
            )
          );
        }),
        (u.toRelativeCalendar = function (r) {
          return (
            r === void 0 && (r = {}),
            this.isValid
              ? Ys(
                  r.base || i.fromObject({}, { zone: this.zone }),
                  this,
                  l({}, r, {
                    numeric: "auto",
                    units: ["years", "months", "days"],
                    calendary: !0,
                  }),
                )
              : null
          );
        }),
        (i.min = function () {
          for (var r = arguments.length, s = new Array(r), f = 0; f < r; f++)
            s[f] = arguments[f];
          if (!s.every(i.isDateTime))
            throw new L("min requires all arguments be DateTimes");
          return ur(
            s,
            function (g) {
              return g.valueOf();
            },
            Math.min,
          );
        }),
        (i.max = function () {
          for (var r = arguments.length, s = new Array(r), f = 0; f < r; f++)
            s[f] = arguments[f];
          if (!s.every(i.isDateTime))
            throw new L("max requires all arguments be DateTimes");
          return ur(
            s,
            function (g) {
              return g.valueOf();
            },
            Math.max,
          );
        }),
        (i.fromFormatExplain = function (r, s, f) {
          f === void 0 && (f = {});
          var g = f,
            v = g.locale,
            b = v === void 0 ? null : v,
            S = g.numberingSystem,
            A = S === void 0 ? null : S,
            D = Ae.fromOpts({ locale: b, numberingSystem: A, defaultToEN: !0 });
          return Ms(D, r, s);
        }),
        (i.fromStringExplain = function (r, s, f) {
          return f === void 0 && (f = {}), i.fromFormatExplain(r, s, f);
        }),
        o(
          i,
          [
            {
              key: "isValid",
              get: function () {
                return this.invalid === null;
              },
            },
            {
              key: "invalidReason",
              get: function () {
                return this.invalid ? this.invalid.reason : null;
              },
            },
            {
              key: "invalidExplanation",
              get: function () {
                return this.invalid ? this.invalid.explanation : null;
              },
            },
            {
              key: "locale",
              get: function () {
                return this.isValid ? this.loc.locale : null;
              },
            },
            {
              key: "numberingSystem",
              get: function () {
                return this.isValid ? this.loc.numberingSystem : null;
              },
            },
            {
              key: "outputCalendar",
              get: function () {
                return this.isValid ? this.loc.outputCalendar : null;
              },
            },
            {
              key: "zone",
              get: function () {
                return this._zone;
              },
            },
            {
              key: "zoneName",
              get: function () {
                return this.isValid ? this.zone.name : null;
              },
            },
            {
              key: "year",
              get: function () {
                return this.isValid ? this.c.year : NaN;
              },
            },
            {
              key: "quarter",
              get: function () {
                return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
              },
            },
            {
              key: "month",
              get: function () {
                return this.isValid ? this.c.month : NaN;
              },
            },
            {
              key: "day",
              get: function () {
                return this.isValid ? this.c.day : NaN;
              },
            },
            {
              key: "hour",
              get: function () {
                return this.isValid ? this.c.hour : NaN;
              },
            },
            {
              key: "minute",
              get: function () {
                return this.isValid ? this.c.minute : NaN;
              },
            },
            {
              key: "second",
              get: function () {
                return this.isValid ? this.c.second : NaN;
              },
            },
            {
              key: "millisecond",
              get: function () {
                return this.isValid ? this.c.millisecond : NaN;
              },
            },
            {
              key: "weekYear",
              get: function () {
                return this.isValid ? sa(this).weekYear : NaN;
              },
            },
            {
              key: "weekNumber",
              get: function () {
                return this.isValid ? sa(this).weekNumber : NaN;
              },
            },
            {
              key: "weekday",
              get: function () {
                return this.isValid ? sa(this).weekday : NaN;
              },
            },
            {
              key: "ordinal",
              get: function () {
                return this.isValid ? aa(this.c).ordinal : NaN;
              },
            },
            {
              key: "monthShort",
              get: function () {
                return this.isValid
                  ? pr.months("short", { locObj: this.loc })[this.month - 1]
                  : null;
              },
            },
            {
              key: "monthLong",
              get: function () {
                return this.isValid
                  ? pr.months("long", { locObj: this.loc })[this.month - 1]
                  : null;
              },
            },
            {
              key: "weekdayShort",
              get: function () {
                return this.isValid
                  ? pr.weekdays("short", { locObj: this.loc })[this.weekday - 1]
                  : null;
              },
            },
            {
              key: "weekdayLong",
              get: function () {
                return this.isValid
                  ? pr.weekdays("long", { locObj: this.loc })[this.weekday - 1]
                  : null;
              },
            },
            {
              key: "offset",
              get: function () {
                return this.isValid ? +this.o : NaN;
              },
            },
            {
              key: "offsetNameShort",
              get: function () {
                return this.isValid
                  ? this.zone.offsetName(this.ts, {
                      format: "short",
                      locale: this.locale,
                    })
                  : null;
              },
            },
            {
              key: "offsetNameLong",
              get: function () {
                return this.isValid
                  ? this.zone.offsetName(this.ts, {
                      format: "long",
                      locale: this.locale,
                    })
                  : null;
              },
            },
            {
              key: "isOffsetFixed",
              get: function () {
                return this.isValid ? this.zone.isUniversal : null;
              },
            },
            {
              key: "isInDST",
              get: function () {
                return this.isOffsetFixed
                  ? !1
                  : this.offset > this.set({ month: 1 }).offset ||
                      this.offset > this.set({ month: 5 }).offset;
              },
            },
            {
              key: "isInLeapYear",
              get: function () {
                return Qe(this.year);
              },
            },
            {
              key: "daysInMonth",
              get: function () {
                return Xe(this.year, this.month);
              },
            },
            {
              key: "daysInYear",
              get: function () {
                return this.isValid ? nt(this.year) : NaN;
              },
            },
            {
              key: "weeksInWeekYear",
              get: function () {
                return this.isValid ? ht(this.weekYear) : NaN;
              },
            },
          ],
          [
            {
              key: "DATE_SHORT",
              get: function () {
                return q;
              },
            },
            {
              key: "DATE_MED",
              get: function () {
                return ve;
              },
            },
            {
              key: "DATE_MED_WITH_WEEKDAY",
              get: function () {
                return Se;
              },
            },
            {
              key: "DATE_FULL",
              get: function () {
                return Fe;
              },
            },
            {
              key: "DATE_HUGE",
              get: function () {
                return ke;
              },
            },
            {
              key: "TIME_SIMPLE",
              get: function () {
                return V;
              },
            },
            {
              key: "TIME_WITH_SECONDS",
              get: function () {
                return K;
              },
            },
            {
              key: "TIME_WITH_SHORT_OFFSET",
              get: function () {
                return Ne;
              },
            },
            {
              key: "TIME_WITH_LONG_OFFSET",
              get: function () {
                return Le;
              },
            },
            {
              key: "TIME_24_SIMPLE",
              get: function () {
                return Kt;
              },
            },
            {
              key: "TIME_24_WITH_SECONDS",
              get: function () {
                return $t;
              },
            },
            {
              key: "TIME_24_WITH_SHORT_OFFSET",
              get: function () {
                return en;
              },
            },
            {
              key: "TIME_24_WITH_LONG_OFFSET",
              get: function () {
                return tn;
              },
            },
            {
              key: "DATETIME_SHORT",
              get: function () {
                return nn;
              },
            },
            {
              key: "DATETIME_SHORT_WITH_SECONDS",
              get: function () {
                return rn;
              },
            },
            {
              key: "DATETIME_MED",
              get: function () {
                return an;
              },
            },
            {
              key: "DATETIME_MED_WITH_SECONDS",
              get: function () {
                return on;
              },
            },
            {
              key: "DATETIME_MED_WITH_WEEKDAY",
              get: function () {
                return Cn;
              },
            },
            {
              key: "DATETIME_FULL",
              get: function () {
                return P;
              },
            },
            {
              key: "DATETIME_FULL_WITH_SECONDS",
              get: function () {
                return re;
              },
            },
            {
              key: "DATETIME_HUGE",
              get: function () {
                return se;
              },
            },
            {
              key: "DATETIME_HUGE_WITH_SECONDS",
              get: function () {
                return x;
              },
            },
          ],
        ),
        i
      );
    })();
    function kr(i) {
      if (De.isDateTime(i)) return i;
      if (i && i.valueOf && le(i.valueOf())) return De.fromJSDate(i);
      if (i && typeof i == "object") return De.fromObject(i);
      throw new L("Unknown datetime argument: " + i + ", of type " + typeof i);
    }
    var ah = "2.3.0";
    (t.DateTime = De),
      (t.Duration = ze),
      (t.FixedOffsetZone = Pe),
      (t.IANAZone = it),
      (t.Info = pr),
      (t.Interval = _r),
      (t.InvalidZone = Ct),
      (t.Settings = Oe),
      (t.SystemZone = fn),
      (t.VERSION = ah),
      (t.Zone = Zt);
  });
  function Ma(e) {
    return wn.IANAZone.isValidZone(e);
  }
  function Da(e, t) {
    const n = wn.DateTime.fromJSDate(e)
      .toLocaleString(wn.DateTime.TIME_SIMPLE)
      .replace(/\./g, "");
    try {
      const o = wn.DateTime.fromJSDate(e, { zone: t });
      return !o.isValid && (o.invalidReason === "unsupported zone" || !t)
        ? n
        : o.toLocaleString(wn.DateTime.TIME_SIMPLE).replace(/\./g, "");
    } catch (o) {
      return n;
    }
  }
  function xa(e, t) {
    const n = wn.DateTime.fromJSDate(e, { zone: t });
    return (t && !Ma(t)) ||
      (!n.isValid && (n.invalidReason === "unsupported zone" || !t))
      ? ""
      : n.offsetNameShort;
  }
  const kn = [];
  function hu(e, t) {
    return { subscribe: qt(e, t).subscribe };
  }
  function qt(e, t = ae) {
    let n;
    const o = new Set();
    function l(m) {
      if (vn(e, m) && ((e = m), n)) {
        const h = !kn.length;
        for (const y of o) y[1](), kn.push(y, e);
        if (h) {
          for (let y = 0; y < kn.length; y += 2) kn[y][0](kn[y + 1]);
          kn.length = 0;
        }
      }
    }
    function c(m) {
      l(m(e));
    }
    function d(m, h = ae) {
      const y = [m, h];
      return (
        o.add(y),
        o.size === 1 && (n = t(l) || ae),
        m(e),
        () => {
          o.delete(y), o.size === 0 && (n(), (n = null));
        }
      );
    }
    return { set: l, update: c, subscribe: d };
  }
  function mu(e, t, n) {
    const o = !Array.isArray(e),
      l = o ? [e] : e,
      c = t.length < 2;
    return hu(n, (d) => {
      let m = !1;
      const h = [];
      let y = 0,
        p = ae;
      const w = () => {
          if (y) return;
          p();
          const N = t(o ? h[0] : h, d);
          c ? d(N) : (p = Hn(N) ? N : ae);
        },
        k = l.map((N, T) =>
          ma(
            N,
            (H) => {
              (h[T] = H), (y &= ~(1 << T)), m && w();
            },
            () => {
              y |= 1 << T;
            },
          ),
        );
      return (
        (m = !0),
        w(),
        function () {
          Lt(k), p();
        }
      );
    });
  }
  function gu() {
    return qt({});
  }
  const pi = gu();
  var yu = Object.defineProperty,
    vu = Object.defineProperties,
    _u = Object.getOwnPropertyDescriptors,
    Ea = Object.getOwnPropertySymbols,
    pu = Object.prototype.hasOwnProperty,
    bu = Object.prototype.propertyIsEnumerable,
    Na = (e, t, n) =>
      t in e
        ? yu(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n })
        : (e[t] = n),
    wu = (e, t) => {
      for (var n in t || (t = {})) pu.call(t, n) && Na(e, n, t[n]);
      if (Ea) for (var n of Ea(t)) bu.call(t, n) && Na(e, n, t[n]);
      return e;
    },
    ku = (e, t) => vu(e, _u(t));
  async function wt(e) {
    var t;
    if (!e.ok) {
      const n = await e.json().then((c) => c),
        o =
          ((t = n == null ? void 0 : n.response) == null ? void 0 : t.error) ||
          (n == null ? void 0 : n.message),
        l = new Error(o);
      return (
        (l.name = n.name), Promise.reject({ message: l, statusCode: e.status })
      );
    }
    return e.json();
  }
  function kt(e = { component_id: "" }) {
    return {
      method: e.method || "GET",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "X-Component-Id": e.component_id || "",
        "X-Access-Token": e.access_token || "",
      },
      body: e.body ? JSON.stringify(e.body) : void 0,
    };
  }
  function lt(e, t) {
    throw (console.error(t), pi.update((n) => ku(wu({}, n), { [e]: t })), t);
  }
  const Ia = { "001": "", "002": "ireland-", "003": "canada-" };
  function St(e) {
    let t = "";
    if (e.substring(3, 4) === "-") {
      const o = e.substring(0, 3);
      typeof Ia[o] != "undefined" && (t = Ia[o]);
    }
    return `https://${t}web-components.nylas.com/middleware`;
  }
  function Sn(e) {}
  const Su = async (e, t) =>
    await fetch(
      `${St(e.component_id)}/contacts/${t}/picture`,
      kt({ component_id: e.component_id, access_token: e.access_token }),
    )
      .then((n) => wt(n))
      .then((n) => n.response)
      .catch((n) => lt(e.component_id, n));
  var Tu = Object.defineProperty,
    Ou = Object.defineProperties,
    Mu = Object.getOwnPropertyDescriptors,
    Ca = Object.getOwnPropertySymbols,
    Du = Object.prototype.hasOwnProperty,
    xu = Object.prototype.propertyIsEnumerable,
    Aa = (e, t, n) =>
      t in e
        ? Tu(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n })
        : (e[t] = n),
    Fa = (e, t) => {
      for (var n in t || (t = {})) Du.call(t, n) && Aa(e, n, t[n]);
      if (Ca) for (var n of Ca(t)) xu.call(t, n) && Aa(e, n, t[n]);
      return e;
    },
    La = (e, t) => Ou(e, Mu(t));
  const Ua = (e, t, n) => {
    if (e.thread_ids) {
      const l = e.thread_ids.slice(n, n + t);
      return Promise.all(
        l.map(async (c) => {
          const d = `${St(e.component_id)}/threads/${c}?view=expanded`;
          return await fetch(d, kt(e))
            .then((m) => wt(m))
            .then((m) => m.response)
            .then((m) =>
              La(Fa({}, m), {
                messages: m.messages.filter(
                  (h) => h.from.length !== 0 || h.to.length !== 0,
                ),
              }),
            )
            .catch((m) => lt(e.component_id, m));
        }),
      );
    }
    let o = `${St(
      e.component_id,
    )}/threads?view=expanded&not_in=trash&limit=${t}&offset=${n}`;
    return (
      e.query &&
        Object.entries(e.query).forEach(
          (l) => (o = o.concat(`&${l[0]}=${l[1]}`)),
        ),
      fetch(o, kt(e))
        .then((l) => wt(l))
        .then((l) => l.response)
        .then((l) =>
          l.map((c) =>
            La(Fa({}, c), {
              messages: c.messages.filter(
                (d) => d.from.length !== 0 || d.to.length !== 0,
              ),
            }),
          ),
        )
        .catch((l) => lt(e.component_id, l))
    );
  };
  function za(e) {
    let t = `${St(
      e.component_id,
    )}/threads?view=expanded&not_in=trash&view=count`;
    return (
      e.query &&
        Object.entries(e.query).forEach(
          (n) => (t = t.concat(`&${n[0]}=${n[1]}`)),
        ),
      e.keywordToSearch && (t += `&q=${e.keywordToSearch}`),
      fetch(t, kt(e))
        .then((n) => wt(n))
        .then((n) => n.response.count)
    );
  }
  const Eu = (e) => {
      const t = `${St(e.component_id)}/threads/search?q=${
        e.keywordToSearch
      }&view=expanded&limit=${e.query.limit}&offset=${e.query.offset}`;
      return fetch(t, kt(e))
        .then(async (n) => wt(n))
        .then((n) => n.response)
        .catch((n) => lt(e.component_id, n));
    },
    Nu = (e, t) =>
      fetch(
        `${St(e.component_id)}/threads/${t.id}`,
        kt({
          method: "PUT",
          component_id: e.component_id,
          access_token: e.access_token,
          body: {
            unread: t.unread,
            starred: t.starred,
            folder_id: t.folder_id,
            label_ids: t.label_ids,
          },
        }),
      )
        .then((n) => wt(n))
        .then((n) => n.response)
        .catch((n) => lt(e.component_id, n)),
    Iu = async (e, t) =>
      await fetch(`${St(e)}/manifest`, kt({ access_token: t, component_id: e }))
        .then(wt)
        .then((n) => n.component.theming)
        .catch((n) => lt(e, n));
  var Cu = Object.defineProperty,
    Ra = Object.getOwnPropertySymbols,
    Au = Object.prototype.hasOwnProperty,
    Fu = Object.prototype.propertyIsEnumerable,
    Pa = (e, t, n) =>
      t in e
        ? Cu(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n })
        : (e[t] = n),
    Va = (e, t) => {
      for (var n in t || (t = {})) Au.call(t, n) && Pa(e, n, t[n]);
      if (Ra) for (var n of Ra(t)) Fu.call(t, n) && Pa(e, n, t[n]);
      return e;
    };
  const Lu = async (e) =>
      fetch(
        `${St(e.component_id)}/calendars/availability`,
        kt({
          method: "POST",
          component_id: e.component_id,
          access_token: e.access_token,
          body: e.body,
        }),
      )
        .then(async (t) => {
          const n = await wt(t);
          return (
            (n.response.time_slots = n.response.time_slots.map(
              (o) => (
                (o.start_time = o.start || 0),
                (o.end_time = o.end || 0),
                delete o.start,
                delete o.end,
                o
              ),
            )),
            n.response
          );
        })
        .catch((t) => lt(e.component_id, t)),
    Uu = async (e) =>
      fetch(
        `${St(e.component_id)}/calendars/availability/consecutive`,
        kt({
          method: "POST",
          component_id: e.component_id,
          access_token: e.access_token,
          body: e.body,
        }),
      )
        .then(async (t) => {
          var n;
          const l =
              ((n = (await wt(t)).response) == null
                ? void 0
                : n.map(
                    (m) => (
                      (m = m.map(
                        (h) => (
                          (h.start_time = new Date(h.start_time * 1e3)),
                          (h.end_time = new Date(h.end_time * 1e3)),
                          h
                        ),
                      )),
                      m
                    ),
                  )) || [],
            c = zu(l, e.body.events);
          return Ru(c);
        })
        .catch((t) => lt(e.component_id, t));
  function zu(e, t) {
    return e.map((n) =>
      n.map((o) =>
        Va(
          Va({}, o),
          t.find(
            (l) =>
              l.participantEmails.length === o.emails.length &&
              l.participantEmails.every((c) => o.emails.includes(c)),
          ),
        ),
      ),
    );
  }
  function Ru(e) {
    const t = new Set();
    return e.filter((n) => {
      const o = `${n[0].start_time}_${n[n.length - 1].end_time}`;
      return t.has(o) ? !1 : (t.add(o), !0);
    });
  }
  var Pu = Object.defineProperty,
    Wa = Object.getOwnPropertySymbols,
    Vu = Object.prototype.hasOwnProperty,
    Wu = Object.prototype.propertyIsEnumerable,
    Ha = (e, t, n) =>
      t in e
        ? Pu(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n })
        : (e[t] = n),
    Hu = (e, t) => {
      for (var n in t || (t = {})) Vu.call(t, n) && Ha(e, n, t[n]);
      if (Wa) for (var n of Wa(t)) Wu.call(t, n) && Ha(e, n, t[n]);
      return e;
    };
  function Zu() {
    const e = (n, o) => {
        var l, c;
        const d = JSON.parse(o),
          m = Hu({}, d);
        if (
          (delete m.forceReload,
          (o = JSON.stringify(m)),
          !(
            !d.component_id ||
            !((l = d == null ? void 0 : d.body) == null
              ? void 0
              : l.start_time) ||
            !((c = d == null ? void 0 : d.body) == null ? void 0 : c.end_time)
          ))
        ) {
          if (!n[o] || d.forceReload) {
            const h = Lu(d);
            t.update((y) => ((y[o] = h), y)), (n[o] = h);
          }
          return n[o];
        }
      },
      t = qt(new Proxy({}, { get: e }));
    return t;
  }
  const ju = Zu();
  function Yu() {
    const e = (n, o) => {
        var l, c;
        const d = JSON.parse(o);
        if (
          !(
            !d.component_id ||
            !((l = d == null ? void 0 : d.body) == null
              ? void 0
              : l.start_time) ||
            !((c = d == null ? void 0 : d.body) == null ? void 0 : c.end_time)
          )
        ) {
          if (!n[o]) {
            const m = Uu(d);
            t.update((h) => ((h[o] = m), h)), (n[o] = m);
          }
          return n[o];
        }
      },
      t = qt(new Proxy({}, { get: e }));
    return t;
  }
  const qu = Yu(),
    bi = {};
  function Ju() {
    const { subscribe: e, set: t } = qt({});
    return {
      subscribe: e,
      getContactAvatar: async (n, o, l = !1) => {
        if (!bi[o] || l) {
          const c = await Su(n, o)
            .then((d) => d)
            .catch(() => "");
          c && (bi[o] = c);
        }
        return bi[o];
      },
      reset: () => t({}),
    };
  }
  const Bu = Ju();
  var Gu = Object.defineProperty,
    Za = Object.getOwnPropertySymbols,
    Qu = Object.prototype.hasOwnProperty,
    Xu = Object.prototype.propertyIsEnumerable,
    ja = (e, t, n) =>
      t in e
        ? Gu(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n })
        : (e[t] = n),
    Jt = (e, t) => {
      for (var n in t || (t = {})) Qu.call(t, n) && ja(e, n, t[n]);
      if (Za) for (var n of Za(t)) Xu.call(t, n) && ja(e, n, t[n]);
      return e;
    };
  async function Ya(e) {
    const t = [];
    for (let n = 0; n < e; n++) t.push({ isLoaded: !1, threads: [] });
    return t;
  }
  function Ku() {
    const { subscribe: e, set: t, update: n } = qt({});
    let o = {},
      l;
    return {
      subscribe: e,
      set: t,
      getThreads: async (c, d, m, h = !1) => {
        const y = JSON.stringify(c);
        if (!c.component_id && !c.access_token) return [];
        if (l === void 0 || h) {
          const p = c.thread_ids ? c.thread_ids.length : await za(c).catch(Sn);
          p && (l = p);
        }
        if (!Array.isArray(o[y]) || h) {
          const p = Math.ceil(l / m);
          o[y] = await Ya(p);
        }
        if (typeof o[y][d] == "undefined") return [];
        if (!o[y][d].isLoaded) {
          const p = await Ua(c, m, d * m).catch(Sn);
          p && ((o[y][d].threads = p), (o[y][d].isLoaded = !0));
        }
        return n((p) => ((p[y] = o[y]), Jt({}, p))), o[y][d].threads;
      },
      getNumberOfItems: async (c) => {
        if (!c.component_id && !c.access_token) return 0;
        if (typeof l == "undefined") {
          const d = await za(c).catch(Sn);
          d && (l = d);
        }
        return l;
      },
      getThreadsWithSearchKeyword: async (c, d = !1) => {
        if (!c.component_id && !c.access_token) return [];
        const m = JSON.stringify(c);
        if (
          ((!Array.isArray(o[m]) || d) && (o[m] = await Ya(1)),
          !o[m][0].isLoaded || d)
        ) {
          const h = await Eu(c).catch(Sn);
          h && ((o[m][0].threads = h), (o[m][0].isLoaded = !0));
        }
        return n((h) => ((h[m] = o[m]), Jt({}, h))), o[m][0].threads;
      },
      updateThread: async (c, d, m, h, y) => {
        const p = await Nu(c, m).catch(Sn);
        if (!o[d][h].isLoaded) {
          const w = await Ua(JSON.parse(d), y, h * y).catch(Sn);
          w && ((o[d][h].threads = w), (o[d][h].isLoaded = !0));
        }
        return (
          (o[d][h].threads = o[d][h].threads.map(
            (w) => (p && w.id === p.id && (w = Object.assign(w, p)), w),
          )),
          n((w) => ((w[d] = o[d]), Jt({}, w))),
          o[d][h].threads
        );
      },
      updateThreadSelection: (c, d, m) => {
        const h = o[c][d].threads;
        if (m) {
          const y = h.find((p) => p.id === m);
          y && (y.selected = !y.selected);
        } else {
          const y = h.some((p) => p.selected);
          for (const p of h) p.selected = !y;
        }
        return n((y) => ((y[c] = o[c]), Jt({}, y))), o[c][d].threads;
      },
      reset: () => {
        (o = {}), t({});
      },
      hydrateMessageInThread: (c, d, m) => {
        var h, y, p;
        const w = JSON.stringify(d),
          k =
            (y = (h = o[w][m]) == null ? void 0 : h.threads) == null
              ? void 0
              : y.find((N) => N.id === c.thread_id);
        if (k) {
          const N =
            (p = k.messages) == null ? void 0 : p.find((T) => T.id === c.id);
          N
            ? ((N.body = c.body),
              n((T) => {
                if (c.thread_id) {
                  let H = T[w][m].threads.find((F) => F.id === k.id);
                  H && (H = JSON.parse(JSON.stringify(k)));
                }
                return Jt({}, T);
              }))
            : n((T) => {
                if (c.thread_id) {
                  let H = T[w][m].threads.find((F) => F.id === k.id);
                  if (H) {
                    const F = k.messages;
                    F.push(c),
                      (k.messages = F),
                      (k.snippet = c.snippet),
                      (k.drafts = k.drafts.filter((I) => I.id !== c.id)),
                      (H = JSON.parse(JSON.stringify(k)));
                  }
                }
                return Jt({}, T);
              });
        }
        return o[w][m].threads;
      },
      hydrateDraftInThread: (c, d, m) => {
        var h, y, p;
        const w = JSON.stringify(d),
          k =
            (y = (h = o[w][m]) == null ? void 0 : h.threads) == null
              ? void 0
              : y.find((N) => N.id === c.thread_id);
        if (k) {
          const N =
            (p = k.drafts) == null ? void 0 : p.find((T) => T.id === c.id);
          if (c.thread_id) {
            if (N) Object.assign(N, c);
            else {
              const T = k.drafts;
              T.push(c), (k.drafts = T);
            }
            n((T) => {
              let H = T[w][m].threads.find((F) => F.id === k.id);
              return H && (H = JSON.parse(JSON.stringify(k))), Jt({}, T);
            });
          }
        }
        return o[w][m].threads;
      },
    };
  }
  const $u = Ku();
  mu($u, (e) => {
    const t = {};
    return (
      Object.entries(e).forEach(
        ([n, o]) => (t[n] = o.map((l) => l.threads).flat()),
      ),
      t
    );
  });
  function el() {
    const e = (n, o) => {
        const l = JSON.parse(o);
        if (!!l.component_id) {
          if (!n[o]) {
            const c = Iu(l.component_id, l.access_token);
            t.update((d) => ((d[o] = c), d)), (n[o] = c);
          }
          return n[o];
        }
      },
      t = qt(new Proxy({}, { get: e }));
    return t;
  }
  const tl = el();
  function nl(e) {
    return (t, n) => {
      e.dispatchEvent &&
        e.dispatchEvent(new CustomEvent(t, { detail: n, composed: !0 }));
    };
  }
  function wi(e, t, n) {
    return new Proxy(e, {
      get: (o, l) =>
        l === "toString" || l === "toJSON"
          ? () => JSON.stringify(o)
          : Reflect.get(o, l) !== void 0
          ? qa(Reflect.get(o, l), n[l])
          : t && l in t
          ? qa(t[l], n[l])
          : n[l],
      ownKeys: (o) => {
        const l = new Set([
          ...Reflect.ownKeys(o),
          ...Object.keys(t),
          ...Object.keys(n),
        ]);
        return Array.from(l);
      },
      getOwnPropertyDescriptor: (o, l) => {
        var c, d;
        let m = Reflect.getOwnPropertyDescriptor(o, l);
        return (
          m ||
            ((m =
              (d =
                (c = t && Object.getOwnPropertyDescriptor(t, l)) != null
                  ? c
                  : n && Object.getOwnPropertyDescriptor(n, l)) != null
                ? d
                : { configurable: !0, enumerable: !0, writable: !0 }),
            Reflect.defineProperty(o, l, m)),
          m
        );
      },
    });
  }
  function qa(e, t) {
    if (e) {
      if (typeof t == "boolean") return rl(e);
      if (typeof t == "number") return Number(e);
      if (t instanceof Date) return new Date(e);
    }
    return e === void 0 ? (t != null ? t : null) : e;
  }
  function rl(e) {
    return [!0, "true", "1"].includes(e);
  }
  function Ja(e, t) {
    return t.every((n) => e.includes(n));
  }
  function Ba(e) {
    let t, n, o, l, c, d;
    function m(p, w) {
      if (p[2] === "HostDomainNotAllowedError") return al;
      if (p[2] === "IncompatibleProperties") return il;
    }
    let h = m(e),
      y = h && h(e);
    return {
      c() {
        var p, w;
        (t = G("div")),
          y && y.c(),
          (n = we()),
          (o = G("span")),
          (o.textContent = "Debug info:"),
          (l = we()),
          (c = G("textarea")),
          z(o, "class", "details"),
          z(c, "class", "details"),
          (c.readOnly = !0),
          (c.value = d =
            `
      ` +
            e[2] +
            ": " +
            e[0] +
            `
      ` +
            ((w = (p = e[1].message) == null ? void 0 : p.message) != null
              ? w
              : "") +
            `
    `),
          z(t, "class", "message-container");
      },
      m(p, w) {
        ie(p, t, w), y && y.m(t, null), j(t, n), j(t, o), j(t, l), j(t, c);
      },
      p(p, w) {
        var k, N;
        h === (h = m(p)) && y
          ? y.p(p, w)
          : (y && y.d(1), (y = h && h(p)), y && (y.c(), y.m(t, n))),
          w & 7 &&
            d !==
              (d =
                `
      ` +
                p[2] +
                ": " +
                p[0] +
                `
      ` +
                ((N = (k = p[1].message) == null ? void 0 : k.message) != null
                  ? N
                  : "") +
                `
    `) &&
            (c.value = d);
      },
      d(p) {
        p && $(t), y && y.d();
      },
    };
  }
  function il(e) {
    let t;
    return {
      c() {
        (t = G("h3")),
          (t.textContent =
            "Your component properties do not work with each other.");
      },
      m(n, o) {
        ie(n, t, o);
      },
      p: ae,
      d(n) {
        n && $(t);
      },
    };
  }
  function al(e) {
    let t, n, o, l, c, d;
    return {
      c() {
        (t = G("h3")),
          (n = xe(`You are trying to access this component from\xA0
        `)),
          (o = G("code")),
          (o.textContent = `${window.location.hostname}`),
          (l = xe(`. The component's settings do not
        allow access from this domain.`)),
          (c = we()),
          (d = G("h4")),
          (d.innerHTML = `The list of allowed domains can be modified in your\xA0
        <a href="https://dashboard.nylas.com">Dashboard</a>.`);
      },
      m(m, h) {
        ie(m, t, h), j(t, n), j(t, o), j(t, l), ie(m, c, h), ie(m, d, h);
      },
      p: ae,
      d(m) {
        m && $(t), m && $(c), m && $(d);
      },
    };
  }
  function ol(e) {
    let t,
      n = e[2] && e[3] && Ba(e);
    return {
      c() {
        n && n.c(), (t = mi()), (this.c = ae);
      },
      m(o, l) {
        n && n.m(o, l), ie(o, t, l);
      },
      p(o, [l]) {
        o[2] && o[3]
          ? n
            ? n.p(o, l)
            : ((n = Ba(o)), n.c(), n.m(t.parentNode, t))
          : n && (n.d(1), (n = null));
      },
      i: ae,
      o: ae,
      d(o) {
        n && n.d(o), o && $(t);
      },
    };
  }
  function sl(e, t, n) {
    let o;
    Zn(e, pi, (k) => n(8, (o = k)));
    var l, c, d, m;
    let { id: h } = t,
      y,
      p;
    const w =
      window.location.href.includes("localhost") ||
      window.location.href.includes("127.0.0.1");
    return (
      (e.$$set = (k) => {
        "id" in k && n(0, (h = k.id));
      }),
      (e.$$.update = () => {
        e.$$.dirty & 499 &&
          (n(
            1,
            (y = n(4, (l = o[h])) !== null && l !== void 0 ? l : { name: "" }),
          ),
          n(
            2,
            (p =
              n(
                7,
                (m =
                  n(5, (c = y.name)) !== null && c !== void 0
                    ? c
                    : n(6, (d = y.message)) === null || d === void 0
                    ? void 0
                    : d.name),
              ) !== null && m !== void 0
                ? m
                : ""),
          ));
      }),
      [h, y, p, w, l, c, d, m, o]
    );
  }
  class ul extends Qn {
    constructor(t) {
      super();
      (this.shadowRoot.innerHTML = `<style>.message-container{background:#fff6f6;border-radius:5px;box-shadow:0 0 0 1px #aa92a0 inset, 0 0 0 0 transparent;color:#9f3a38;font-size:1.25rem;padding:10px;margin:0 auto;transition:opacity 500ms ease, color 500ms ease,
      background-color 500ms ease, box-shadow 500ms ease,
      -webkit-box-shadow 500ms ease}.message-container *:focus{outline:5px auto Highlight;outline:5px auto -webkit-focus-ring-color}.details{color:#494949;font-size:0.75rem;width:100%}</style>`),
        bn(
          this,
          {
            target: this.shadowRoot,
            props: Nr(this.attributes),
            customElement: !0,
          },
          sl,
          ol,
          Qs,
          { id: 0 },
          null,
        ),
        t &&
          (t.target && ie(t.target, this, t.anchor),
          t.props && (this.$set(t.props), J()));
    }
    static get observedAttributes() {
      return ["id"];
    }
    get id() {
      return this.$$.ctx[0];
    }
    set id(t) {
      this.$$set({ id: t }), J();
    }
  }
  customElements.define("nylas-error", ul);
  var ki = new Date(),
    Si = new Date();
  function Ve(e, t, n, o) {
    function l(c) {
      return e((c = arguments.length === 0 ? new Date() : new Date(+c))), c;
    }
    return (
      (l.floor = function (c) {
        return e((c = new Date(+c))), c;
      }),
      (l.ceil = function (c) {
        return e((c = new Date(c - 1))), t(c, 1), e(c), c;
      }),
      (l.round = function (c) {
        var d = l(c),
          m = l.ceil(c);
        return c - d < m - c ? d : m;
      }),
      (l.offset = function (c, d) {
        return t((c = new Date(+c)), d == null ? 1 : Math.floor(d)), c;
      }),
      (l.range = function (c, d, m) {
        var h = [],
          y;
        if (
          ((c = l.ceil(c)),
          (m = m == null ? 1 : Math.floor(m)),
          !(c < d) || !(m > 0))
        )
          return h;
        do h.push((y = new Date(+c))), t(c, m), e(c);
        while (y < c && c < d);
        return h;
      }),
      (l.filter = function (c) {
        return Ve(
          function (d) {
            if (d >= d) for (; e(d), !c(d); ) d.setTime(d - 1);
          },
          function (d, m) {
            if (d >= d)
              if (m < 0) for (; ++m <= 0; ) for (; t(d, -1), !c(d); );
              else for (; --m >= 0; ) for (; t(d, 1), !c(d); );
          },
        );
      }),
      n &&
        ((l.count = function (c, d) {
          return (
            ki.setTime(+c), Si.setTime(+d), e(ki), e(Si), Math.floor(n(ki, Si))
          );
        }),
        (l.every = function (c) {
          return (
            (c = Math.floor(c)),
            !isFinite(c) || !(c > 0)
              ? null
              : c > 1
              ? l.filter(
                  o
                    ? function (d) {
                        return o(d) % c == 0;
                      }
                    : function (d) {
                        return l.count(0, d) % c == 0;
                      },
                )
              : l
          );
        })),
      l
    );
  }
  var Ti = Ve(
    function () {},
    function (e, t) {
      e.setTime(+e + t);
    },
    function (e, t) {
      return t - e;
    },
  );
  Ti.every = function (e) {
    return (
      (e = Math.floor(e)),
      !isFinite(e) || !(e > 0)
        ? null
        : e > 1
        ? Ve(
            function (t) {
              t.setTime(Math.floor(t / e) * e);
            },
            function (t, n) {
              t.setTime(+t + n * e);
            },
            function (t, n) {
              return (n - t) / e;
            },
          )
        : Ti
    );
  };
  const Tt = 1e3,
    ft = Tt * 60,
    Bt = ft * 60,
    Gt = Bt * 24,
    Oi = Gt * 7,
    Ga = Gt * 30,
    Mi = Gt * 365;
  var Xn = Ve(
      function (e) {
        e.setTime(e - e.getMilliseconds());
      },
      function (e, t) {
        e.setTime(+e + t * Tt);
      },
      function (e, t) {
        return (t - e) / Tt;
      },
      function (e) {
        return e.getUTCSeconds();
      },
    ),
    Ot = Ve(
      function (e) {
        e.setTime(e - e.getMilliseconds() - e.getSeconds() * Tt);
      },
      function (e, t) {
        e.setTime(+e + t * ft);
      },
      function (e, t) {
        return (t - e) / ft;
      },
      function (e) {
        return e.getMinutes();
      },
    ),
    Ut = Ve(
      function (e) {
        e.setTime(
          e - e.getMilliseconds() - e.getSeconds() * Tt - e.getMinutes() * ft,
        );
      },
      function (e, t) {
        e.setTime(+e + t * Bt);
      },
      function (e, t) {
        return (t - e) / Bt;
      },
      function (e) {
        return e.getHours();
      },
    ),
    Ee = Ve(
      (e) => e.setHours(0, 0, 0, 0),
      (e, t) => e.setDate(e.getDate() + t),
      (e, t) =>
        (t - e - (t.getTimezoneOffset() - e.getTimezoneOffset()) * ft) / Gt,
      (e) => e.getDate() - 1,
    );
  function Qt(e) {
    return Ve(
      function (t) {
        t.setDate(t.getDate() - ((t.getDay() + 7 - e) % 7)),
          t.setHours(0, 0, 0, 0);
      },
      function (t, n) {
        t.setDate(t.getDate() + n * 7);
      },
      function (t, n) {
        return (
          (n - t - (n.getTimezoneOffset() - t.getTimezoneOffset()) * ft) / Oi
        );
      },
    );
  }
  var Tn = Qt(0),
    Di = Qt(1);
  Qt(2), Qt(3);
  var Kn = Qt(4);
  Qt(5), Qt(6);
  var Qa = Ve(
      function (e) {
        e.setDate(1), e.setHours(0, 0, 0, 0);
      },
      function (e, t) {
        e.setMonth(e.getMonth() + t);
      },
      function (e, t) {
        return (
          t.getMonth() - e.getMonth() + (t.getFullYear() - e.getFullYear()) * 12
        );
      },
      function (e) {
        return e.getMonth();
      },
    ),
    zt = Ve(
      function (e) {
        e.setMonth(0, 1), e.setHours(0, 0, 0, 0);
      },
      function (e, t) {
        e.setFullYear(e.getFullYear() + t);
      },
      function (e, t) {
        return t.getFullYear() - e.getFullYear();
      },
      function (e) {
        return e.getFullYear();
      },
    );
  zt.every = function (e) {
    return !isFinite((e = Math.floor(e))) || !(e > 0)
      ? null
      : Ve(
          function (t) {
            t.setFullYear(Math.floor(t.getFullYear() / e) * e),
              t.setMonth(0, 1),
              t.setHours(0, 0, 0, 0);
          },
          function (t, n) {
            t.setFullYear(t.getFullYear() + n * e);
          },
        );
  };
  var Xa = Ve(
    function (e) {
      e.setUTCHours(0, 0, 0, 0);
    },
    function (e, t) {
      e.setUTCDate(e.getUTCDate() + t);
    },
    function (e, t) {
      return (t - e) / Gt;
    },
    function (e) {
      return e.getUTCDate() - 1;
    },
  );
  function Xt(e) {
    return Ve(
      function (t) {
        t.setUTCDate(t.getUTCDate() - ((t.getUTCDay() + 7 - e) % 7)),
          t.setUTCHours(0, 0, 0, 0);
      },
      function (t, n) {
        t.setUTCDate(t.getUTCDate() + n * 7);
      },
      function (t, n) {
        return (n - t) / Oi;
      },
    );
  }
  var ll = Xt(0),
    xi = Xt(1);
  Xt(2), Xt(3);
  var $n = Xt(4);
  Xt(5), Xt(6);
  var On = Ve(
    function (e) {
      e.setUTCMonth(0, 1), e.setUTCHours(0, 0, 0, 0);
    },
    function (e, t) {
      e.setUTCFullYear(e.getUTCFullYear() + t);
    },
    function (e, t) {
      return t.getUTCFullYear() - e.getUTCFullYear();
    },
    function (e) {
      return e.getUTCFullYear();
    },
  );
  On.every = function (e) {
    return !isFinite((e = Math.floor(e))) || !(e > 0)
      ? null
      : Ve(
          function (t) {
            t.setUTCFullYear(Math.floor(t.getUTCFullYear() / e) * e),
              t.setUTCMonth(0, 1),
              t.setUTCHours(0, 0, 0, 0);
          },
          function (t, n) {
            t.setUTCFullYear(t.getUTCFullYear() + n * e);
          },
        );
  };
  function Ei(e, t) {
    return e == null || t == null
      ? NaN
      : e < t
      ? -1
      : e > t
      ? 1
      : e >= t
      ? 0
      : NaN;
  }
  function Ni(e) {
    let t = e,
      n = e,
      o = e;
    e.length !== 2 &&
      ((t = (m, h) => e(m) - h), (n = Ei), (o = (m, h) => Ei(e(m), h)));
    function l(m, h, y = 0, p = m.length) {
      if (y < p) {
        if (n(h, h) !== 0) return p;
        do {
          const w = (y + p) >>> 1;
          o(m[w], h) < 0 ? (y = w + 1) : (p = w);
        } while (y < p);
      }
      return y;
    }
    function c(m, h, y = 0, p = m.length) {
      if (y < p) {
        if (n(h, h) !== 0) return p;
        do {
          const w = (y + p) >>> 1;
          o(m[w], h) <= 0 ? (y = w + 1) : (p = w);
        } while (y < p);
      }
      return y;
    }
    function d(m, h, y = 0, p = m.length) {
      const w = l(m, h, y, p - 1);
      return w > y && t(m[w - 1], h) > -t(m[w], h) ? w - 1 : w;
    }
    return { left: l, center: d, right: c };
  }
  function fl(e) {
    return e === null ? NaN : +e;
  }
  const cl = Ni(Ei).right;
  Ni(fl).center;
  var Ii = Math.sqrt(50),
    Ci = Math.sqrt(10),
    Ai = Math.sqrt(2);
  function dl(e, t, n) {
    var o,
      l = -1,
      c,
      d,
      m;
    if (((t = +t), (e = +e), (n = +n), e === t && n > 0)) return [e];
    if (
      ((o = t < e) && ((c = e), (e = t), (t = c)),
      (m = Ka(e, t, n)) === 0 || !isFinite(m))
    )
      return [];
    if (m > 0) {
      let h = Math.round(e / m),
        y = Math.round(t / m);
      for (
        h * m < e && ++h, y * m > t && --y, d = new Array((c = y - h + 1));
        ++l < c;

      )
        d[l] = (h + l) * m;
    } else {
      m = -m;
      let h = Math.round(e * m),
        y = Math.round(t * m);
      for (
        h / m < e && ++h, y / m > t && --y, d = new Array((c = y - h + 1));
        ++l < c;

      )
        d[l] = (h + l) / m;
    }
    return o && d.reverse(), d;
  }
  function Ka(e, t, n) {
    var o = (t - e) / Math.max(0, n),
      l = Math.floor(Math.log(o) / Math.LN10),
      c = o / Math.pow(10, l);
    return l >= 0
      ? (c >= Ii ? 10 : c >= Ci ? 5 : c >= Ai ? 2 : 1) * Math.pow(10, l)
      : -Math.pow(10, -l) / (c >= Ii ? 10 : c >= Ci ? 5 : c >= Ai ? 2 : 1);
  }
  function Fi(e, t, n) {
    var o = Math.abs(t - e) / Math.max(0, n),
      l = Math.pow(10, Math.floor(Math.log(o) / Math.LN10)),
      c = o / l;
    return (
      c >= Ii ? (l *= 10) : c >= Ci ? (l *= 5) : c >= Ai && (l *= 2),
      t < e ? -l : l
    );
  }
  function hl(e, t, n, o, l, c) {
    const d = [
      [Xn, 1, Tt],
      [Xn, 5, 5 * Tt],
      [Xn, 15, 15 * Tt],
      [Xn, 30, 30 * Tt],
      [c, 1, ft],
      [c, 5, 5 * ft],
      [c, 15, 15 * ft],
      [c, 30, 30 * ft],
      [l, 1, Bt],
      [l, 3, 3 * Bt],
      [l, 6, 6 * Bt],
      [l, 12, 12 * Bt],
      [o, 1, Gt],
      [o, 2, 2 * Gt],
      [n, 1, Oi],
      [t, 1, Ga],
      [t, 3, 3 * Ga],
      [e, 1, Mi],
    ];
    function m(y, p, w) {
      const k = p < y;
      k && ([y, p] = [p, y]);
      const N = w && typeof w.range == "function" ? w : h(y, p, w),
        T = N ? N.range(y, +p + 1) : [];
      return k ? T.reverse() : T;
    }
    function h(y, p, w) {
      const k = Math.abs(p - y) / w,
        N = Ni(([, , F]) => F).right(d, k);
      if (N === d.length) return e.every(Fi(y / Mi, p / Mi, w));
      if (N === 0) return Ti.every(Math.max(Fi(y, p, w), 1));
      const [T, H] = d[k / d[N - 1][2] < d[N][2] / k ? N - 1 : N];
      return T.every(H);
    }
    return [m, h];
  }
  const [ml, gl] = hl(zt, Qa, Tn, Ee, Ut, Ot);
  function $a(e, t) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(e);
        break;
      default:
        this.range(t).domain(e);
        break;
    }
    return this;
  }
  function Li(e, t, n) {
    (e.prototype = t.prototype = n), (n.constructor = e);
  }
  function eo(e, t) {
    var n = Object.create(e.prototype);
    for (var o in t) n[o] = t[o];
    return n;
  }
  function er() {}
  var tr = 0.7,
    zr = 1 / tr,
    Mn = "\\s*([+-]?\\d+)\\s*",
    nr = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    ct = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    yl = /^#([0-9a-f]{3,8})$/,
    vl = new RegExp("^rgb\\(" + [Mn, Mn, Mn] + "\\)$"),
    _l = new RegExp("^rgb\\(" + [ct, ct, ct] + "\\)$"),
    pl = new RegExp("^rgba\\(" + [Mn, Mn, Mn, nr] + "\\)$"),
    bl = new RegExp("^rgba\\(" + [ct, ct, ct, nr] + "\\)$"),
    wl = new RegExp("^hsl\\(" + [nr, ct, ct] + "\\)$"),
    kl = new RegExp("^hsla\\(" + [nr, ct, ct, nr] + "\\)$"),
    to = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074,
    };
  Li(er, rr, {
    copy: function (e) {
      return Object.assign(new this.constructor(), this, e);
    },
    displayable: function () {
      return this.rgb().displayable();
    },
    hex: no,
    formatHex: no,
    formatHsl: Sl,
    formatRgb: ro,
    toString: ro,
  });
  function no() {
    return this.rgb().formatHex();
  }
  function Sl() {
    return uo(this).formatHsl();
  }
  function ro() {
    return this.rgb().formatRgb();
  }
  function rr(e) {
    var t, n;
    return (
      (e = (e + "").trim().toLowerCase()),
      (t = yl.exec(e))
        ? ((n = t[1].length),
          (t = parseInt(t[1], 16)),
          n === 6
            ? io(t)
            : n === 3
            ? new Ze(
                ((t >> 8) & 15) | ((t >> 4) & 240),
                ((t >> 4) & 15) | (t & 240),
                ((t & 15) << 4) | (t & 15),
                1,
              )
            : n === 8
            ? Rr(
                (t >> 24) & 255,
                (t >> 16) & 255,
                (t >> 8) & 255,
                (t & 255) / 255,
              )
            : n === 4
            ? Rr(
                ((t >> 12) & 15) | ((t >> 8) & 240),
                ((t >> 8) & 15) | ((t >> 4) & 240),
                ((t >> 4) & 15) | (t & 240),
                (((t & 15) << 4) | (t & 15)) / 255,
              )
            : null)
        : (t = vl.exec(e))
        ? new Ze(t[1], t[2], t[3], 1)
        : (t = _l.exec(e))
        ? new Ze((t[1] * 255) / 100, (t[2] * 255) / 100, (t[3] * 255) / 100, 1)
        : (t = pl.exec(e))
        ? Rr(t[1], t[2], t[3], t[4])
        : (t = bl.exec(e))
        ? Rr((t[1] * 255) / 100, (t[2] * 255) / 100, (t[3] * 255) / 100, t[4])
        : (t = wl.exec(e))
        ? so(t[1], t[2] / 100, t[3] / 100, 1)
        : (t = kl.exec(e))
        ? so(t[1], t[2] / 100, t[3] / 100, t[4])
        : to.hasOwnProperty(e)
        ? io(to[e])
        : e === "transparent"
        ? new Ze(NaN, NaN, NaN, 0)
        : null
    );
  }
  function io(e) {
    return new Ze((e >> 16) & 255, (e >> 8) & 255, e & 255, 1);
  }
  function Rr(e, t, n, o) {
    return o <= 0 && (e = t = n = NaN), new Ze(e, t, n, o);
  }
  function Tl(e) {
    return (
      e instanceof er || (e = rr(e)),
      e ? ((e = e.rgb()), new Ze(e.r, e.g, e.b, e.opacity)) : new Ze()
    );
  }
  function Ui(e, t, n, o) {
    return arguments.length === 1 ? Tl(e) : new Ze(e, t, n, o == null ? 1 : o);
  }
  function Ze(e, t, n, o) {
    (this.r = +e), (this.g = +t), (this.b = +n), (this.opacity = +o);
  }
  Li(
    Ze,
    Ui,
    eo(er, {
      brighter: function (e) {
        return (
          (e = e == null ? zr : Math.pow(zr, e)),
          new Ze(this.r * e, this.g * e, this.b * e, this.opacity)
        );
      },
      darker: function (e) {
        return (
          (e = e == null ? tr : Math.pow(tr, e)),
          new Ze(this.r * e, this.g * e, this.b * e, this.opacity)
        );
      },
      rgb: function () {
        return this;
      },
      displayable: function () {
        return (
          -0.5 <= this.r &&
          this.r < 255.5 &&
          -0.5 <= this.g &&
          this.g < 255.5 &&
          -0.5 <= this.b &&
          this.b < 255.5 &&
          0 <= this.opacity &&
          this.opacity <= 1
        );
      },
      hex: ao,
      formatHex: ao,
      formatRgb: oo,
      toString: oo,
    }),
  );
  function ao() {
    return "#" + zi(this.r) + zi(this.g) + zi(this.b);
  }
  function oo() {
    var e = this.opacity;
    return (
      (e = isNaN(e) ? 1 : Math.max(0, Math.min(1, e))),
      (e === 1 ? "rgb(" : "rgba(") +
        Math.max(0, Math.min(255, Math.round(this.r) || 0)) +
        ", " +
        Math.max(0, Math.min(255, Math.round(this.g) || 0)) +
        ", " +
        Math.max(0, Math.min(255, Math.round(this.b) || 0)) +
        (e === 1 ? ")" : ", " + e + ")")
    );
  }
  function zi(e) {
    return (
      (e = Math.max(0, Math.min(255, Math.round(e) || 0))),
      (e < 16 ? "0" : "") + e.toString(16)
    );
  }
  function so(e, t, n, o) {
    return (
      o <= 0
        ? (e = t = n = NaN)
        : n <= 0 || n >= 1
        ? (e = t = NaN)
        : t <= 0 && (e = NaN),
      new dt(e, t, n, o)
    );
  }
  function uo(e) {
    if (e instanceof dt) return new dt(e.h, e.s, e.l, e.opacity);
    if ((e instanceof er || (e = rr(e)), !e)) return new dt();
    if (e instanceof dt) return e;
    e = e.rgb();
    var t = e.r / 255,
      n = e.g / 255,
      o = e.b / 255,
      l = Math.min(t, n, o),
      c = Math.max(t, n, o),
      d = NaN,
      m = c - l,
      h = (c + l) / 2;
    return (
      m
        ? (t === c
            ? (d = (n - o) / m + (n < o) * 6)
            : n === c
            ? (d = (o - t) / m + 2)
            : (d = (t - n) / m + 4),
          (m /= h < 0.5 ? c + l : 2 - c - l),
          (d *= 60))
        : (m = h > 0 && h < 1 ? 0 : d),
      new dt(d, m, h, e.opacity)
    );
  }
  function Ol(e, t, n, o) {
    return arguments.length === 1 ? uo(e) : new dt(e, t, n, o == null ? 1 : o);
  }
  function dt(e, t, n, o) {
    (this.h = +e), (this.s = +t), (this.l = +n), (this.opacity = +o);
  }
  Li(
    dt,
    Ol,
    eo(er, {
      brighter: function (e) {
        return (
          (e = e == null ? zr : Math.pow(zr, e)),
          new dt(this.h, this.s, this.l * e, this.opacity)
        );
      },
      darker: function (e) {
        return (
          (e = e == null ? tr : Math.pow(tr, e)),
          new dt(this.h, this.s, this.l * e, this.opacity)
        );
      },
      rgb: function () {
        var e = (this.h % 360) + (this.h < 0) * 360,
          t = isNaN(e) || isNaN(this.s) ? 0 : this.s,
          n = this.l,
          o = n + (n < 0.5 ? n : 1 - n) * t,
          l = 2 * n - o;
        return new Ze(
          Ri(e >= 240 ? e - 240 : e + 120, l, o),
          Ri(e, l, o),
          Ri(e < 120 ? e + 240 : e - 120, l, o),
          this.opacity,
        );
      },
      displayable: function () {
        return (
          ((0 <= this.s && this.s <= 1) || isNaN(this.s)) &&
          0 <= this.l &&
          this.l <= 1 &&
          0 <= this.opacity &&
          this.opacity <= 1
        );
      },
      formatHsl: function () {
        var e = this.opacity;
        return (
          (e = isNaN(e) ? 1 : Math.max(0, Math.min(1, e))),
          (e === 1 ? "hsl(" : "hsla(") +
            (this.h || 0) +
            ", " +
            (this.s || 0) * 100 +
            "%, " +
            (this.l || 0) * 100 +
            "%" +
            (e === 1 ? ")" : ", " + e + ")")
        );
      },
    }),
  );
  function Ri(e, t, n) {
    return (
      (e < 60
        ? t + ((n - t) * e) / 60
        : e < 180
        ? n
        : e < 240
        ? t + ((n - t) * (240 - e)) / 60
        : t) * 255
    );
  }
  var Pi = (e) => () => e;
  function Ml(e, t) {
    return function (n) {
      return e + n * t;
    };
  }
  function Dl(e, t, n) {
    return (
      (e = Math.pow(e, n)),
      (t = Math.pow(t, n) - e),
      (n = 1 / n),
      function (o) {
        return Math.pow(e + o * t, n);
      }
    );
  }
  function xl(e) {
    return (e = +e) == 1
      ? lo
      : function (t, n) {
          return n - t ? Dl(t, n, e) : Pi(isNaN(t) ? n : t);
        };
  }
  function lo(e, t) {
    var n = t - e;
    return n ? Ml(e, n) : Pi(isNaN(e) ? t : e);
  }
  var fo = (function e(t) {
    var n = xl(t);
    function o(l, c) {
      var d = n((l = Ui(l)).r, (c = Ui(c)).r),
        m = n(l.g, c.g),
        h = n(l.b, c.b),
        y = lo(l.opacity, c.opacity);
      return function (p) {
        return (
          (l.r = d(p)), (l.g = m(p)), (l.b = h(p)), (l.opacity = y(p)), l + ""
        );
      };
    }
    return (o.gamma = e), o;
  })(1);
  function El(e, t) {
    t || (t = []);
    var n = e ? Math.min(t.length, e.length) : 0,
      o = t.slice(),
      l;
    return function (c) {
      for (l = 0; l < n; ++l) o[l] = e[l] * (1 - c) + t[l] * c;
      return o;
    };
  }
  function Nl(e) {
    return ArrayBuffer.isView(e) && !(e instanceof DataView);
  }
  function Il(e, t) {
    var n = t ? t.length : 0,
      o = e ? Math.min(n, e.length) : 0,
      l = new Array(o),
      c = new Array(n),
      d;
    for (d = 0; d < o; ++d) l[d] = Hi(e[d], t[d]);
    for (; d < n; ++d) c[d] = t[d];
    return function (m) {
      for (d = 0; d < o; ++d) c[d] = l[d](m);
      return c;
    };
  }
  function Cl(e, t) {
    var n = new Date();
    return (
      (e = +e),
      (t = +t),
      function (o) {
        return n.setTime(e * (1 - o) + t * o), n;
      }
    );
  }
  function Pr(e, t) {
    return (
      (e = +e),
      (t = +t),
      function (n) {
        return e * (1 - n) + t * n;
      }
    );
  }
  function Al(e, t) {
    var n = {},
      o = {},
      l;
    (e === null || typeof e != "object") && (e = {}),
      (t === null || typeof t != "object") && (t = {});
    for (l in t) l in e ? (n[l] = Hi(e[l], t[l])) : (o[l] = t[l]);
    return function (c) {
      for (l in n) o[l] = n[l](c);
      return o;
    };
  }
  var Vi = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    Wi = new RegExp(Vi.source, "g");
  function Fl(e) {
    return function () {
      return e;
    };
  }
  function Ll(e) {
    return function (t) {
      return e(t) + "";
    };
  }
  function Ul(e, t) {
    var n = (Vi.lastIndex = Wi.lastIndex = 0),
      o,
      l,
      c,
      d = -1,
      m = [],
      h = [];
    for (e = e + "", t = t + ""; (o = Vi.exec(e)) && (l = Wi.exec(t)); )
      (c = l.index) > n &&
        ((c = t.slice(n, c)), m[d] ? (m[d] += c) : (m[++d] = c)),
        (o = o[0]) === (l = l[0])
          ? m[d]
            ? (m[d] += l)
            : (m[++d] = l)
          : ((m[++d] = null), h.push({ i: d, x: Pr(o, l) })),
        (n = Wi.lastIndex);
    return (
      n < t.length && ((c = t.slice(n)), m[d] ? (m[d] += c) : (m[++d] = c)),
      m.length < 2
        ? h[0]
          ? Ll(h[0].x)
          : Fl(t)
        : ((t = h.length),
          function (y) {
            for (var p = 0, w; p < t; ++p) m[(w = h[p]).i] = w.x(y);
            return m.join("");
          })
    );
  }
  function Hi(e, t) {
    var n = typeof t,
      o;
    return t == null || n === "boolean"
      ? Pi(t)
      : (n === "number"
          ? Pr
          : n === "string"
          ? (o = rr(t))
            ? ((t = o), fo)
            : Ul
          : t instanceof rr
          ? fo
          : t instanceof Date
          ? Cl
          : Nl(t)
          ? El
          : Array.isArray(t)
          ? Il
          : (typeof t.valueOf != "function" &&
              typeof t.toString != "function") ||
            isNaN(t)
          ? Al
          : Pr)(e, t);
  }
  function zl(e, t) {
    return (
      (e = +e),
      (t = +t),
      function (n) {
        return Math.round(e * (1 - n) + t * n);
      }
    );
  }
  function Rl(e) {
    return function () {
      return e;
    };
  }
  function Pl(e) {
    return +e;
  }
  var co = [0, 1];
  function Dn(e) {
    return e;
  }
  function Zi(e, t) {
    return (t -= e = +e)
      ? function (n) {
          return (n - e) / t;
        }
      : Rl(isNaN(t) ? NaN : 0.5);
  }
  function Vl(e, t) {
    var n;
    return (
      e > t && ((n = e), (e = t), (t = n)),
      function (o) {
        return Math.max(e, Math.min(t, o));
      }
    );
  }
  function Wl(e, t, n) {
    var o = e[0],
      l = e[1],
      c = t[0],
      d = t[1];
    return (
      l < o ? ((o = Zi(l, o)), (c = n(d, c))) : ((o = Zi(o, l)), (c = n(c, d))),
      function (m) {
        return c(o(m));
      }
    );
  }
  function Hl(e, t, n) {
    var o = Math.min(e.length, t.length) - 1,
      l = new Array(o),
      c = new Array(o),
      d = -1;
    for (
      e[o] < e[0] && ((e = e.slice().reverse()), (t = t.slice().reverse()));
      ++d < o;

    )
      (l[d] = Zi(e[d], e[d + 1])), (c[d] = n(t[d], t[d + 1]));
    return function (m) {
      var h = cl(e, m, 1, o) - 1;
      return c[h](l[h](m));
    };
  }
  function ho(e, t) {
    return t
      .domain(e.domain())
      .range(e.range())
      .interpolate(e.interpolate())
      .clamp(e.clamp())
      .unknown(e.unknown());
  }
  function Zl() {
    var e = co,
      t = co,
      n = Hi,
      o,
      l,
      c,
      d = Dn,
      m,
      h,
      y;
    function p() {
      var k = Math.min(e.length, t.length);
      return (
        d !== Dn && (d = Vl(e[0], e[k - 1])),
        (m = k > 2 ? Hl : Wl),
        (h = y = null),
        w
      );
    }
    function w(k) {
      return k == null || isNaN((k = +k))
        ? c
        : (h || (h = m(e.map(o), t, n)))(o(d(k)));
    }
    return (
      (w.invert = function (k) {
        return d(l((y || (y = m(t, e.map(o), Pr)))(k)));
      }),
      (w.domain = function (k) {
        return arguments.length ? ((e = Array.from(k, Pl)), p()) : e.slice();
      }),
      (w.range = function (k) {
        return arguments.length ? ((t = Array.from(k)), p()) : t.slice();
      }),
      (w.rangeRound = function (k) {
        return (t = Array.from(k)), (n = zl), p();
      }),
      (w.clamp = function (k) {
        return arguments.length ? ((d = k ? !0 : Dn), p()) : d !== Dn;
      }),
      (w.interpolate = function (k) {
        return arguments.length ? ((n = k), p()) : n;
      }),
      (w.unknown = function (k) {
        return arguments.length ? ((c = k), w) : c;
      }),
      function (k, N) {
        return (o = k), (l = N), p();
      }
    );
  }
  function mo() {
    return Zl()(Dn, Dn);
  }
  function jl(e) {
    return Math.abs((e = Math.round(e))) >= 1e21
      ? e.toLocaleString("en").replace(/,/g, "")
      : e.toString(10);
  }
  function Vr(e, t) {
    if (
      (n = (e = t ? e.toExponential(t - 1) : e.toExponential()).indexOf("e")) <
      0
    )
      return null;
    var n,
      o = e.slice(0, n);
    return [o.length > 1 ? o[0] + o.slice(2) : o, +e.slice(n + 1)];
  }
  function xn(e) {
    return (e = Vr(Math.abs(e))), e ? e[1] : NaN;
  }
  function Yl(e, t) {
    return function (n, o) {
      for (
        var l = n.length, c = [], d = 0, m = e[0], h = 0;
        l > 0 &&
        m > 0 &&
        (h + m + 1 > o && (m = Math.max(1, o - h)),
        c.push(n.substring((l -= m), l + m)),
        !((h += m + 1) > o));

      )
        m = e[(d = (d + 1) % e.length)];
      return c.reverse().join(t);
    };
  }
  function ql(e) {
    return function (t) {
      return t.replace(/[0-9]/g, function (n) {
        return e[+n];
      });
    };
  }
  var Jl =
    /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function Wr(e) {
    if (!(t = Jl.exec(e))) throw new Error("invalid format: " + e);
    var t;
    return new ji({
      fill: t[1],
      align: t[2],
      sign: t[3],
      symbol: t[4],
      zero: t[5],
      width: t[6],
      comma: t[7],
      precision: t[8] && t[8].slice(1),
      trim: t[9],
      type: t[10],
    });
  }
  Wr.prototype = ji.prototype;
  function ji(e) {
    (this.fill = e.fill === void 0 ? " " : e.fill + ""),
      (this.align = e.align === void 0 ? ">" : e.align + ""),
      (this.sign = e.sign === void 0 ? "-" : e.sign + ""),
      (this.symbol = e.symbol === void 0 ? "" : e.symbol + ""),
      (this.zero = !!e.zero),
      (this.width = e.width === void 0 ? void 0 : +e.width),
      (this.comma = !!e.comma),
      (this.precision = e.precision === void 0 ? void 0 : +e.precision),
      (this.trim = !!e.trim),
      (this.type = e.type === void 0 ? "" : e.type + "");
  }
  ji.prototype.toString = function () {
    return (
      this.fill +
      this.align +
      this.sign +
      this.symbol +
      (this.zero ? "0" : "") +
      (this.width === void 0 ? "" : Math.max(1, this.width | 0)) +
      (this.comma ? "," : "") +
      (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) +
      (this.trim ? "~" : "") +
      this.type
    );
  };
  function Bl(e) {
    e: for (var t = e.length, n = 1, o = -1, l; n < t; ++n)
      switch (e[n]) {
        case ".":
          o = l = n;
          break;
        case "0":
          o === 0 && (o = n), (l = n);
          break;
        default:
          if (!+e[n]) break e;
          o > 0 && (o = 0);
          break;
      }
    return o > 0 ? e.slice(0, o) + e.slice(l + 1) : e;
  }
  var go;
  function Gl(e, t) {
    var n = Vr(e, t);
    if (!n) return e + "";
    var o = n[0],
      l = n[1],
      c = l - (go = Math.max(-8, Math.min(8, Math.floor(l / 3))) * 3) + 1,
      d = o.length;
    return c === d
      ? o
      : c > d
      ? o + new Array(c - d + 1).join("0")
      : c > 0
      ? o.slice(0, c) + "." + o.slice(c)
      : "0." + new Array(1 - c).join("0") + Vr(e, Math.max(0, t + c - 1))[0];
  }
  function yo(e, t) {
    var n = Vr(e, t);
    if (!n) return e + "";
    var o = n[0],
      l = n[1];
    return l < 0
      ? "0." + new Array(-l).join("0") + o
      : o.length > l + 1
      ? o.slice(0, l + 1) + "." + o.slice(l + 1)
      : o + new Array(l - o.length + 2).join("0");
  }
  var vo = {
    "%": (e, t) => (e * 100).toFixed(t),
    b: (e) => Math.round(e).toString(2),
    c: (e) => e + "",
    d: jl,
    e: (e, t) => e.toExponential(t),
    f: (e, t) => e.toFixed(t),
    g: (e, t) => e.toPrecision(t),
    o: (e) => Math.round(e).toString(8),
    p: (e, t) => yo(e * 100, t),
    r: yo,
    s: Gl,
    X: (e) => Math.round(e).toString(16).toUpperCase(),
    x: (e) => Math.round(e).toString(16),
  };
  function _o(e) {
    return e;
  }
  var po = Array.prototype.map,
    bo = [
      "y",
      "z",
      "a",
      "f",
      "p",
      "n",
      "\xB5",
      "m",
      "",
      "k",
      "M",
      "G",
      "T",
      "P",
      "E",
      "Z",
      "Y",
    ];
  function Ql(e) {
    var t =
        e.grouping === void 0 || e.thousands === void 0
          ? _o
          : Yl(po.call(e.grouping, Number), e.thousands + ""),
      n = e.currency === void 0 ? "" : e.currency[0] + "",
      o = e.currency === void 0 ? "" : e.currency[1] + "",
      l = e.decimal === void 0 ? "." : e.decimal + "",
      c = e.numerals === void 0 ? _o : ql(po.call(e.numerals, String)),
      d = e.percent === void 0 ? "%" : e.percent + "",
      m = e.minus === void 0 ? "\u2212" : e.minus + "",
      h = e.nan === void 0 ? "NaN" : e.nan + "";
    function y(w) {
      w = Wr(w);
      var k = w.fill,
        N = w.align,
        T = w.sign,
        H = w.symbol,
        F = w.zero,
        I = w.width,
        R = w.comma,
        te = w.precision,
        ne = w.trim,
        me = w.type;
      me === "n"
        ? ((R = !0), (me = "g"))
        : vo[me] || (te === void 0 && (te = 12), (ne = !0), (me = "g")),
        (F || (k === "0" && N === "=")) && ((F = !0), (k = "0"), (N = "="));
      var L =
          H === "$"
            ? n
            : H === "#" && /[boxX]/.test(me)
            ? "0" + me.toLowerCase()
            : "",
        Z = H === "$" ? o : /[%p]/.test(me) ? d : "",
        O = vo[me],
        ue = /[defgprs%]/.test(me);
      te =
        te === void 0
          ? 6
          : /[gprs]/.test(me)
          ? Math.max(1, Math.min(21, te))
          : Math.max(0, Math.min(20, te));
      function oe(q) {
        var ve = L,
          Se = Z,
          Fe,
          ke,
          V;
        if (me === "c") (Se = O(q) + Se), (q = "");
        else {
          q = +q;
          var K = q < 0 || 1 / q < 0;
          if (
            ((q = isNaN(q) ? h : O(Math.abs(q), te)),
            ne && (q = Bl(q)),
            K && +q == 0 && T !== "+" && (K = !1),
            (ve =
              (K ? (T === "(" ? T : m) : T === "-" || T === "(" ? "" : T) + ve),
            (Se =
              (me === "s" ? bo[8 + go / 3] : "") +
              Se +
              (K && T === "(" ? ")" : "")),
            ue)
          ) {
            for (Fe = -1, ke = q.length; ++Fe < ke; )
              if (((V = q.charCodeAt(Fe)), 48 > V || V > 57)) {
                (Se = (V === 46 ? l + q.slice(Fe + 1) : q.slice(Fe)) + Se),
                  (q = q.slice(0, Fe));
                break;
              }
          }
        }
        R && !F && (q = t(q, 1 / 0));
        var Ne = ve.length + q.length + Se.length,
          Le = Ne < I ? new Array(I - Ne + 1).join(k) : "";
        switch (
          (R &&
            F &&
            ((q = t(Le + q, Le.length ? I - Se.length : 1 / 0)), (Le = "")),
          N)
        ) {
          case "<":
            q = ve + q + Se + Le;
            break;
          case "=":
            q = ve + Le + q + Se;
            break;
          case "^":
            q = Le.slice(0, (Ne = Le.length >> 1)) + ve + q + Se + Le.slice(Ne);
            break;
          default:
            q = Le + ve + q + Se;
            break;
        }
        return c(q);
      }
      return (
        (oe.toString = function () {
          return w + "";
        }),
        oe
      );
    }
    function p(w, k) {
      var N = y(((w = Wr(w)), (w.type = "f"), w)),
        T = Math.max(-8, Math.min(8, Math.floor(xn(k) / 3))) * 3,
        H = Math.pow(10, -T),
        F = bo[8 + T / 3];
      return function (I) {
        return N(H * I) + F;
      };
    }
    return { format: y, formatPrefix: p };
  }
  var Hr, wo, ko;
  Xl({ thousands: ",", grouping: [3], currency: ["$", ""] });
  function Xl(e) {
    return (Hr = Ql(e)), (wo = Hr.format), (ko = Hr.formatPrefix), Hr;
  }
  function Kl(e) {
    return Math.max(0, -xn(Math.abs(e)));
  }
  function $l(e, t) {
    return Math.max(
      0,
      Math.max(-8, Math.min(8, Math.floor(xn(t) / 3))) * 3 - xn(Math.abs(e)),
    );
  }
  function ef(e, t) {
    return (
      (e = Math.abs(e)), (t = Math.abs(t) - e), Math.max(0, xn(t) - xn(e)) + 1
    );
  }
  function tf(e, t, n, o) {
    var l = Fi(e, t, n),
      c;
    switch (((o = Wr(o == null ? ",f" : o)), o.type)) {
      case "s": {
        var d = Math.max(Math.abs(e), Math.abs(t));
        return (
          o.precision == null && !isNaN((c = $l(l, d))) && (o.precision = c),
          ko(o, d)
        );
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        o.precision == null &&
          !isNaN((c = ef(l, Math.max(Math.abs(e), Math.abs(t))))) &&
          (o.precision = c - (o.type === "e"));
        break;
      }
      case "f":
      case "%": {
        o.precision == null &&
          !isNaN((c = Kl(l))) &&
          (o.precision = c - (o.type === "%") * 2);
        break;
      }
    }
    return wo(o);
  }
  function nf(e) {
    var t = e.domain;
    return (
      (e.ticks = function (n) {
        var o = t();
        return dl(o[0], o[o.length - 1], n == null ? 10 : n);
      }),
      (e.tickFormat = function (n, o) {
        var l = t();
        return tf(l[0], l[l.length - 1], n == null ? 10 : n, o);
      }),
      (e.nice = function (n) {
        n == null && (n = 10);
        var o = t(),
          l = 0,
          c = o.length - 1,
          d = o[l],
          m = o[c],
          h,
          y,
          p = 10;
        for (
          m < d && ((y = d), (d = m), (m = y), (y = l), (l = c), (c = y));
          p-- > 0;

        ) {
          if (((y = Ka(d, m, n)), y === h)) return (o[l] = d), (o[c] = m), t(o);
          if (y > 0) (d = Math.floor(d / y) * y), (m = Math.ceil(m / y) * y);
          else if (y < 0)
            (d = Math.ceil(d * y) / y), (m = Math.floor(m * y) / y);
          else break;
          h = y;
        }
        return e;
      }),
      e
    );
  }
  function So() {
    var e = mo();
    return (
      (e.copy = function () {
        return ho(e, So());
      }),
      $a.apply(e, arguments),
      nf(e)
    );
  }
  function rf(e, t) {
    e = e.slice();
    var n = 0,
      o = e.length - 1,
      l = e[n],
      c = e[o],
      d;
    return (
      c < l && ((d = n), (n = o), (o = d), (d = l), (l = c), (c = d)),
      (e[n] = t.floor(l)),
      (e[o] = t.ceil(c)),
      e
    );
  }
  function Yi(e) {
    if (0 <= e.y && e.y < 100) {
      var t = new Date(-1, e.m, e.d, e.H, e.M, e.S, e.L);
      return t.setFullYear(e.y), t;
    }
    return new Date(e.y, e.m, e.d, e.H, e.M, e.S, e.L);
  }
  function qi(e) {
    if (0 <= e.y && e.y < 100) {
      var t = new Date(Date.UTC(-1, e.m, e.d, e.H, e.M, e.S, e.L));
      return t.setUTCFullYear(e.y), t;
    }
    return new Date(Date.UTC(e.y, e.m, e.d, e.H, e.M, e.S, e.L));
  }
  function ir(e, t, n) {
    return { y: e, m: t, d: n, H: 0, M: 0, S: 0, L: 0 };
  }
  function af(e) {
    var t = e.dateTime,
      n = e.date,
      o = e.time,
      l = e.periods,
      c = e.days,
      d = e.shortDays,
      m = e.months,
      h = e.shortMonths,
      y = ar(l),
      p = or(l),
      w = ar(c),
      k = or(c),
      N = ar(d),
      T = or(d),
      H = ar(m),
      F = or(m),
      I = ar(h),
      R = or(h),
      te = {
        a: K,
        A: Ne,
        b: Le,
        B: Kt,
        c: null,
        d: Eo,
        e: Eo,
        f: xf,
        g: Rf,
        G: Vf,
        H: Of,
        I: Mf,
        j: Df,
        L: No,
        m: Ef,
        M: Nf,
        p: $t,
        q: en,
        Q: Uo,
        s: zo,
        S: If,
        u: Cf,
        U: Af,
        V: Ff,
        w: Lf,
        W: Uf,
        x: null,
        X: null,
        y: zf,
        Y: Pf,
        Z: Wf,
        "%": Lo,
      },
      ne = {
        a: tn,
        A: nn,
        b: rn,
        B: an,
        c: null,
        d: Co,
        e: Co,
        f: Yf,
        g: tc,
        G: rc,
        H: Hf,
        I: Zf,
        j: jf,
        L: Ao,
        m: qf,
        M: Jf,
        p: on,
        q: Cn,
        Q: Uo,
        s: zo,
        S: Bf,
        u: Gf,
        U: Qf,
        V: Xf,
        w: Kf,
        W: $f,
        x: null,
        X: null,
        y: ec,
        Y: nc,
        Z: ic,
        "%": Lo,
      },
      me = {
        a: oe,
        A: q,
        b: ve,
        B: Se,
        c: Fe,
        d: Do,
        e: Do,
        f: wf,
        g: Mo,
        G: Oo,
        H: xo,
        I: xo,
        j: vf,
        L: bf,
        m: yf,
        M: _f,
        p: ue,
        q: gf,
        Q: Sf,
        s: Tf,
        S: pf,
        u: ff,
        U: cf,
        V: df,
        w: lf,
        W: hf,
        x: ke,
        X: V,
        y: Mo,
        Y: Oo,
        Z: mf,
        "%": kf,
      };
    (te.x = L(n, te)),
      (te.X = L(o, te)),
      (te.c = L(t, te)),
      (ne.x = L(n, ne)),
      (ne.X = L(o, ne)),
      (ne.c = L(t, ne));
    function L(P, re) {
      return function (se) {
        var x = [],
          B = -1,
          le = 0,
          Me = P.length,
          Ce,
          Be,
          Pt;
        for (se instanceof Date || (se = new Date(+se)); ++B < Me; )
          P.charCodeAt(B) === 37 &&
            (x.push(P.slice(le, B)),
            (Be = To[(Ce = P.charAt(++B))]) != null
              ? (Ce = P.charAt(++B))
              : (Be = Ce === "e" ? " " : "0"),
            (Pt = re[Ce]) && (Ce = Pt(se, Be)),
            x.push(Ce),
            (le = B + 1));
        return x.push(P.slice(le, B)), x.join("");
      };
    }
    function Z(P, re) {
      return function (se) {
        var x = ir(1900, void 0, 1),
          B = O(x, P, (se += ""), 0),
          le,
          Me;
        if (B != se.length) return null;
        if ("Q" in x) return new Date(x.Q);
        if ("s" in x) return new Date(x.s * 1e3 + ("L" in x ? x.L : 0));
        if (
          (re && !("Z" in x) && (x.Z = 0),
          "p" in x && (x.H = (x.H % 12) + x.p * 12),
          x.m === void 0 && (x.m = "q" in x ? x.q : 0),
          "V" in x)
        ) {
          if (x.V < 1 || x.V > 53) return null;
          "w" in x || (x.w = 1),
            "Z" in x
              ? ((le = qi(ir(x.y, 0, 1))),
                (Me = le.getUTCDay()),
                (le = Me > 4 || Me === 0 ? xi.ceil(le) : xi(le)),
                (le = Xa.offset(le, (x.V - 1) * 7)),
                (x.y = le.getUTCFullYear()),
                (x.m = le.getUTCMonth()),
                (x.d = le.getUTCDate() + ((x.w + 6) % 7)))
              : ((le = Yi(ir(x.y, 0, 1))),
                (Me = le.getDay()),
                (le = Me > 4 || Me === 0 ? Di.ceil(le) : Di(le)),
                (le = Ee.offset(le, (x.V - 1) * 7)),
                (x.y = le.getFullYear()),
                (x.m = le.getMonth()),
                (x.d = le.getDate() + ((x.w + 6) % 7)));
        } else ("W" in x || "U" in x) && ("w" in x || (x.w = "u" in x ? x.u % 7 : "W" in x ? 1 : 0), (Me = "Z" in x ? qi(ir(x.y, 0, 1)).getUTCDay() : Yi(ir(x.y, 0, 1)).getDay()), (x.m = 0), (x.d = "W" in x ? ((x.w + 6) % 7) + x.W * 7 - ((Me + 5) % 7) : x.w + x.U * 7 - ((Me + 6) % 7)));
        return "Z" in x
          ? ((x.H += (x.Z / 100) | 0), (x.M += x.Z % 100), qi(x))
          : Yi(x);
      };
    }
    function O(P, re, se, x) {
      for (var B = 0, le = re.length, Me = se.length, Ce, Be; B < le; ) {
        if (x >= Me) return -1;
        if (((Ce = re.charCodeAt(B++)), Ce === 37)) {
          if (
            ((Ce = re.charAt(B++)),
            (Be = me[Ce in To ? re.charAt(B++) : Ce]),
            !Be || (x = Be(P, se, x)) < 0)
          )
            return -1;
        } else if (Ce != se.charCodeAt(x++)) return -1;
      }
      return x;
    }
    function ue(P, re, se) {
      var x = y.exec(re.slice(se));
      return x ? ((P.p = p.get(x[0].toLowerCase())), se + x[0].length) : -1;
    }
    function oe(P, re, se) {
      var x = N.exec(re.slice(se));
      return x ? ((P.w = T.get(x[0].toLowerCase())), se + x[0].length) : -1;
    }
    function q(P, re, se) {
      var x = w.exec(re.slice(se));
      return x ? ((P.w = k.get(x[0].toLowerCase())), se + x[0].length) : -1;
    }
    function ve(P, re, se) {
      var x = I.exec(re.slice(se));
      return x ? ((P.m = R.get(x[0].toLowerCase())), se + x[0].length) : -1;
    }
    function Se(P, re, se) {
      var x = H.exec(re.slice(se));
      return x ? ((P.m = F.get(x[0].toLowerCase())), se + x[0].length) : -1;
    }
    function Fe(P, re, se) {
      return O(P, t, re, se);
    }
    function ke(P, re, se) {
      return O(P, n, re, se);
    }
    function V(P, re, se) {
      return O(P, o, re, se);
    }
    function K(P) {
      return d[P.getDay()];
    }
    function Ne(P) {
      return c[P.getDay()];
    }
    function Le(P) {
      return h[P.getMonth()];
    }
    function Kt(P) {
      return m[P.getMonth()];
    }
    function $t(P) {
      return l[+(P.getHours() >= 12)];
    }
    function en(P) {
      return 1 + ~~(P.getMonth() / 3);
    }
    function tn(P) {
      return d[P.getUTCDay()];
    }
    function nn(P) {
      return c[P.getUTCDay()];
    }
    function rn(P) {
      return h[P.getUTCMonth()];
    }
    function an(P) {
      return m[P.getUTCMonth()];
    }
    function on(P) {
      return l[+(P.getUTCHours() >= 12)];
    }
    function Cn(P) {
      return 1 + ~~(P.getUTCMonth() / 3);
    }
    return {
      format: function (P) {
        var re = L((P += ""), te);
        return (
          (re.toString = function () {
            return P;
          }),
          re
        );
      },
      parse: function (P) {
        var re = Z((P += ""), !1);
        return (
          (re.toString = function () {
            return P;
          }),
          re
        );
      },
      utcFormat: function (P) {
        var re = L((P += ""), ne);
        return (
          (re.toString = function () {
            return P;
          }),
          re
        );
      },
      utcParse: function (P) {
        var re = Z((P += ""), !0);
        return (
          (re.toString = function () {
            return P;
          }),
          re
        );
      },
    };
  }
  var To = { "-": "", _: " ", 0: "0" },
    Ie = /^\s*\d+/,
    of = /^%/,
    sf = /[\\^$*+?|[\]().{}]/g;
  function he(e, t, n) {
    var o = e < 0 ? "-" : "",
      l = (o ? -e : e) + "",
      c = l.length;
    return o + (c < n ? new Array(n - c + 1).join(t) + l : l);
  }
  function uf(e) {
    return e.replace(sf, "\\$&");
  }
  function ar(e) {
    return new RegExp("^(?:" + e.map(uf).join("|") + ")", "i");
  }
  function or(e) {
    return new Map(e.map((t, n) => [t.toLowerCase(), n]));
  }
  function lf(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 1));
    return o ? ((e.w = +o[0]), n + o[0].length) : -1;
  }
  function ff(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 1));
    return o ? ((e.u = +o[0]), n + o[0].length) : -1;
  }
  function cf(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 2));
    return o ? ((e.U = +o[0]), n + o[0].length) : -1;
  }
  function df(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 2));
    return o ? ((e.V = +o[0]), n + o[0].length) : -1;
  }
  function hf(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 2));
    return o ? ((e.W = +o[0]), n + o[0].length) : -1;
  }
  function Oo(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 4));
    return o ? ((e.y = +o[0]), n + o[0].length) : -1;
  }
  function Mo(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 2));
    return o
      ? ((e.y = +o[0] + (+o[0] > 68 ? 1900 : 2e3)), n + o[0].length)
      : -1;
  }
  function mf(e, t, n) {
    var o = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n, n + 6));
    return o
      ? ((e.Z = o[1] ? 0 : -(o[2] + (o[3] || "00"))), n + o[0].length)
      : -1;
  }
  function gf(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 1));
    return o ? ((e.q = o[0] * 3 - 3), n + o[0].length) : -1;
  }
  function yf(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 2));
    return o ? ((e.m = o[0] - 1), n + o[0].length) : -1;
  }
  function Do(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 2));
    return o ? ((e.d = +o[0]), n + o[0].length) : -1;
  }
  function vf(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 3));
    return o ? ((e.m = 0), (e.d = +o[0]), n + o[0].length) : -1;
  }
  function xo(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 2));
    return o ? ((e.H = +o[0]), n + o[0].length) : -1;
  }
  function _f(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 2));
    return o ? ((e.M = +o[0]), n + o[0].length) : -1;
  }
  function pf(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 2));
    return o ? ((e.S = +o[0]), n + o[0].length) : -1;
  }
  function bf(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 3));
    return o ? ((e.L = +o[0]), n + o[0].length) : -1;
  }
  function wf(e, t, n) {
    var o = Ie.exec(t.slice(n, n + 6));
    return o ? ((e.L = Math.floor(o[0] / 1e3)), n + o[0].length) : -1;
  }
  function kf(e, t, n) {
    var o = of.exec(t.slice(n, n + 1));
    return o ? n + o[0].length : -1;
  }
  function Sf(e, t, n) {
    var o = Ie.exec(t.slice(n));
    return o ? ((e.Q = +o[0]), n + o[0].length) : -1;
  }
  function Tf(e, t, n) {
    var o = Ie.exec(t.slice(n));
    return o ? ((e.s = +o[0]), n + o[0].length) : -1;
  }
  function Eo(e, t) {
    return he(e.getDate(), t, 2);
  }
  function Of(e, t) {
    return he(e.getHours(), t, 2);
  }
  function Mf(e, t) {
    return he(e.getHours() % 12 || 12, t, 2);
  }
  function Df(e, t) {
    return he(1 + Ee.count(zt(e), e), t, 3);
  }
  function No(e, t) {
    return he(e.getMilliseconds(), t, 3);
  }
  function xf(e, t) {
    return No(e, t) + "000";
  }
  function Ef(e, t) {
    return he(e.getMonth() + 1, t, 2);
  }
  function Nf(e, t) {
    return he(e.getMinutes(), t, 2);
  }
  function If(e, t) {
    return he(e.getSeconds(), t, 2);
  }
  function Cf(e) {
    var t = e.getDay();
    return t === 0 ? 7 : t;
  }
  function Af(e, t) {
    return he(Tn.count(zt(e) - 1, e), t, 2);
  }
  function Io(e) {
    var t = e.getDay();
    return t >= 4 || t === 0 ? Kn(e) : Kn.ceil(e);
  }
  function Ff(e, t) {
    return (e = Io(e)), he(Kn.count(zt(e), e) + (zt(e).getDay() === 4), t, 2);
  }
  function Lf(e) {
    return e.getDay();
  }
  function Uf(e, t) {
    return he(Di.count(zt(e) - 1, e), t, 2);
  }
  function zf(e, t) {
    return he(e.getFullYear() % 100, t, 2);
  }
  function Rf(e, t) {
    return (e = Io(e)), he(e.getFullYear() % 100, t, 2);
  }
  function Pf(e, t) {
    return he(e.getFullYear() % 1e4, t, 4);
  }
  function Vf(e, t) {
    var n = e.getDay();
    return (
      (e = n >= 4 || n === 0 ? Kn(e) : Kn.ceil(e)),
      he(e.getFullYear() % 1e4, t, 4)
    );
  }
  function Wf(e) {
    var t = e.getTimezoneOffset();
    return (
      (t > 0 ? "-" : ((t *= -1), "+")) +
      he((t / 60) | 0, "0", 2) +
      he(t % 60, "0", 2)
    );
  }
  function Co(e, t) {
    return he(e.getUTCDate(), t, 2);
  }
  function Hf(e, t) {
    return he(e.getUTCHours(), t, 2);
  }
  function Zf(e, t) {
    return he(e.getUTCHours() % 12 || 12, t, 2);
  }
  function jf(e, t) {
    return he(1 + Xa.count(On(e), e), t, 3);
  }
  function Ao(e, t) {
    return he(e.getUTCMilliseconds(), t, 3);
  }
  function Yf(e, t) {
    return Ao(e, t) + "000";
  }
  function qf(e, t) {
    return he(e.getUTCMonth() + 1, t, 2);
  }
  function Jf(e, t) {
    return he(e.getUTCMinutes(), t, 2);
  }
  function Bf(e, t) {
    return he(e.getUTCSeconds(), t, 2);
  }
  function Gf(e) {
    var t = e.getUTCDay();
    return t === 0 ? 7 : t;
  }
  function Qf(e, t) {
    return he(ll.count(On(e) - 1, e), t, 2);
  }
  function Fo(e) {
    var t = e.getUTCDay();
    return t >= 4 || t === 0 ? $n(e) : $n.ceil(e);
  }
  function Xf(e, t) {
    return (
      (e = Fo(e)), he($n.count(On(e), e) + (On(e).getUTCDay() === 4), t, 2)
    );
  }
  function Kf(e) {
    return e.getUTCDay();
  }
  function $f(e, t) {
    return he(xi.count(On(e) - 1, e), t, 2);
  }
  function ec(e, t) {
    return he(e.getUTCFullYear() % 100, t, 2);
  }
  function tc(e, t) {
    return (e = Fo(e)), he(e.getUTCFullYear() % 100, t, 2);
  }
  function nc(e, t) {
    return he(e.getUTCFullYear() % 1e4, t, 4);
  }
  function rc(e, t) {
    var n = e.getUTCDay();
    return (
      (e = n >= 4 || n === 0 ? $n(e) : $n.ceil(e)),
      he(e.getUTCFullYear() % 1e4, t, 4)
    );
  }
  function ic() {
    return "+0000";
  }
  function Lo() {
    return "%";
  }
  function Uo(e) {
    return +e;
  }
  function zo(e) {
    return Math.floor(+e / 1e3);
  }
  var En, Ro;
  ac({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ],
    shortMonths: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ],
  });
  function ac(e) {
    return (
      (En = af(e)), (Ro = En.format), En.parse, En.utcFormat, En.utcParse, En
    );
  }
  function oc(e) {
    return new Date(e);
  }
  function sc(e) {
    return e instanceof Date ? +e : +new Date(+e);
  }
  function Po(e, t, n, o, l, c, d, m, h, y) {
    var p = mo(),
      w = p.invert,
      k = p.domain,
      N = y(".%L"),
      T = y(":%S"),
      H = y("%I:%M"),
      F = y("%I %p"),
      I = y("%a %d"),
      R = y("%b %d"),
      te = y("%B"),
      ne = y("%Y");
    function me(L) {
      return (
        h(L) < L
          ? N
          : m(L) < L
          ? T
          : d(L) < L
          ? H
          : c(L) < L
          ? F
          : o(L) < L
          ? l(L) < L
            ? I
            : R
          : n(L) < L
          ? te
          : ne
      )(L);
    }
    return (
      (p.invert = function (L) {
        return new Date(w(L));
      }),
      (p.domain = function (L) {
        return arguments.length ? k(Array.from(L, sc)) : k().map(oc);
      }),
      (p.ticks = function (L) {
        var Z = k();
        return e(Z[0], Z[Z.length - 1], L == null ? 10 : L);
      }),
      (p.tickFormat = function (L, Z) {
        return Z == null ? me : y(Z);
      }),
      (p.nice = function (L) {
        var Z = k();
        return (
          (!L || typeof L.range != "function") &&
            (L = t(Z[0], Z[Z.length - 1], L == null ? 10 : L)),
          L ? k(rf(Z, L)) : p
        );
      }),
      (p.copy = function () {
        return ho(p, Po(e, t, n, o, l, c, d, m, h, y));
      }),
      p
    );
  }
  function Zr() {
    return $a.apply(
      Po(ml, gl, zt, Qa, Tn, Ee, Ut, Ot, Xn, Ro).domain([
        new Date(2e3, 0, 1),
        new Date(2e3, 0, 2),
      ]),
      arguments,
    );
  }
  function Nn(e, t) {
    if (!e) return "";
    let n = 0,
      o = 0,
      l = 0;
    e.length == 4
      ? ((n = "0x" + e[1] + e[1]),
        (o = "0x" + e[2] + e[2]),
        (l = "0x" + e[3] + e[3]))
      : ((n = "0x" + e[1] + e[2]),
        (o = "0x" + e[3] + e[4]),
        (l = "0x" + e[5] + e[6])),
      (n /= 255),
      (o /= 255),
      (l /= 255);
    const c = Math.min(n, o, l),
      d = Math.max(n, o, l),
      m = d - c;
    let h = 0,
      y = 0,
      p = 0;
    return (
      m == 0
        ? (h = 0)
        : d == n
        ? (h = ((o - l) / m) % 6)
        : d == o
        ? (h = (l - n) / m + 2)
        : (h = (n - o) / m + 4),
      (h = Math.round(h * 60)),
      h < 0 && (h += 360),
      (p = (d + c) / 2),
      (y = m == 0 ? 0 : m / (1 - Math.abs(2 * p - 1))),
      (y = +(y * 100).toFixed(1)),
      (p = +(p * 100).toFixed(1)),
      "hsl(" + h + "," + y / 2 + "%," + t + "%)"
    );
  }
  var fe;
  (function (e) {
    (e.FREE = "free"),
      (e.BUSY = "busy"),
      (e.PARTIAL = "partial"),
      (e.CLOSED = "closed");
  })(fe || (fe = {}));
  var Je;
  (function (e) {
    (e.UNSELECTED = "unselected"), (e.SELECTED = "selected");
  })(Je || (Je = {}));
  var Vo;
  (function (e) {
    (e.VERIFY = "verify"), (e.CHOOSE = "choose");
  })(Vo || (Vo = {}));
  function uc(e) {
    let t,
      n =
        (e[0].given_name && e[0].surname
          ? e[0].given_name.charAt(0) + e[0].surname.charAt(0)
          : e[0].name
          ? e[0].name.charAt(0)
          : e[0].email
          ? e[0].email.charAt(0)
          : "?") + "",
      o;
    return {
      c() {
        (t = G("p")), (o = xe(n)), ye(t, "margin", "0");
      },
      m(l, c) {
        ie(l, t, c), j(t, o);
      },
      p(l, c) {
        c & 1 &&
          n !==
            (n =
              (l[0].given_name && l[0].surname
                ? l[0].given_name.charAt(0) + l[0].surname.charAt(0)
                : l[0].name
                ? l[0].name.charAt(0)
                : l[0].email
                ? l[0].email.charAt(0)
                : "?") + "") &&
          qe(o, n);
      },
      d(l) {
        l && $(t);
      },
    };
  }
  function lc(e) {
    let t, n;
    return {
      c() {
        (t = G("img")),
          z(t, "alt", ""),
          ye(t, "height", e[1]),
          ye(t, "width", e[2]),
          ye(t, "border-radius", "50%"),
          da(t.src, (n = "data:image/jpg;base64," + e[3])) || z(t, "src", n);
      },
      m(o, l) {
        ie(o, t, l);
      },
      p(o, l) {
        l & 2 && ye(t, "height", o[1]),
          l & 4 && ye(t, "width", o[2]),
          l & 8 &&
            !da(t.src, (n = "data:image/jpg;base64," + o[3])) &&
            z(t, "src", n);
      },
      d(o) {
        o && $(t);
      },
    };
  }
  function fc(e) {
    let t;
    function n(c, d) {
      if (c[3]) return lc;
      if (c[0]) return uc;
    }
    let o = n(e),
      l = o && o(e);
    return {
      c() {
        l && l.c(), (t = mi()), (this.c = ae);
      },
      m(c, d) {
        l && l.m(c, d), ie(c, t, d);
      },
      p(c, [d]) {
        o === (o = n(c)) && l
          ? l.p(c, d)
          : (l && l.d(1), (l = o && o(c)), l && (l.c(), l.m(t.parentNode, t)));
      },
      i: ae,
      o: ae,
      d(c) {
        l && l.d(c), c && $(t);
      },
    };
  }
  function cc(e, t, n) {
    let o,
      { contact: l } = t,
      { contact_query: c } = t,
      { height: d = "32px" } = t,
      { width: m = "32px" } = t;
    return (
      ou(async () => {
        l && l.picture_url
          ? n(3, (o = await Bu.getContactAvatar(c, l.id)))
          : n(3, (o = null));
      }),
      (e.$$set = (h) => {
        "contact" in h && n(0, (l = h.contact)),
          "contact_query" in h && n(4, (c = h.contact_query)),
          "height" in h && n(1, (d = h.height)),
          "width" in h && n(2, (m = h.width));
      }),
      n(3, (o = null)),
      [l, d, m, o, c]
    );
  }
  class dc extends Qn {
    constructor(t) {
      super();
      bn(
        this,
        {
          target: this.shadowRoot,
          props: Nr(this.attributes),
          customElement: !0,
        },
        cc,
        fc,
        vn,
        { contact: 0, contact_query: 4, height: 1, width: 2 },
        null,
      ),
        t &&
          (t.target && ie(t.target, this, t.anchor),
          t.props && (this.$set(t.props), J()));
    }
    static get observedAttributes() {
      return ["contact", "contact_query", "height", "width"];
    }
    get contact() {
      return this.$$.ctx[0];
    }
    set contact(t) {
      this.$$set({ contact: t }), J();
    }
    get contact_query() {
      return this.$$.ctx[4];
    }
    set contact_query(t) {
      this.$$set({ contact_query: t }), J();
    }
    get height() {
      return this.$$.ctx[1];
    }
    set height(t) {
      this.$$set({ height: t }), J();
    }
    get width() {
      return this.$$.ctx[2];
    }
    set width(t) {
      this.$$set({ width: t }), J();
    }
  }
  customElements.define("nylas-contact-image", dc);
  function hc(e) {
    let t, n, o, l, c, d, m;
    return {
      c() {
        (t = G("div")),
          (n = G("p")),
          (o = xe(e[0])),
          (l = we()),
          (c = G("button")),
          (c.textContent = "Refresh your page"),
          (this.c = ae),
          z(c, "type", "button");
      },
      m(h, y) {
        ie(h, t, y),
          j(t, n),
          j(n, o),
          j(t, l),
          j(t, c),
          d || ((m = bt(c, "click", e[1])), (d = !0));
      },
      p(h, [y]) {
        y & 1 && qe(o, h[0]);
      },
      i: ae,
      o: ae,
      d(h) {
        h && $(t), (d = !1), m();
      },
    };
  }
  function mc(e, t, n) {
    let { error_message: o = "Uh oh! Looks like an error occurred" } = t;
    const l = () => location.reload();
    return (
      (e.$$set = (c) => {
        "error_message" in c && n(0, (o = c.error_message));
      }),
      [o, l]
    );
  }
  class gc extends Qn {
    constructor(t) {
      super();
      (this.shadowRoot.innerHTML =
        "<style>*{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline;list-style:none}div{background:var(--red-lighter);bottom:0;color:var(--red);font-size:1rem;line-height:24px;min-height:85px;padding:20px 24px;position:fixed;right:0;min-width:240px;z-index:2}button{background:transparent;color:var(--blue);cursor:pointer;font-style:italic;text-decoration:underline;margin-top:10px}</style>"),
        bn(
          this,
          {
            target: this.shadowRoot,
            props: Nr(this.attributes),
            customElement: !0,
          },
          mc,
          hc,
          vn,
          { error_message: 0 },
          null,
        ),
        t &&
          (t.target && ie(t.target, this, t.anchor),
          t.props && (this.$set(t.props), J()));
    }
    static get observedAttributes() {
      return ["error_message"];
    }
    get error_message() {
      return this.$$.ctx[0];
    }
    set error_message(t) {
      this.$$set({ error_message: t }), J();
    }
  }
  customElements.define("nylas-message-error", gc);
  function Wo(e) {
    if (!Array.isArray(e) || e.length === 0) return "";
    const t = e[0].timestamp,
      n = e[e.length - 1].timestamp;
    return n.getMonth() !== t.getMonth()
      ? n.getFullYear() !== t.getFullYear()
        ? `${sr(t, !0)} - ${sr(n, !0)}`
        : `${sr(t)} - ${sr(n, !0)}`
      : sr(t, !0);
  }
  function jr(e) {
    const t = e.toLocaleTimeString([], { timeStyle: "short" });
    return e.getMinutes() === 0
      ? e
          .toLocaleTimeString([], { hour: "numeric", hour12: !0 })
          .replaceAll(/\./g, "")
      : t.replaceAll(/\./g, "");
  }
  function Rt(e) {
    const t = e.toLocaleTimeString([], { timeStyle: "short" });
    return t === "12:00 p.m." ? "Noon" : t.replace(/\./g, "");
  }
  function sr(e, t = !1) {
    return e
      .toLocaleDateString("default", {
        month: "short",
        year: t ? "numeric" : void 0,
      })
      .replaceAll(/\./g, "");
  }
  function yc(e) {
    let t,
      n,
      o = [
        { width: "24" },
        { height: "24" },
        { viewBox: "0 0 24 24" },
        { fill: "none" },
        { xmlns: "http://www.w3.org/2000/svg" },
        e[0],
      ],
      l = {};
    for (let c = 0; c < o.length; c += 1) l = Ft(l, o[c]);
    return {
      c() {
        (t = jn("svg")), (n = jn("path")), this.h();
      },
      l(c) {
        t = xr(c, "svg", {
          width: !0,
          height: !0,
          viewBox: !0,
          fill: !0,
          xmlns: !0,
        });
        var d = Yn(t);
        (n = xr(d, "path", {
          d: !0,
          stroke: !0,
          "stroke-width": !0,
          "stroke-miterlimit": !0,
        })),
          Yn(n).forEach($),
          d.forEach($),
          this.h();
      },
      h() {
        z(n, "d", "M14 16L9.77612 12.0014L14 8"),
          z(n, "stroke", "#6A7285"),
          z(n, "stroke-width", "1.5"),
          z(n, "stroke-miterlimit", "10"),
          Dr(t, l);
      },
      m(c, d) {
        ga(c, t, d), hi(t, n);
      },
      p(c, [d]) {
        Dr(
          t,
          (l = Sa(o, [
            { width: "24" },
            { height: "24" },
            { viewBox: "0 0 24 24" },
            { fill: "none" },
            { xmlns: "http://www.w3.org/2000/svg" },
            d & 1 && c[0],
          ])),
        );
      },
      i: ae,
      o: ae,
      d(c) {
        c && $(t);
      },
    };
  }
  function vc(e, t, n) {
    return (
      (e.$$set = (o) => {
        n(0, (t = Ft(Ft({}, t), _n(o))));
      }),
      (t = _n(t)),
      [t]
    );
  }
  class _c extends Oa {
    constructor(t) {
      super();
      bn(this, t, vc, yc, vn, {});
    }
  }
  function pc(e) {
    let t,
      n,
      o = [
        { width: "24" },
        { height: "24" },
        { viewBox: "0 0 24 24" },
        { fill: "none" },
        { xmlns: "http://www.w3.org/2000/svg" },
        e[0],
      ],
      l = {};
    for (let c = 0; c < o.length; c += 1) l = Ft(l, o[c]);
    return {
      c() {
        (t = jn("svg")), (n = jn("path")), this.h();
      },
      l(c) {
        t = xr(c, "svg", {
          width: !0,
          height: !0,
          viewBox: !0,
          fill: !0,
          xmlns: !0,
        });
        var d = Yn(t);
        (n = xr(d, "path", {
          d: !0,
          stroke: !0,
          "stroke-width": !0,
          "stroke-miterlimit": !0,
        })),
          Yn(n).forEach($),
          d.forEach($),
          this.h();
      },
      h() {
        z(n, "d", "M10 8L14.2239 11.9986L10 16"),
          z(n, "stroke", "#6A7285"),
          z(n, "stroke-width", "1.5"),
          z(n, "stroke-miterlimit", "10"),
          Dr(t, l);
      },
      m(c, d) {
        ga(c, t, d), hi(t, n);
      },
      p(c, [d]) {
        Dr(
          t,
          (l = Sa(o, [
            { width: "24" },
            { height: "24" },
            { viewBox: "0 0 24 24" },
            { fill: "none" },
            { xmlns: "http://www.w3.org/2000/svg" },
            d & 1 && c[0],
          ])),
        );
      },
      i: ae,
      o: ae,
      d(c) {
        c && $(t);
      },
    };
  }
  function bc(e, t, n) {
    return (
      (e.$$set = (o) => {
        n(0, (t = Ft(Ft({}, t), _n(o))));
      }),
      (t = _n(t)),
      [t]
    );
  }
  class wc extends Oa {
    constructor(t) {
      super();
      bn(this, t, bc, pc, vn, {});
    }
  }
  function Ji(e) {
    return e.availability !== fe.BUSY && e.availability !== fe.CLOSED;
  }
  function kc(e, t, n) {
    return [
      {
        emails: n.flatMap((o) => o.participantEmails),
        days: [...Array(7).keys()],
        start: `${e}:00`,
        end: Ho({ hour: t }),
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        object_type: "open_hours",
      },
    ];
  }
  function In(e) {
    return e ? e.toString().padStart(2, "0") : "00";
  }
  function Ho({ hour: e, minute: t = 0 }) {
    return e >= 24 ? `${In(23)}:${In(59)}` : `${In(e)}:${In(t)}`;
  }
  function Sc(e, t) {
    return e.map((n) => {
      var o;
      return {
        emails: t.flatMap((l) => l.participantEmails),
        days: [n.startWeekday === 0 ? 6 : n.startWeekday - 1],
        start: `${In(n.startHour)}:${In(n.startMinute)}`,
        end: Ho({ hour: n.endHour, minute: n.endMinute }),
        timezone:
          (o = n.timeZone) != null
            ? o
            : Intl.DateTimeFormat().resolvedOptions().timeZone,
        object_type: "open_hours",
      };
    });
  }
  const Tc = (e, t, n, o, l, c) => {
    const d = Ut(new Date(new Date(e).setHours(c.start_hour))),
      m = Ut(new Date(new Date(e).setHours(c.end_hour)));
    return Zr()
      .domain([d, m])
      .ticks(Ot.every(c.slot_size))
      .slice(0, -1)
      .map((h) => {
        var y;
        const p = Ot.offset(h, c.slot_size),
          w = [];
        let k = fe.FREE;
        if (t.length) {
          const F = {
            start_time: h,
            end_time: p,
            available_calendars: [],
            expirySelection: "",
            recurrence_cadence: "",
            recurrence_expiry: "",
            fallsWithinAllowedTimeRange: !1,
          };
          for (const I of t) {
            const R =
              I.availability === fe.BUSY
                ? I.timeslots.map((ne) => ({
                    start_time: Ot.offset(ne.start_time, -c.event_buffer),
                    end_time: Ot.offset(ne.end_time, c.event_buffer),
                  }))
                : I.timeslots.map((ne) => ({
                    start_time: Ot.offset(
                      ne.start_time,
                      ne === I.timeslots[0] ? 0 : c.event_buffer,
                    ),
                    end_time: Ot.offset(
                      ne.end_time,
                      ne === I.timeslots[I.timeslots.length - 1]
                        ? 0
                        : -c.event_buffer,
                    ),
                  }));
            let te = 0;
            I.availability === fe.BUSY
              ? (te = Oc(R, F))
              : I.availability === fe.FREE &&
                (te = R.some(
                  (ne) =>
                    F.start_time >= ne.start_time && F.end_time <= ne.end_time,
                )
                  ? 1
                  : 0),
              I.availability === fe.BUSY
                ? c.capacity && c.capacity >= 1 && te < c.capacity
                  ? w.push((I == null ? void 0 : I.emailAddress) || "")
                  : te || w.push((I == null ? void 0 : I.emailAddress) || "")
                : (I.availability === fe.FREE || !I.availability) &&
                  te &&
                  w.push((I == null ? void 0 : I.emailAddress) || "");
          }
          w.length
            ? w.length === t.length
              ? (k = fe.FREE)
              : (k = fe.PARTIAL)
            : (k = fe.BUSY);
        }
        if (
          (k === fe.PARTIAL &&
            w.length < t.length * c.partial_bookable_ratio &&
            (k = fe.BUSY),
          k === fe.BUSY && c.partial_bookable_ratio === 0 && (k = fe.PARTIAL),
          k === fe.PARTIAL &&
            c.required_participants.length &&
            (Ja(n, w) || (k = fe.BUSY)),
          c.mandate_top_of_hour &&
            h.getMinutes() !== 0 &&
            ((k = fe.BUSY), (w.length = 0)),
          c.open_hours.length && k !== fe.BUSY)
        ) {
          let F = [];
          (F = c.open_hours.filter(
            (R) =>
              !Object.prototype.hasOwnProperty.call(R, "startWeekday") ||
              R.startWeekday === h.getDay() ||
              R.endWeekday === h.getDay(),
          )),
            F.some((R) => {
              const te = Object.prototype.hasOwnProperty.call(R, "startWeekday")
                ? Ee.offset(h, R.startWeekday - h.getDay())
                : new Date(h);
              te.setHours(R.startHour), te.setMinutes(R.startMinute);
              const ne = Object.prototype.hasOwnProperty.call(R, "startWeekday")
                ? Ee.offset(h, R.endWeekday - h.getDay())
                : new Date(h);
              return (
                ne.setHours(R.endHour),
                ne.setMinutes(R.endMinute),
                h >= te && p <= ne
              );
            }) || ((k = fe.CLOSED), (w.length = 0));
        }
        ((y = c.events) == null ? void 0 : y.length) > 1 &&
          o.length &&
          (o.some((I) => h >= I[0].start_time && p <= I[I.length - 1].end_time)
            ? ((k = fe.FREE), (w.length = l.length))
            : ((k = fe.BUSY), (w.length = 0)));
        const N = new Date(new Date().setHours(0, 0, 0, 0)).getTime(),
          T = (new Date(e).getTime() - N) / (1e3 * 60 * 60 * 24),
          H =
            (new Date(h).getTime() - new Date().getTime()) /
            (1e3 * 60 * 60 * 24);
        return {
          selectionStatus: Je.UNSELECTED,
          availability: k,
          available_calendars: w,
          start_time: h,
          end_time: p,
          fallsWithinAllowedTimeRange:
            H >= 0 && T >= c.min_book_ahead_days && T <= c.max_book_ahead_days,
        };
      });
  };
  function Oc(e, t) {
    return e.reduce(
      (n, o) => (
        t.start_time < o.end_time && o.start_time < t.end_time && n++, n
      ),
      0,
    );
  }
  function Zo(e, t, n) {
    const o = e.slice();
    return (o[123] = t[n]), (o[124] = t), (o[125] = n), o;
  }
  function jo(e, t, n) {
    const o = e.slice();
    return (o[126] = t[n]), o;
  }
  function Yo(e, t, n) {
    const o = e.slice();
    return (o[126] = t[n]), (o[128] = n), o;
  }
  function qo(e, t, n) {
    const o = e.slice();
    return (o[129] = t[n]), o;
  }
  function Jo(e, t, n) {
    const o = e.slice();
    return (o[134] = t[n]), o;
  }
  function Bo(e, t, n) {
    const o = e.slice();
    return (o[134] = t[n]), o;
  }
  function Mc(e) {
    let t,
      n,
      o,
      l = Wo(e[8]) + "",
      c,
      d,
      m,
      h,
      y,
      p,
      w,
      k,
      N,
      T,
      H,
      F,
      I,
      R = [],
      te = new Map(),
      ne,
      me,
      L,
      Z,
      O,
      ue,
      oe = e[2].allow_date_change && Go(e),
      q = e[2].busy_color !== e[2].closed_color && Qo(),
      ve = e[2].show_ticks && e[2].view_as === "schedule" && Xo(e),
      Se = e[8];
    const Fe = (V) => V[123].timestamp.toISOString();
    for (let V = 0; V < Se.length; V += 1) {
      let K = Zo(e, Se, V),
        Ne = Fe(K);
      te.set(Ne, (R[V] = us(Ne, K)));
    }
    let ke = e[19] && ls();
    return {
      c() {
        (t = G("main")),
          (n = G("header")),
          (o = G("h2")),
          (c = xe(l)),
          (d = we()),
          oe && oe.c(),
          (m = we()),
          (h = G("div")),
          (y = G("span")),
          (y.textContent = "Not available"),
          (p = we()),
          (w = G("span")),
          (w.textContent = "Partially available"),
          (k = we()),
          (N = G("span")),
          (N.textContent = "Available"),
          (T = we()),
          q && q.c(),
          (H = we()),
          ve && ve.c(),
          (F = we()),
          (I = G("div"));
        for (let V = 0; V < R.length; V += 1) R[V].c();
        (me = we()),
          ke && ke.c(),
          z(o, "class", "month"),
          z(y, "class", "not-available"),
          z(w, "class", "partially-available"),
          z(N, "class", "available"),
          z(h, "class", "legend"),
          be(n, "dated", e[2].allow_date_change),
          z(I, "class", "days"),
          Gn(() => e[96].call(I)),
          be(I, "schedule", e[2].view_as === "schedule"),
          be(I, "list", e[2].view_as === "list"),
          be(I, "loading", e[4]),
          be(I, "timezone", e[2].timezone),
          be(I, "error", e[19]),
          ye(t, "--busy-color-lightened", Nn(e[2].busy_color, 90)),
          ye(t, "--closed-color-lightened", Nn(e[2].closed_color, 90)),
          ye(t, "--selected-color-lightened", Nn(e[2].selected_color, 60)),
          ye(t, "--free-color", e[2].free_color),
          ye(t, "--busy-color", e[2].busy_color),
          ye(t, "--closed-color", e[2].closed_color),
          ye(t, "--partial-color", e[2].partial_color),
          ye(t, "--selected-color", e[2].selected_color),
          ye(t, "--unavailable-color", e[2].unavailable_color),
          Gn(() => e[98].call(t)),
          be(t, "ticked", e[2].show_ticks && e[2].view_as === "schedule"),
          be(t, "timezone", e[2].timezone),
          be(t, "allow_booking", e[2].allow_booking),
          be(t, "hide-header", !e[2].show_header);
      },
      m(V, K) {
        ie(V, t, K),
          j(t, n),
          j(n, o),
          j(o, c),
          j(n, d),
          oe && oe.m(n, null),
          j(n, m),
          j(n, h),
          j(h, y),
          j(h, p),
          j(h, w),
          j(h, k),
          j(h, N),
          j(h, T),
          q && q.m(h, null),
          j(t, H),
          ve && ve.m(t, null),
          j(t, F),
          j(t, I);
        for (let Ne = 0; Ne < R.length; Ne += 1) R[Ne].m(I, null);
        e[95](I),
          (ne = va(I, e[96].bind(I))),
          j(t, me),
          ke && ke.m(t, null),
          e[97](t),
          (L = va(t, e[98].bind(t))),
          (Z = !0),
          O || ((ue = bt(t, "mouseleave", e[99])), (O = !0));
      },
      p(V, K) {
        (!Z || K[0] & 256) && l !== (l = Wo(V[8]) + "") && qe(c, l),
          V[2].allow_date_change
            ? oe
              ? (oe.p(V, K), K[0] & 4 && He(oe, 1))
              : ((oe = Go(V)), oe.c(), He(oe, 1), oe.m(n, m))
            : oe &&
              (Fr(),
              ut(oe, 1, 1, () => {
                oe = null;
              }),
              Lr()),
          V[2].busy_color !== V[2].closed_color
            ? q || ((q = Qo()), q.c(), q.m(h, null))
            : q && (q.d(1), (q = null)),
          K[0] & 4 && be(n, "dated", V[2].allow_date_change),
          V[2].show_ticks && V[2].view_as === "schedule"
            ? ve
              ? ve.p(V, K)
              : ((ve = Xo(V)), ve.c(), ve.m(t, F))
            : ve && (ve.d(1), (ve = null)),
          K[0] & 60212005 &&
            ((Se = V[8]),
            (R = ka(R, K, Fe, 1, V, Se, te, I, wa, us, null, Zo))),
          K[0] & 4 && be(I, "schedule", V[2].view_as === "schedule"),
          K[0] & 4 && be(I, "list", V[2].view_as === "list"),
          K[0] & 16 && be(I, "loading", V[4]),
          K[0] & 4 && be(I, "timezone", V[2].timezone),
          K[0] & 524288 && be(I, "error", V[19]),
          V[19]
            ? ke || ((ke = ls()), ke.c(), ke.m(t, null))
            : ke && (ke.d(1), (ke = null)),
          (!Z || K[0] & 4) &&
            ye(t, "--busy-color-lightened", Nn(V[2].busy_color, 90)),
          (!Z || K[0] & 4) &&
            ye(t, "--closed-color-lightened", Nn(V[2].closed_color, 90)),
          (!Z || K[0] & 4) &&
            ye(t, "--selected-color-lightened", Nn(V[2].selected_color, 60)),
          (!Z || K[0] & 4) && ye(t, "--free-color", V[2].free_color),
          (!Z || K[0] & 4) && ye(t, "--busy-color", V[2].busy_color),
          (!Z || K[0] & 4) && ye(t, "--closed-color", V[2].closed_color),
          (!Z || K[0] & 4) && ye(t, "--partial-color", V[2].partial_color),
          (!Z || K[0] & 4) && ye(t, "--selected-color", V[2].selected_color),
          (!Z || K[0] & 4) &&
            ye(t, "--unavailable-color", V[2].unavailable_color),
          K[0] & 4 &&
            be(t, "ticked", V[2].show_ticks && V[2].view_as === "schedule"),
          K[0] & 4 && be(t, "timezone", V[2].timezone),
          K[0] & 4 && be(t, "allow_booking", V[2].allow_booking),
          K[0] & 4 && be(t, "hide-header", !V[2].show_header);
      },
      i(V) {
        Z || (He(oe), (Z = !0));
      },
      o(V) {
        ut(oe), (Z = !1);
      },
      d(V) {
        V && $(t), oe && oe.d(), q && q.d(), ve && ve.d();
        for (let K = 0; K < R.length; K += 1) R[K].d();
        e[95](null), ne(), ke && ke.d(), e[97](null), L(), (O = !1), ue();
      },
    };
  }
  function Dc(e) {
    let t;
    return {
      c() {
        (t = G("nylas-error")), ya(t, "id", e[1]);
      },
      m(n, o) {
        ie(n, t, o);
      },
      p(n, o) {
        o[0] & 2 && ya(t, "id", n[1]);
      },
      i: ae,
      o: ae,
      d(n) {
        n && $(t);
      },
    };
  }
  function Go(e) {
    let t, n, o, l, c, d, m, h, y;
    const p = [Ec, xc],
      w = [];
    function k(F, I) {
      return (
        I[0] & 33792 && (n = null),
        n == null && (n = !F[10].includes(F[15])),
        n ? 0 : 1
      );
    }
    (o = k(e, [-1, -1, -1, -1, -1])), (l = w[o] = p[o](e));
    const N = [Ic, Nc],
      T = [];
    function H(F, I) {
      return (
        I[0] & 17408 && (d = null),
        d == null && (d = !F[10].includes(F[14])),
        d ? 0 : 1
      );
    }
    return (
      (m = H(e, [-1, -1, -1, -1, -1])),
      (h = T[m] = N[m](e)),
      {
        c() {
          (t = G("div")),
            l.c(),
            (c = we()),
            h.c(),
            z(t, "class", "change-dates");
        },
        m(F, I) {
          ie(F, t, I), w[o].m(t, null), j(t, c), T[m].m(t, null), (y = !0);
        },
        p(F, I) {
          let R = o;
          (o = k(F, I)),
            o === R
              ? w[o].p(F, I)
              : (Fr(),
                ut(w[R], 1, 1, () => {
                  w[R] = null;
                }),
                Lr(),
                (l = w[o]),
                l ? l.p(F, I) : ((l = w[o] = p[o](F)), l.c()),
                He(l, 1),
                l.m(t, c));
          let te = m;
          (m = H(F, I)),
            m === te
              ? T[m].p(F, I)
              : (Fr(),
                ut(T[te], 1, 1, () => {
                  T[te] = null;
                }),
                Lr(),
                (h = T[m]),
                h ? h.p(F, I) : ((h = T[m] = N[m](F)), h.c()),
                He(h, 1),
                h.m(t, null));
        },
        i(F) {
          y || (He(l), He(h), (y = !0));
        },
        o(F) {
          ut(l), ut(h), (y = !1);
        },
        d(F) {
          F && $(t), w[o].d(), T[m].d();
        },
      }
    );
  }
  function xc(e) {
    let t;
    return {
      c() {
        t = G("span");
      },
      m(n, o) {
        ie(n, t, o);
      },
      p: ae,
      i: ae,
      o: ae,
      d(n) {
        n && $(t);
      },
    };
  }
  function Ec(e) {
    let t, n, o, l, c;
    return (
      (n = new _c({ props: { style: "height:32px;width:32px;" } })),
      {
        c() {
          (t = G("button")),
            Ta(n.$$.fragment),
            z(t, "aria-label", "Previous date");
        },
        m(d, m) {
          ie(d, t, m),
            _i(n, t, null),
            (o = !0),
            l || ((c = bt(t, "click", e[22])), (l = !0));
        },
        p: ae,
        i(d) {
          o || (He(n.$$.fragment, d), (o = !0));
        },
        o(d) {
          ut(n.$$.fragment, d), (o = !1);
        },
        d(d) {
          d && $(t), Ur(n), (l = !1), c();
        },
      }
    );
  }
  function Nc(e) {
    let t;
    return {
      c() {
        t = G("span");
      },
      m(n, o) {
        ie(n, t, o);
      },
      p: ae,
      i: ae,
      o: ae,
      d(n) {
        n && $(t);
      },
    };
  }
  function Ic(e) {
    let t, n, o, l, c;
    return (
      (n = new wc({ props: { style: "height:32px;width:32px;" } })),
      {
        c() {
          (t = G("button")), Ta(n.$$.fragment), z(t, "aria-label", "Next date");
        },
        m(d, m) {
          ie(d, t, m),
            _i(n, t, null),
            (o = !0),
            l || ((c = bt(t, "click", e[21])), (l = !0));
        },
        p: ae,
        i(d) {
          o || (He(n.$$.fragment, d), (o = !0));
        },
        o(d) {
          ut(n.$$.fragment, d), (o = !1);
        },
        d(d) {
          d && $(t), Ur(n), (l = !1), c();
        },
      }
    );
  }
  function Qo(e) {
    let t;
    return {
      c() {
        (t = G("span")), (t.textContent = "Closed"), z(t, "class", "closed");
      },
      m(n, o) {
        ie(n, t, o);
      },
      d(n) {
        n && $(t);
      },
    };
  }
  function Xo(e) {
    let t,
      n,
      o = e[2].timezone && Ko(e),
      l = e[16],
      c = [];
    for (let d = 0; d < l.length; d += 1) c[d] = es(Jo(e, l, d));
    return {
      c() {
        o && o.c(), (t = we()), (n = G("ul"));
        for (let d = 0; d < c.length; d += 1) c[d].c();
        z(n, "class", "ticks");
      },
      m(d, m) {
        o && o.m(d, m), ie(d, t, m), ie(d, n, m);
        for (let h = 0; h < c.length; h += 1) c[h].m(n, null);
        e[90](n);
      },
      p(d, m) {
        if (
          (d[2].timezone
            ? o
              ? o.p(d, m)
              : ((o = Ko(d)), o.c(), o.m(t.parentNode, t))
            : o && (o.d(1), (o = null)),
          m[0] & 65536)
        ) {
          l = d[16];
          let h;
          for (h = 0; h < l.length; h += 1) {
            const y = Jo(d, l, h);
            c[h] ? c[h].p(y, m) : ((c[h] = es(y)), c[h].c(), c[h].m(n, null));
          }
          for (; h < c.length; h += 1) c[h].d(1);
          c.length = l.length;
        }
      },
      d(d) {
        o && o.d(d), d && $(t), d && $(n), Mr(c, d), e[90](null);
      },
    };
  }
  function Ko(e) {
    let t,
      n,
      o = xa(e[16][0], e[2].timezone) + "",
      l,
      c,
      d,
      m = e[16],
      h = [];
    for (let y = 0; y < m.length; y += 1) h[y] = $o(Bo(e, m, y));
    return {
      c() {
        (t = G("div")), (n = G("p")), (l = xe(o)), (c = we()), (d = G("ul"));
        for (let y = 0; y < h.length; y += 1) h[y].c();
        z(n, "class", "timezone"),
          z(d, "class", "ticks"),
          z(t, "class", "timezone-ticks");
      },
      m(y, p) {
        ie(y, t, p), j(t, n), j(n, l), j(t, c), j(t, d);
        for (let w = 0; w < h.length; w += 1) h[w].m(d, null);
      },
      p(y, p) {
        if (
          (p[0] & 65540 &&
            o !== (o = xa(y[16][0], y[2].timezone) + "") &&
            qe(l, o),
          p[0] & 65540)
        ) {
          m = y[16];
          let w;
          for (w = 0; w < m.length; w += 1) {
            const k = Bo(y, m, w);
            h[w] ? h[w].p(k, p) : ((h[w] = $o(k)), h[w].c(), h[w].m(d, null));
          }
          for (; w < h.length; w += 1) h[w].d(1);
          h.length = m.length;
        }
      },
      d(y) {
        y && $(t), Mr(h, y);
      },
    };
  }
  function $o(e) {
    let t,
      n = Da(e[134], e[2].timezone) + "",
      o,
      l;
    return {
      c() {
        (t = G("li")), (o = xe(n)), (l = we()), z(t, "class", "tick");
      },
      m(c, d) {
        ie(c, t, d), j(t, o), j(t, l);
      },
      p(c, d) {
        d[0] & 65540 && n !== (n = Da(c[134], c[2].timezone) + "") && qe(o, n);
      },
      d(c) {
        c && $(t);
      },
    };
  }
  function es(e) {
    let t,
      n = Rt(e[134]) + "",
      o,
      l;
    return {
      c() {
        (t = G("li")), (o = xe(n)), (l = we()), z(t, "class", "tick");
      },
      m(c, d) {
        ie(c, t, d), j(t, o), j(t, l);
      },
      p(c, d) {
        d[0] & 65536 && n !== (n = Rt(c[134]) + "") && qe(o, n);
      },
      d(c) {
        c && $(t);
      },
    };
  }
  function ts(e) {
    let t,
      n =
        new Date(e[123].timestamp).toLocaleString("default", {
          day: "numeric",
        }) + "",
      o;
    return {
      c() {
        (t = G("span")), (o = xe(n)), z(t, "class", "date");
      },
      m(l, c) {
        ie(l, t, c), j(t, o);
      },
      p(l, c) {
        c[0] & 256 &&
          n !==
            (n =
              new Date(l[123].timestamp).toLocaleString("default", {
                day: "numeric",
              }) + "") &&
          qe(o, n);
      },
      d(l) {
        l && $(t);
      },
    };
  }
  function ns(e) {
    let t,
      n =
        new Date(e[123].timestamp).toLocaleString("default", {
          weekday: "short",
        }) + "",
      o;
    return {
      c() {
        (t = G("span")), (o = xe(n));
      },
      m(l, c) {
        ie(l, t, c), j(t, o);
      },
      p(l, c) {
        c[0] & 256 &&
          n !==
            (n =
              new Date(l[123].timestamp).toLocaleString("default", {
                weekday: "short",
              }) + "") &&
          qe(o, n);
      },
      d(l) {
        l && $(t);
      },
    };
  }
  function Cc(e) {
    let t,
      n = e[17](e[123]),
      o = [];
    for (let l = 0; l < n.length; l += 1) o[l] = is(jo(e, n, l));
    return {
      c() {
        t = G("div");
        for (let l = 0; l < o.length; l += 1) o[l].c();
        z(t, "class", "slot-list");
      },
      m(l, c) {
        ie(l, t, c);
        for (let d = 0; d < o.length; d += 1) o[d].m(t, null);
      },
      p(l, c) {
        if (c[0] & 8520448) {
          n = l[17](l[123]);
          let d;
          for (d = 0; d < n.length; d += 1) {
            const m = jo(l, n, d);
            o[d] ? o[d].p(m, c) : ((o[d] = is(m)), o[d].c(), o[d].m(t, null));
          }
          for (; d < o.length; d += 1) o[d].d(1);
          o.length = n.length;
        }
      },
      d(l) {
        l && $(t), Mr(o, l);
      },
    };
  }
  function Ac(e) {
    let t,
      n,
      o,
      l = [],
      c = new Map(),
      d = e[123].epochs,
      m = [];
    for (let p = 0; p < d.length; p += 1) m[p] = as(qo(e, d, p));
    let h = e[123].slots;
    const y = (p) => p[126].start_time.toISOString();
    for (let p = 0; p < h.length; p += 1) {
      let w = Yo(e, h, p),
        k = y(w);
      c.set(k, (l[p] = ss(k, w)));
    }
    return {
      c() {
        t = G("div");
        for (let p = 0; p < m.length; p += 1) m[p].c();
        (n = we()), (o = G("div"));
        for (let p = 0; p < l.length; p += 1) l[p].c();
        z(t, "class", "epochs"), z(o, "class", "slots");
      },
      m(p, w) {
        ie(p, t, w);
        for (let k = 0; k < m.length; k += 1) m[k].m(t, null);
        ie(p, n, w), ie(p, o, w);
        for (let k = 0; k < l.length; k += 1) l[k].m(o, null);
      },
      p(p, w) {
        if (w[0] & 262400) {
          d = p[123].epochs;
          let k;
          for (k = 0; k < d.length; k += 1) {
            const N = qo(p, d, k);
            m[k] ? m[k].p(N, w) : ((m[k] = as(N)), m[k].c(), m[k].m(t, null));
          }
          for (; k < m.length; k += 1) m[k].d(1);
          m.length = d.length;
        }
        w[0] & 51429633 &&
          ((h = p[123].slots),
          (l = ka(l, w, y, 1, p, h, c, o, wa, ss, null, Yo)));
      },
      d(p) {
        p && $(t), Mr(m, p), p && $(n), p && $(o);
        for (let w = 0; w < l.length; w += 1) l[w].d();
      },
    };
  }
  function rs(e) {
    let t,
      n,
      o = e[126].available_calendars.length + "",
      l,
      c,
      d = e[9].length + "",
      m,
      h;
    return {
      c() {
        (t = G("span")),
          (n = xe("(")),
          (l = xe(o)),
          (c = xe(" of ")),
          (m = xe(d)),
          (h = xe(`
                      available)`)),
          z(t, "class", "partial");
      },
      m(y, p) {
        ie(y, t, p), j(t, n), j(t, l), j(t, c), j(t, m), j(t, h);
      },
      p(y, p) {
        p[0] & 131328 &&
          o !== (o = y[126].available_calendars.length + "") &&
          qe(l, o),
          p[0] & 512 && d !== (d = y[9].length + "") && qe(m, d);
      },
      d(y) {
        y && $(t);
      },
    };
  }
  function is(e) {
    let t,
      n = Rt(new Date(e[126].start_time)) + "",
      o,
      l,
      c,
      d,
      m,
      h,
      y,
      p,
      w,
      k,
      N = e[126].availability === fe.PARTIAL && rs(e);
    function T() {
      return e[93](e[126]);
    }
    return {
      c() {
        (t = G("button")),
          (o = xe(n)),
          (l = we()),
          N && N.c(),
          (c = we()),
          z(
            t,
            "data-available-calendars",
            (d = e[126].available_calendars.toString()),
          ),
          z(
            t,
            "aria-label",
            (m =
              "" +
              (Rt(new Date(e[126].start_time)) +
                " to " +
                Rt(new Date(e[126].end_time)) +
                "; Free calendars: " +
                e[126].available_calendars.toString())),
          ),
          z(
            t,
            "class",
            (h = "slot " + e[126].selectionStatus + " " + e[126].availability),
          ),
          z(
            t,
            "data-start-time",
            (y = new Date(e[126].start_time).toLocaleString()),
          ),
          z(
            t,
            "data-end-time",
            (p = new Date(e[126].end_time).toLocaleString()),
          ),
          be(t, "pending", e[126].selectionPending);
      },
      m(H, F) {
        ie(H, t, F),
          j(t, o),
          j(t, l),
          N && N.m(t, null),
          j(t, c),
          w || ((k = bt(t, "click", T)), (w = !0));
      },
      p(H, F) {
        (e = H),
          F[0] & 131328 &&
            n !== (n = Rt(new Date(e[126].start_time)) + "") &&
            qe(o, n),
          e[126].availability === fe.PARTIAL
            ? N
              ? N.p(e, F)
              : ((N = rs(e)), N.c(), N.m(t, c))
            : N && (N.d(1), (N = null)),
          F[0] & 131328 &&
            d !== (d = e[126].available_calendars.toString()) &&
            z(t, "data-available-calendars", d),
          F[0] & 131328 &&
            m !==
              (m =
                "" +
                (Rt(new Date(e[126].start_time)) +
                  " to " +
                  Rt(new Date(e[126].end_time)) +
                  "; Free calendars: " +
                  e[126].available_calendars.toString())) &&
            z(t, "aria-label", m),
          F[0] & 131328 &&
            h !==
              (h =
                "slot " + e[126].selectionStatus + " " + e[126].availability) &&
            z(t, "class", h),
          F[0] & 131328 &&
            y !== (y = new Date(e[126].start_time).toLocaleString()) &&
            z(t, "data-start-time", y),
          F[0] & 131328 &&
            p !== (p = new Date(e[126].end_time).toLocaleString()) &&
            z(t, "data-end-time", p),
          F[0] & 131328 && be(t, "pending", e[126].selectionPending);
      },
      d(H) {
        H && $(t), N && N.d(), (w = !1), k();
      },
    };
  }
  function as(e) {
    let t, n, o, l, c, d, m;
    return {
      c() {
        (t = G("div")),
          (n = G("div")),
          (o = we()),
          z(n, "class", "inner"),
          ye(n, "background-color", e[18](e[129].available_calendars.length)),
          z(t, "class", (l = "epoch " + e[129].status)),
          ye(t, "height", e[129].height + "%"),
          ye(t, "top", e[129].offset + "%"),
          z(
            t,
            "data-available-calendars",
            (c = e[129].available_calendars.toString()),
          ),
          z(
            t,
            "data-start-time",
            (d = new Date(e[129].start_time).toLocaleString()),
          ),
          z(
            t,
            "data-end-time",
            (m = new Date(e[129].end_time).toLocaleString()),
          );
      },
      m(h, y) {
        ie(h, t, y), j(t, n), j(t, o);
      },
      p(h, y) {
        y[0] & 262400 &&
          ye(n, "background-color", h[18](h[129].available_calendars.length)),
          y[0] & 256 &&
            l !== (l = "epoch " + h[129].status) &&
            z(t, "class", l),
          y[0] & 256 && ye(t, "height", h[129].height + "%"),
          y[0] & 256 && ye(t, "top", h[129].offset + "%"),
          y[0] & 256 &&
            c !== (c = h[129].available_calendars.toString()) &&
            z(t, "data-available-calendars", c),
          y[0] & 256 &&
            d !== (d = new Date(h[129].start_time).toLocaleString()) &&
            z(t, "data-start-time", d),
          y[0] & 256 &&
            m !== (m = new Date(h[129].end_time).toLocaleString()) &&
            z(t, "data-end-time", m);
      },
      d(h) {
        h && $(t);
      },
    };
  }
  function os(e) {
    let t,
      n = e[20](e[126], e[123]) + "",
      o;
    return {
      c() {
        (t = G("span")), (o = xe(n)), z(t, "class", "selected-heading");
      },
      m(l, c) {
        ie(l, t, c), j(t, o);
      },
      p(l, c) {
        c[0] & 256 && n !== (n = l[20](l[126], l[123]) + "") && qe(o, n);
      },
      d(l) {
        l && $(t);
      },
    };
  }
  function ss(e, t) {
    let n,
      o =
        t[126].selectionStatus === Je.SELECTED ||
        (t[0] && t[20](t[126], t[123])),
      l,
      c,
      d,
      m,
      h,
      y,
      p,
      w,
      k,
      N,
      T = o && os(t);
    function H() {
      return t[91](t[126]);
    }
    function F() {
      return t[92](t[126]);
    }
    return {
      key: e,
      first: null,
      c() {
        (n = G("button")),
          T && T.c(),
          (l = we()),
          z(
            n,
            "data-available-calendars",
            (c = t[126].available_calendars.toString()),
          ),
          z(
            n,
            "aria-label",
            (d =
              "" +
              (new Date(t[126].start_time).toLocaleString() +
                " to " +
                new Date(t[126].end_time).toLocaleString() +
                "; Free calendars: " +
                t[126].available_calendars.toString())),
          ),
          z(
            n,
            "class",
            (m = "slot " + t[126].selectionStatus + " " + t[126].availability),
          ),
          z(
            n,
            "data-start-time",
            (h = new Date(t[126].start_time).toLocaleString()),
          ),
          z(
            n,
            "data-end-time",
            (y = new Date(t[126].end_time).toLocaleString()),
          ),
          z(
            n,
            "title",
            (p = t[126].fallsWithinAllowedTimeRange
              ? null
              : `You may only select timeslots in the future, between ${t[15]} and ${t[14]}`),
          ),
          be(n, "pending", t[0] && t[126].selectionPending),
          be(n, "outside-of-time-range", !t[126].fallsWithinAllowedTimeRange),
          (this.first = n);
      },
      m(I, R) {
        ie(I, n, R),
          T && T.m(n, null),
          j(n, l),
          k ||
            ((N = [
              Xs(
                (w = t[26].call(null, n, {
                  dateKey: t[123].timestamp.toLocaleDateString(),
                  slotIndex: t[128],
                  startTime: new Date(t[126].start_time).toLocaleString(),
                })),
              ),
              bt(n, "click", H),
              bt(n, "mouseenter", F),
            ]),
            (k = !0));
      },
      p(I, R) {
        (t = I),
          R[0] & 257 &&
            (o =
              t[126].selectionStatus === Je.SELECTED ||
              (t[0] && t[20](t[126], t[123]))),
          o
            ? T
              ? T.p(t, R)
              : ((T = os(t)), T.c(), T.m(n, l))
            : T && (T.d(1), (T = null)),
          R[0] & 256 &&
            c !== (c = t[126].available_calendars.toString()) &&
            z(n, "data-available-calendars", c),
          R[0] & 256 &&
            d !==
              (d =
                "" +
                (new Date(t[126].start_time).toLocaleString() +
                  " to " +
                  new Date(t[126].end_time).toLocaleString() +
                  "; Free calendars: " +
                  t[126].available_calendars.toString())) &&
            z(n, "aria-label", d),
          R[0] & 256 &&
            m !==
              (m =
                "slot " + t[126].selectionStatus + " " + t[126].availability) &&
            z(n, "class", m),
          R[0] & 256 &&
            h !== (h = new Date(t[126].start_time).toLocaleString()) &&
            z(n, "data-start-time", h),
          R[0] & 256 &&
            y !== (y = new Date(t[126].end_time).toLocaleString()) &&
            z(n, "data-end-time", y),
          R[0] & 49408 &&
            p !==
              (p = t[126].fallsWithinAllowedTimeRange
                ? null
                : `You may only select timeslots in the future, between ${t[15]} and ${t[14]}`) &&
            z(n, "title", p),
          w &&
            Hn(w.update) &&
            R[0] & 256 &&
            w.update.call(null, {
              dateKey: t[123].timestamp.toLocaleDateString(),
              slotIndex: t[128],
              startTime: new Date(t[126].start_time).toLocaleString(),
            }),
          R[0] & 257 && be(n, "pending", t[0] && t[126].selectionPending),
          R[0] & 256 &&
            be(n, "outside-of-time-range", !t[126].fallsWithinAllowedTimeRange);
      },
      d(I) {
        I && $(n), T && T.d(), (k = !1), Lt(N);
      },
    };
  }
  function us(e, t) {
    let n,
      o,
      l,
      c,
      d,
      m,
      h,
      y = t[125],
      p = (t[2].date_format === "date" || t[2].date_format === "full") && ts(t),
      w =
        (t[2].date_format === "weekday" || t[2].date_format === "full") &&
        ns(t);
    function k(I, R) {
      if (I[2].view_as === "schedule") return Ac;
      if (I[2].view_as === "list") return Cc;
    }
    let N = k(t),
      T = N && N(t);
    const H = () => t[94](n, y),
      F = () => t[94](null, y);
    return {
      key: e,
      first: null,
      c() {
        (n = G("div")),
          (o = G("header")),
          (l = G("h2")),
          p && p.c(),
          (c = we()),
          w && w.c(),
          (d = we()),
          T && T.c(),
          (m = we()),
          z(n, "class", "day"),
          z(n, "data-timestamp", (h = t[123].timestamp.toISOString())),
          (this.first = n);
      },
      m(I, R) {
        ie(I, n, R),
          j(n, o),
          j(o, l),
          p && p.m(l, null),
          j(l, c),
          w && w.m(l, null),
          j(n, d),
          T && T.m(n, null),
          j(n, m),
          H();
      },
      p(I, R) {
        (t = I),
          t[2].date_format === "date" || t[2].date_format === "full"
            ? p
              ? p.p(t, R)
              : ((p = ts(t)), p.c(), p.m(l, c))
            : p && (p.d(1), (p = null)),
          t[2].date_format === "weekday" || t[2].date_format === "full"
            ? w
              ? w.p(t, R)
              : ((w = ns(t)), w.c(), w.m(l, null))
            : w && (w.d(1), (w = null)),
          N === (N = k(t)) && T
            ? T.p(t, R)
            : (T && T.d(1), (T = N && N(t)), T && (T.c(), T.m(n, m))),
          R[0] & 256 &&
            h !== (h = t[123].timestamp.toISOString()) &&
            z(n, "data-timestamp", h),
          y !== t[125] && (F(), (y = t[125]), H());
      },
      d(I) {
        I && $(n), p && p.d(), w && w.d(), T && T.d(), F();
      },
    };
  }
  function ls(e) {
    let t;
    return {
      c() {
        t = G("nylas-message-error");
      },
      m(n, o) {
        ie(n, t, o);
      },
      d(n) {
        n && $(t);
      },
    };
  }
  function Fc(e) {
    let t, n, o, l;
    const c = [Dc, Mc],
      d = [];
    function m(h, y) {
      return h[3] && h[3].error ? 0 : 1;
    }
    return (
      (t = m(e)),
      (n = d[t] = c[t](e)),
      {
        c() {
          n.c(), (o = mi()), (this.c = ae);
        },
        m(h, y) {
          d[t].m(h, y), ie(h, o, y), (l = !0);
        },
        p(h, y) {
          let p = t;
          (t = m(h)),
            t === p
              ? d[t].p(h, y)
              : (Fr(),
                ut(d[p], 1, 1, () => {
                  d[p] = null;
                }),
                Lr(),
                (n = d[t]),
                n ? n.p(h, y) : ((n = d[t] = c[t](h)), n.c()),
                He(n, 1),
                n.m(o.parentNode, o));
        },
        i(h) {
          l || (He(n), (l = !0));
        },
        o(h) {
          ut(n), (l = !1);
        },
        d(h) {
          d[t].d(h), h && $(o);
        },
      }
    );
  }
  const Lc = 100,
    Uc = 30;
  function zc(e = []) {
    return e.reduce((t, n) => {
      const o = t[t.length - 1];
      return (
        o && o.end_time === n.start_time
          ? (o.end_time = n.end_time)
          : t.push(Object.assign({}, n)),
        t
      );
    }, []);
  }
  function Rc(e, t, n) {
    let o, l, c, d, m, h, y, p, w, k, N;
    Zn(e, qu, (_) => n(103, (p = _))),
      Zn(e, ju, (_) => n(104, (w = _))),
      Zn(e, pi, (_) => n(89, (k = _))),
      Zn(e, tl, (_) => n(105, (N = _)));
    var T =
        (this && this.__awaiter) ||
        function (_, M, Y, U) {
          function ee(_e) {
            return _e instanceof Y
              ? _e
              : new Y(function (Ue) {
                  Ue(_e);
                });
          }
          return new (Y || (Y = Promise))(function (_e, Ue) {
            function jt(At) {
              try {
                at(U.next(At));
              } catch (yr) {
                Ue(yr);
              }
            }
            function $e(At) {
              try {
                at(U.throw(At));
              } catch (yr) {
                Ue(yr);
              }
            }
            function at(At) {
              At.done ? _e(At.value) : ee(At.value).then(jt, $e);
            }
            at((U = U.apply(_, M || [])).next());
          });
        },
      H,
      F,
      I,
      R,
      te,
      ne,
      me;
    let { id: L = "" } = t,
      { access_token: Z = "" } = t,
      { event_to_hover: O = null } = t,
      { event_to_select: ue = null } = t,
      { allow_booking: oe } = t,
      { allow_date_change: q } = t,
      { attendees_to_show: ve } = t,
      { availability: Se } = t,
      { booking_options: Fe } = t,
      { booking_user_email: ke } = t,
      { booking_user_token: V } = t,
      { busy_color: K } = t,
      { capacity: Ne } = t,
      { closed_color: Le } = t,
      { date_format: Kt } = t,
      { dates_to_show: $t } = t,
      { end_hour: en } = t,
      { event_buffer: tn } = t,
      { free_color: nn } = t,
      { mandate_top_of_hour: rn } = t,
      { max_book_ahead_days: an } = t,
      { min_book_ahead_days: on } = t,
      { open_hours: Cn } = t,
      { overbooked_threshold: P } = t,
      { partial_bookable_ratio: re } = t,
      { partial_color: se } = t,
      { required_participants: x } = t,
      { selected_color: B } = t,
      { show_as_week: le } = t,
      { show_header: Me } = t,
      { show_hosts: Ce } = t,
      { show_ticks: Be } = t,
      { show_weekends: Pt } = t,
      { slot_size: Yr } = t,
      { start_date: ur } = t,
      { start_hour: qr } = t,
      { timezone: Mt } = t,
      { view_as: Ge } = t,
      { unavailable_color: Jr } = t,
      { events: Te } = t;
    const je = {
      allow_booking: !1,
      allow_date_change: !0,
      attendees_to_show: 5,
      busy_color: "#EE3248cc",
      calendars: [],
      closed_color: "#EE3248cc",
      date_format: "full",
      dates_to_show: 1,
      end_hour: 24,
      event_buffer: 0,
      free_color: "#078351cc",
      mandate_top_of_hour: !1,
      max_book_ahead_days: 30,
      min_book_ahead_days: 0,
      open_hours: [],
      overbooked_threshold: 100,
      partial_bookable_ratio: 0.01,
      partial_color: "#FECA7Ccc",
      required_participants: [],
      selected_color: "#002db4",
      show_as_week: !1,
      show_header: !0,
      show_hosts: "show",
      show_ticks: !0,
      show_weekends: !0,
      slot_size: 15,
      start_date: new Date(),
      start_hour: 0,
      timezone: "",
      view_as: "schedule",
      unavailable_color: "#DDD",
      events: [],
    };
    function Dt(_ = !1, M = !1) {
      return T(this, void 0, void 0, function* () {
        if ((yield Kr(!0), M)) {
          const Y = [];
          for (const U of pe)
            Y.push(
              ...(U == null
                ? void 0
                : U.slots
                    .filter((ee) => ee.selectionStatus === Je.SELECTED)
                    .map((ee) => ({
                      status: "busy",
                      start_time: new Date(ee.start_time).getTime() / 1e3,
                      end_time: new Date(ee.end_time).getTime() / 1e3,
                    }))),
            );
          for (const U of m) U.timeslots.push(...Y);
        }
        if (_ && Array.isArray(pe)) {
          for (const Y of pe)
            for (const U of Y.slots) U.selectionStatus = Je.UNSELECTED;
          n(8, (pe = [...pe]));
        }
      });
    }
    let C = wi({}, {}, je),
      xt = {},
      Qe,
      nt = [],
      Xe = {},
      Et = [];
    su(() =>
      T(void 0, void 0, void 0, function* () {
        yield uu(),
          n(4, (Qe = !0)),
          n(7, (yt = We == null ? void 0 : We.getBoundingClientRect().height)),
          n(6, (gt = We == null ? void 0 : We.getBoundingClientRect().height));
        const _ = JSON.stringify({ component_id: L, access_token: Z });
        n(3, (xt = (yield N[_]) || {})),
          n(2, (C = wi(t, xt, je))),
          An(),
          n(4, (Qe = !1));
      }),
    );
    let ht = t;
    function An() {
      C.start_date || n(2, (C.start_date = je.start_date), C),
        C.timezone &&
          (Ma(C.timezone)
            ? C.timezone === Intl.DateTimeFormat().resolvedOptions().timeZone &&
              n(2, (C.timezone = void 0), C)
            : (console.warn(`Invalid IANA time zone: ${C.timezone}`),
              n(2, (C.timezone = void 0), C)));
    }
    const mt = nl(gi());
    let We,
      Fn,
      Vt,
      gt = 0,
      yt,
      vt,
      _t,
      Wt,
      Br,
      lr,
      fr = [];
    const cr = [15, 30, 60, 180, 360],
      Gr = (_, M, Y = 0) => {
        if (_ === void 0 || M === void 0) return [];
        const U = cr[Y];
        let ee = U > 60 ? Ut.every(U / 60) : Ot.every(U);
        M = Zr().domain(M).ticks(ee);
        const _e = _ / M.length;
        return U < C.slot_size || (_e < Uc && Y < cr.length)
          ? Gr(_, M, Y + 1)
          : M;
      };
    function Qr(_, M) {
      const Y = Zr().domain([_[0].start_time, _[_.length - 1].end_time]);
      return _.reduce((U, ee) => {
        const _e = U[U.length - 1];
        return (
          _e &&
          JSON.stringify(_e[0].available_calendars) ===
            JSON.stringify(ee.available_calendars) &&
          _e[0].availability === ee.availability
            ? _e.push(ee)
            : U.push([ee]),
          U
        );
      }, []).map((U) => {
        let ee = fe.FREE;
        const _e = U[0].available_calendars.length,
          Ue = _e !== m.length && _e < m.length * M;
        return (
          _e === 0 ||
          Ue ||
          (C.required_participants.length && !Ja(ln, U[0].available_calendars))
            ? U[0].availability === fe.CLOSED
              ? (ee = fe.CLOSED)
              : (ee = fe.BUSY)
            : _e > 0 && _e < m.length && (ee = fe.PARTIAL),
          {
            start_time: U[0].start_time,
            offset: Y(U[0].start_time) * 100,
            status: ee,
            height: (Y(U[U.length - 1].end_time) - Y(U[0].start_time)) * 100,
            end_time: U[U.length - 1].end_time,
            slots: U.length,
            available_calendars: U[0].available_calendars,
          }
        );
      });
    }
    function sn(_, M, Y) {
      let U = Zr()
        .domain([_, M])
        .ticks(Ee)
        .filter((ee) =>
          C.show_weekends ? !0 : ee.getDay() !== 6 && ee.getDay() !== 0,
        );
      return !C.show_as_week && !C.show_weekends && U.length < vt
        ? Y
          ? sn(Ee.offset(_, -1), M, !0)
          : sn(_, Ee.offset(M, 1))
        : U;
    }
    function Bi(_) {
      return (
        m.forEach((M) => {
          const Y = _.filter((U) =>
            U.available_calendars.includes(M.emailAddress),
          );
          _.length - Y.length > (C.overbooked_threshold * _.length) / 100 &&
            Y.forEach((U) => {
              (U.available_calendars = U.available_calendars.filter(
                (ee) => ee !== M.emailAddress,
              )),
                U.available_calendars.length
                  ? U.availability === fe.FREE &&
                    U.available_calendars.length !== m.length &&
                    (U.availability = fe.PARTIAL)
                  : (U.availability = fe.BUSY);
            });
        }),
        _
      );
    }
    let pe,
      dr = [],
      rt = [],
      hr,
      Ht = [],
      Nt = [];
    function Xr(_ = Nt, M = Z) {
      return {
        body: {
          emails: _,
          free_busy: [],
          duration_minutes: 15,
          interval_minutes: 15,
          start_time:
            Ut(new Date(new Date(_t).setHours(C.start_hour))).getTime() / 1e3,
          end_time:
            Ut(new Date(new Date(Wt).setHours(C.end_hour))).getTime() / 1e3,
          round_robin: "max-availability",
        },
        component_id: L,
        access_token: M,
      };
    }
    let un = [],
      ln = [];
    function Kr(_ = !1) {
      var M;
      return T(this, void 0, void 0, function* () {
        n(4, (Qe = !0));
        const Y = Nt.map((U) => ({ email: U }));
        if (
          (C.booking_user_email &&
            C.booking_user_token &&
            Y.push({
              email: C.booking_user_email,
              token: C.booking_user_token,
            }),
          Array.isArray(Y) && Y.length > 0)
        ) {
          const U = yield w[
            JSON.stringify(
              Object.assign(
                Object.assign(
                  {},
                  Xr(
                    Y.map((ee) => ee.email),
                    Z,
                  ),
                ),
                { forceReload: _ },
              ),
            )
          ];
          return (
            n(4, (Qe = !1)),
            Ee(new Date(Xr().body.start_time * 1e3)).getTime() !==
            Ee(
              new Date(
                ((M = U.time_slots[0]) === null || M === void 0
                  ? void 0
                  : M.start_time) * 1e3,
              ),
            ).getTime()
              ? void 0
              : (C.availability || Ke(U), un)
          );
        }
      });
    }
    function Ke(_) {
      const M = [],
        Y = {};
      for (const U of _ == null ? void 0 : _.order) Y[U] = [];
      for (const U of _.time_slots) U.emails.forEach((ee) => Y[ee].push(U));
      _ == null ||
        _.order.forEach((U) => {
          M.push({
            emailAddress: U,
            availability: fe.FREE,
            timeslots: zc(Y[U]).map((ee) => ({
              start_time: new Date(ee.start_time * 1e3),
              end_time: new Date(ee.end_time * 1e3),
            })),
          });
        }),
        n(81, (un = [...M]));
    }
    function Ye(_, M) {
      var Y;
      const U = rt.find((Ue) => Ue.start_time === _.start_time),
        ee = M.slots[M.slots.indexOf(_) - 1],
        _e = ee ? !Ji(ee) : !1;
      if (
        _.selectionPending &&
        Ji(_) &&
        (!(ee == null ? void 0 : ee.selectionPending) || _e)
      ) {
        const Ue =
            ((Y = M.slots.find(
              (at) =>
                at.start_time > _.start_time &&
                (!at.selectionPending || !Ji(at)),
            )) === null || Y === void 0
              ? void 0
              : Y.start_time) || M.slots[M.slots.length - 1].end_time,
          jt = jr(_.start_time).replace(" ", ""),
          $e = jr(Ue).replace(" ", "");
        return `${jt} - ${$e}`;
      } else if (U) {
        let Ue = jr(U.start_time),
          jt = jr(U.end_time);
        return `${Ue.replace(" ", "")} - ${jt.replace(" ", "")}`;
      } else return "";
    }
    function Zt() {
      C.show_as_week && !c
        ? n(2, (C.start_date = Tn.offset(Wt, 1)), C)
        : n(2, (C.start_date = Ee.offset(Wt, 1)), C),
        mt("eventOptionsReady", { slots: [] });
    }
    function mr() {
      if (C.show_as_week && !c) n(2, (C.start_date = Tn.offset(_t, -1)), C);
      else {
        let _ = sn(Ee.offset(_t, -vt), Ee.offset(Wt, -vt), !0);
        n(2, (C.start_date = _[0]), C);
      }
      mt("eventOptionsReady", { slots: [] });
    }
    let fn = [];
    function $r(_) {
      _.selectionStatus === Je.SELECTED
        ? n(27, (ue = null))
        : n(27, (ue = Ct(_))),
        pe
          .flatMap((M) => M.slots)
          .forEach((M) => {
            (M.selectionPending = !1), (M.selectionStatus = Je.UNSELECTED);
          }),
        n(8, (pe = [...pe])),
        n(0, (O = null));
    }
    function cn(_) {
      _ &&
        (pe
          .flatMap((M) => M.slots)
          .forEach((M) => {
            (M.selectionPending = !1), (M.selectionStatus = Je.UNSELECTED);
          }),
        ue === Ct(_)
          ? (n(27, (ue = null)), n(8, (pe = [...pe])))
          : n(27, (ue = Ct(_))));
    }
    function ei(_) {
      _ && n(0, (O = Ct(_)));
    }
    function Gi(_, M) {
      return (
        typeof Xe[M.dateKey] == "undefined" &&
          (n(10, (Et = Et.concat(M.dateKey).sort())), (Xe[M.dateKey] = [])),
        (Xe[M.dateKey][M.slotIndex] = _),
        {
          destroy() {
            const Y = Xe[M.dateKey].indexOf(_);
            Y >= 0 && Xe[M.dateKey].splice(Y, 1),
              Xe[M.dateKey].length === 0 &&
                (n(10, (Et = Et.filter((U) => U !== M.dateKey))),
                delete Xe[M.dateKey]);
          },
        }
      );
    }
    let It = [],
      dn = {};
    function Ln() {
      return T(this, void 0, void 0, function* () {
        let _ = [];
        C.open_hours.length
          ? (_ = Sc(C.open_hours, C.events))
          : C.start_hour &&
            C.end_hour &&
            (_ = kc(C.start_hour, C.end_hour, C.events));
        const M = yield gr(C.events, d, C.end_hour, _);
        (M == null ? void 0 : M.start_time) < (M == null ? void 0 : M.end_time)
          ? n(
              84,
              (It = yield p[
                JSON.stringify({ body: M, component_id: L, access_token: Z })
              ]),
            )
          : n(84, (It = [])),
          mt("eventOptionsReady", { slots: It });
      });
    }
    function it() {
      var _;
      dn = {};
      for (const M of It) {
        if (!((_ = M[0]) === null || _ === void 0 ? void 0 : _.start_time))
          continue;
        const Y = new Date(
          new Date(M[0].start_time).setHours(0, 0, 0, 0),
        ).getTime();
        dn[Y] ? dn[Y].push(M) : (dn[Y] = [M]);
      }
    }
    function gr(_, M, Y, U) {
      if (_.length === 0) return;
      const ee = M[M.length - 1],
        _e = _.reduce(($e, at) => ($e.push(at.participantEmails), $e), []);
      return {
        duration_minutes: _[0].slot_size,
        interval_minutes: C.slot_size,
        start_time: Math.floor(new Date().getTime() / 1e3),
        end_time: Ut(new Date(new Date(ee).setHours(Y))).getTime() / 1e3,
        free_busy: [],
        open_hours: U,
        emails: _e,
        events: _,
        round_robin: "max-fairness",
      };
    }
    let Pe = [];
    function Ct(_) {
      var M, Y;
      if (!_.fallsWithinAllowedTimeRange) return null;
      const U = new Date(new Date(_.start_time).setHours(0, 0, 0, 0)).getTime(),
        ee =
          (Y =
            (M = dn[U]) === null || M === void 0
              ? void 0
              : M.filter(
                  (_e) =>
                    _.start_time >= _e[0].start_time &&
                    _.end_time <= _e[_e.length - 1].end_time,
                )) !== null && Y !== void 0
            ? Y
            : [];
      return ee[ee.length - 1];
    }
    function pt(_) {
      pn[_ ? "unshift" : "push"](() => {
        (Fn = _), n(12, Fn);
      });
    }
    const ti = (_) => {
        cn(_);
      },
      ni = (_) => {
        ei(_);
      },
      ri = (_) => $r(_);
    function ii(_, M) {
      pn[_ ? "unshift" : "push"](() => {
        (nt[M] = _), n(5, nt), n(2, C), n(122, t), n(73, ht), n(3, xt);
      });
    }
    function ai(_) {
      pn[_ ? "unshift" : "push"](() => {
        (Vt = _), n(13, Vt);
      });
    }
    function oi() {
      (gt = this.clientWidth), n(6, gt);
    }
    function Oe(_) {
      pn[_ ? "unshift" : "push"](() => {
        (We = _), n(11, We);
      });
    }
    function Qi() {
      (yt = this.clientHeight), n(7, yt);
    }
    const Xi = () => n(0, (O = null));
    return (
      (e.$$set = (_) => {
        n(122, (t = Ft(Ft({}, t), _n(_)))),
          "id" in _ && n(1, (L = _.id)),
          "access_token" in _ && n(28, (Z = _.access_token)),
          "event_to_hover" in _ && n(0, (O = _.event_to_hover)),
          "event_to_select" in _ && n(27, (ue = _.event_to_select)),
          "allow_booking" in _ && n(29, (oe = _.allow_booking)),
          "allow_date_change" in _ && n(30, (q = _.allow_date_change)),
          "attendees_to_show" in _ && n(31, (ve = _.attendees_to_show)),
          "availability" in _ && n(32, (Se = _.availability)),
          "booking_options" in _ && n(33, (Fe = _.booking_options)),
          "booking_user_email" in _ && n(34, (ke = _.booking_user_email)),
          "booking_user_token" in _ && n(35, (V = _.booking_user_token)),
          "busy_color" in _ && n(36, (K = _.busy_color)),
          "capacity" in _ && n(37, (Ne = _.capacity)),
          "closed_color" in _ && n(38, (Le = _.closed_color)),
          "date_format" in _ && n(39, (Kt = _.date_format)),
          "dates_to_show" in _ && n(40, ($t = _.dates_to_show)),
          "end_hour" in _ && n(41, (en = _.end_hour)),
          "event_buffer" in _ && n(42, (tn = _.event_buffer)),
          "free_color" in _ && n(43, (nn = _.free_color)),
          "mandate_top_of_hour" in _ && n(44, (rn = _.mandate_top_of_hour)),
          "max_book_ahead_days" in _ && n(45, (an = _.max_book_ahead_days)),
          "min_book_ahead_days" in _ && n(46, (on = _.min_book_ahead_days)),
          "open_hours" in _ && n(47, (Cn = _.open_hours)),
          "overbooked_threshold" in _ && n(48, (P = _.overbooked_threshold)),
          "partial_bookable_ratio" in _ &&
            n(49, (re = _.partial_bookable_ratio)),
          "partial_color" in _ && n(50, (se = _.partial_color)),
          "required_participants" in _ && n(51, (x = _.required_participants)),
          "selected_color" in _ && n(52, (B = _.selected_color)),
          "show_as_week" in _ && n(53, (le = _.show_as_week)),
          "show_header" in _ && n(54, (Me = _.show_header)),
          "show_hosts" in _ && n(55, (Ce = _.show_hosts)),
          "show_ticks" in _ && n(56, (Be = _.show_ticks)),
          "show_weekends" in _ && n(57, (Pt = _.show_weekends)),
          "slot_size" in _ && n(58, (Yr = _.slot_size)),
          "start_date" in _ && n(59, (ur = _.start_date)),
          "start_hour" in _ && n(60, (qr = _.start_hour)),
          "timezone" in _ && n(61, (Mt = _.timezone)),
          "view_as" in _ && n(62, (Ge = _.view_as)),
          "unavailable_color" in _ && n(63, (Jr = _.unavailable_color)),
          "events" in _ && n(64, (Te = _.events));
      }),
      (e.$$.update = () => {
        if (
          (e.$$.dirty[2] & 134217728 && n(19, (o = !!Object.keys(k).length)),
          (t.event_to_hover === void 0 ||
            ht.event_to_hover === t.event_to_hover) &&
            JSON.stringify(ht) !== JSON.stringify(t) &&
            (n(2, (C = wi(t, xt, je))), n(73, (ht = t)), An()),
          e.$$.dirty[0] & 36 &&
            (C.dates_to_show ||
              C.show_ticks ||
              C.show_as_week ||
              C.show_weekends) &&
            n(5, (nt = nt.filter((_) => !!_))),
          e.$$.dirty[0] & 64 && n(88, (l = Math.floor(gt / Lc) || 1)),
          (e.$$.dirty[0] & 4) | (e.$$.dirty[2] & 67108864) &&
            n(87, (c = C.show_as_week && l < 7)),
          (e.$$.dirty[0] & 4) | (e.$$.dirty[2] & 33554432) &&
            n(
              75,
              (_t =
                C.show_as_week && !c
                  ? Tn.floor(C.start_date)
                  : Ee.floor(C.start_date)),
            ),
          (e.$$.dirty[0] & 4) | (e.$$.dirty[2] & 67108864) &&
            n(
              74,
              (vt =
                l < C.dates_to_show || C.show_as_week ? l : C.dates_to_show),
            ),
          (e.$$.dirty[0] & 4) | (e.$$.dirty[2] & 33566720) &&
            n(
              86,
              (d = (() =>
                (C.show_weekends || !C.show_weekends) &&
                sn(
                  _t,
                  C.show_as_week
                    ? Ee.offset(_t, c ? vt - 1 : 6)
                    : Ee.offset(_t, vt - 1),
                ))()),
            ),
          (e.$$.dirty[0] & 22) | (e.$$.dirty[2] & 16777216) &&
            (() =>
              T(void 0, void 0, void 0, function* () {
                C.booking_options
                  ? n(84, (It = C.booking_options))
                  : !Qe &&
                    L &&
                    Array.isArray(C.events) &&
                    d.length > 0 &&
                    (yield Ln()),
                  it();
              }))(),
          e.$$.dirty[2] & 134217728 &&
            Object.keys(k).length &&
            mt("onError", k),
          e.$$.dirty[2] & 16777216 && (Wt = d[d.length - 1]),
          e.$$.dirty[0] & 4 &&
            n(
              14,
              (Br = Ee.offset(
                new Date(),
                C.max_book_ahead_days,
              ).toLocaleDateString()),
            ),
          e.$$.dirty[0] & 4 &&
            n(
              15,
              (lr = Ee.offset(
                new Date(),
                C.min_book_ahead_days,
              ).toLocaleDateString()),
            ),
          (e.$$.dirty[0] & 4) | (e.$$.dirty[2] & 1984) &&
            ((n(68, (I = C.events)) === null || I === void 0
              ? void 0
              : I.length) &&
            (n(69, (R = C.events)) === null || R === void 0
              ? void 0
              : R.length) > 1
              ? (n(
                  79,
                  (Ht =
                    n(70, (te = C.events)) === null || te === void 0
                      ? void 0
                      : te.flatMap((_) => _.participantEmails)),
                ),
                n(80, (Nt = [])),
                n(81, (un = [])))
              : (n(71, (ne = C.events)) === null || ne === void 0
                  ? void 0
                  : ne.length) === 1 &&
                (n(
                  80,
                  (Nt =
                    n(72, (me = C.events)) === null || me === void 0
                      ? void 0
                      : me.flatMap((_) => _.participantEmails)),
                ),
                n(79, (Ht = [])),
                mt("eventOptionsReady", { slots: [] }))),
          e.$$.dirty[2] & 655360 &&
            n(
              9,
              (m = [
                ...un,
                ...Ht.map((_) => ({
                  emailAddress: _,
                  availability: fe.FREE,
                  timeslots: [],
                })),
              ]),
            ),
          (e.$$.dirty[0] & 4) | (e.$$.dirty[1] & 8) &&
            n(82, (ln = [...new Set([...C.required_participants, ke])])),
          (e.$$.dirty[0] & 516) | (e.$$.dirty[2] & 22151168) &&
            n(
              8,
              (pe = d.map((_) => {
                const M = Bi(Tc(_, m, ln, It, Ht, C));
                return {
                  epochs: Qr(M, C.partial_bookable_ratio),
                  slots: M,
                  timestamp: _,
                };
              })),
            ),
          e.$$.dirty[0] & 257 &&
            O &&
            (pe
              .flatMap((_) => _.slots)
              .forEach((_) => {
                _.selectionPending =
                  _.start_time >= O[0].start_time &&
                  _.end_time <= O[O.length - 1].end_time;
              }),
            n(8, (pe = [...pe]))),
          e.$$.dirty[0] & 134217984 &&
            ue &&
            (n(85, (Pe = ue)),
            pe
              .flatMap((_) => _.slots)
              .filter(
                (_) =>
                  ue &&
                  _.start_time >= ue[0].start_time &&
                  _.end_time <= ue[ue.length - 1].end_time,
              )
              .forEach((_) => {
                (_.selectionPending = !1), (_.selectionStatus = Je.SELECTED);
              }),
            n(8, (pe = [...pe]))),
          (e.$$.dirty[0] & 384) | (e.$$.dirty[2] & 48) &&
            n(
              16,
              (fr = Gr(
                yt,
                n(
                  67,
                  (F = (n(66, (H = pe[0])) !== null && H !== void 0 ? H : {})
                    .slots),
                ) === null || F === void 0
                  ? void 0
                  : F.map((_) => _.start_time),
              )),
            ),
          e.$$.dirty[0] & 256 &&
            n(
              76,
              (dr = (pe != null ? pe : [])
                .map((_) =>
                  _.slots.filter((M) => M.selectionStatus === Je.SELECTED),
                )
                .flat()),
            ),
          e.$$.dirty[2] & 16384 &&
            n(
              77,
              (rt = dr
                .sort((_, M) => _.start_time.getTime() - M.start_time.getTime())
                .reduce((_, M) => {
                  const Y = _[_.length - 1];
                  return (
                    Y && M.start_time.getTime() === Y.end_time.getTime()
                      ? (Y.end_time = M.end_time)
                      : _.push(Object.assign({}, M)),
                    _
                  );
                }, [])),
            ),
          (e.$$.dirty[0] & 4) | (e.$$.dirty[2] & 8486912) &&
            JSON.stringify(rt) !== JSON.stringify(hr))
        ) {
          let _ = rt;
          rt.length === 1 &&
            (Pe.length
              ? (_ = Pe.map(
                  (M) => (
                    (M.available_calendars = M.emails),
                    Object.assign(Object.assign({}, rt[0]), M)
                  ),
                ))
              : (_ = _.map((M) =>
                  Object.assign(Object.assign({}, C.events[0]), M),
                ))),
            mt("timeSlotChosen", {
              timeSlots: _.map((M) => Object.assign({}, M)),
            }),
            n(78, (hr = rt));
        }
        if (
          ((e.$$.dirty[0] & 6) | (e.$$.dirty[2] & 262144) &&
            (() =>
              T(void 0, void 0, void 0, function* () {
                var _;
                C.availability
                  ? setTimeout(() => Ke(C.availability))
                  : L &&
                    ((Array.isArray(Nt) && Nt.length > 0) ||
                      (C.booking_user_email && C.booking_user_token)) &&
                    ((_ = C.events) === null || _ === void 0
                      ? void 0
                      : _.length) === 1 &&
                    (yield Kr());
              }))(),
          (e.$$.dirty[0] & 256) | (e.$$.dirty[2] & 2097152) &&
            JSON.stringify(fn) !== JSON.stringify(pe.map((_) => _.timestamp)) &&
            (n(83, (fn = pe.map((_) => _.timestamp))),
            mt("dateChange", { dates: fn })),
          (e.$$.dirty[0] & 6) | (e.$$.dirty[2] & 131072))
        ) {
          if (L && Ht.length && C.capacity)
            try {
              lt(L, {
                name: "IncompatibleProperties",
                message:
                  "Setting `capacity` currently does not work when fetching availability directly from Nylas. Please pass `calendars` data directly to use `capacity`.",
              });
            } catch (_) {
              console.error(_);
            }
          else if (C.capacity && C.capacity < 1)
            try {
              lt(L, {
                name: "IncompatibleProperties",
                message: "`capacity` must be an integer of 1 or more",
              });
            } catch (_) {
              console.error(_);
            }
        }
        e.$$.dirty[0] & 516 &&
          n(
            18,
            (h = So()
              .domain([0, m.length / 2, m.length])
              .range([C.busy_color, C.partial_color, C.free_color])),
          );
      }),
      n(17, (y = (_) => _.slots.filter((M) => Ct(M)))),
      (t = _n(t)),
      [
        O,
        L,
        C,
        xt,
        Qe,
        nt,
        gt,
        yt,
        pe,
        m,
        Et,
        We,
        Fn,
        Vt,
        Br,
        lr,
        fr,
        y,
        h,
        o,
        Ye,
        Zt,
        mr,
        $r,
        cn,
        ei,
        Gi,
        ue,
        Z,
        oe,
        q,
        ve,
        Se,
        Fe,
        ke,
        V,
        K,
        Ne,
        Le,
        Kt,
        $t,
        en,
        tn,
        nn,
        rn,
        an,
        on,
        Cn,
        P,
        re,
        se,
        x,
        B,
        le,
        Me,
        Ce,
        Be,
        Pt,
        Yr,
        ur,
        qr,
        Mt,
        Ge,
        Jr,
        Te,
        Dt,
        H,
        F,
        I,
        R,
        te,
        ne,
        me,
        ht,
        vt,
        _t,
        dr,
        rt,
        hr,
        Ht,
        Nt,
        un,
        ln,
        fn,
        It,
        Pe,
        d,
        c,
        l,
        k,
        pt,
        ti,
        ni,
        ri,
        ii,
        ai,
        oi,
        Oe,
        Qi,
        Xi,
      ]
    );
  }
  class fs extends Qn {
    constructor(t) {
      super();
      (this.shadowRoot.innerHTML =
        '<style>*{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline;list-style:none}.sr-only{position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden}main{--black:#161717;--grey-dark:#636671;--grey:#bdc0cb;--grey-lighter:#dfe1e8;--grey-dark-warm:#9fa4b5;--grey-lightest:#f7f7f8;--grey-background:#f0f1f5;--white:#ffffff;--blue:#314fa9;--blue-lighter:#f0f3ff;--red:#ee3248;--red-lighter:#ffeef0;--fs-12:0.75rem;--fs-14:0.875rem;--fs-16:1rem;--black-90:#2c2e2e;--grey-light:#f7f7f8;--grey-warm:#cbcbcb}main{height:100%;overflow:hidden;display:grid;font-family:Arial, Helvetica, sans-serif;position:relative;z-index:1;grid-template-rows:auto 1fr;gap:1rem}main.ticked{grid-template-columns:70px 1fr}main.ticked.timezone{grid-template-columns:70px 70px 1fr}main.hide-header{grid-template-rows:auto}main.hide-header>header{display:none}main>header{grid-column:-1/1;display:grid;grid-template-columns:1fr;align-items:baseline}main>header.dated{grid-template-columns:1fr auto}main>header h2{font-size:1.5rem;font-weight:700}main>header .change-dates{display:grid;grid-template-columns:1fr 1fr;gap:1rem}main>header .change-dates button{background-color:#f7f7f8;border:1px solid #e3e8ee;cursor:pointer;display:flex}main>header .change-dates button:hover{background-color:#e3e8ee}main>header .legend{padding:0.5rem 0 0;color:#636671}main>header .legend span{display:inline-block;margin-right:1rem}main>header .legend span::before{content:"";border-radius:8px;height:12px;width:12px;margin-right:0.25rem;display:inline-block;background-color:black}main>header .legend span.available::before{background-color:var(--free-color, #36d2addf)}main>header .legend span.not-available::before{background-color:var(--busy-color, #36d2addf)}main>header .legend span.closed::before{background-color:var(--closed-color, #999)}main>header .legend span.partially-available::before{background-color:var(--partial-color, #ffff7566)}main .timezone-ticks{position:relative}main .timezone-ticks .timezone{font-size:0.8rem;left:25%;position:absolute;top:5px}main .days{position:relative;display:grid;gap:0rem;grid-auto-flow:column;grid-auto-columns:1fr;height:100%;overflow:auto}@keyframes progress{0%{width:0}100%{width:100%}}main .days.loading::after{background-color:var(--blue-lighter);z-index:-1}main .days.loading::before{animation:progress 2s ease-in-out infinite;background-color:var(--blue)}main .days.loading::before,main .days.loading::after{top:36px;left:0;content:"";display:block;height:4px;position:absolute}main .days.loading::before{z-index:3}main .days.timezone.loading::before,main .days.timezone.loading::after{left:180px}main .days.loading.error{animation:none}@keyframes progress{0%{width:0}100%{width:100%}}main .days.loading.error::after{background-color:var(--red);z-index:-1}main .days.loading.error::before{animation:progress 2s ease-in-out infinite;background-color:var(--red)}main .days.loading.error::before,main .days.loading.error::after{top:36px;left:0;content:"";display:block;height:4px;position:absolute}main .days.loading.error::before{z-index:3}main .days.schedule{overflow:hidden}main .days.list .day{display:block}main .days.list .day header{position:sticky;top:0;margin-top:0;background-color:white;height:40px;z-index:2}main .ticks{display:grid;grid-auto-flow:row;grid-auto-rows:auto;height:calc(100% - 40px);list-style-type:none;margin:0;padding:40px 0 0 0;overflow:hidden;font-size:0.8rem;font-family:sans-serif}main .ticks li{display:block;position:relative;height:auto;overflow:hidden;padding:0 0.25rem;display:grid;justify-content:right}main .day{display:grid;grid-template-rows:40px 1fr;position:relative}main .day header{width:100%;overflow:hidden}main .day header h2{margin:0;padding:0;display:grid;grid-template-columns:auto 1fr;gap:0.5rem;height:30px;line-height:1.875;font-size:1rem;font-weight:200}main .day header h2 .date{border-radius:15px;background:var(--blue);color:white;font-weight:bold;display:block;width:30px;height:30px;line-height:1.875;text-align:center}main .day .epochs{position:absolute;top:40px;width:100%;height:calc(100% - 40px)}main .day .epochs .epoch{position:absolute;width:100%}main .day .epochs .epoch .inner{margin:0rem;height:calc(100% - 0.5rem);padding:0.25rem 0;width:8px;margin:0}main .day .epochs .epoch.busy{background-image:linear-gradient(45deg, var(--busy-color-lightened) 12.5%, white 12.5%, white 50%, var(--busy-color-lightened) 50%, var(--busy-color-lightened) 62.5%, white 62.5%, white 100%);background-size:5.66px 5.66px}main .day .epochs .epoch.closed{background-image:linear-gradient(45deg, var(--closed-color-lightened) 12.5%, white 12.5%, white 50%, var(--closed-color-lightened) 50%, var(--closed-color-lightened) 62.5%, white 62.5%, white 100%);background-size:5.66px 5.66px}main .day .epochs .epoch.busy .inner{background-color:var(--busy-color, #ff647566)}main .day .epochs .epoch.closed .inner{background-color:var(--closed-color, #ff647566)}main .day .epochs .epoch.partial .inner{background-color:var(--partial-color, #ffff7566)}main .day .epochs .epoch.free .inner{background-color:var(--free-color, #36d2addf)}main .day .epochs .epoch .available-calendars{display:none;position:absolute;z-index:2;left:10px}main .day .epochs .epoch .available-calendars span{background:rgba(0, 0, 0, 0.5);display:inline-block;margin:0;padding:0.25rem;color:white;border-radius:4px;font-size:0.6rem}main .day:hover .epoch.partial .available-calendars{display:block}main .day .slots{display:grid;grid-auto-flow:row;grid-auto-rows:auto;height:100%;list-style-type:none;margin:0;padding:0}main .day .slots .slot{border:none;border-bottom:1px solid rgba(0, 0, 0, 0.05);background:transparent;position:relative;align-items:center;justify-content:center;align-content:center;font-family:sans-serif;touch-action:none}main .day .slots .slot.selected{background-color:var(--selected-color, var(--blue));box-shadow:none;border-bottom:1px solid transparent;z-index:3;margin-left:9px;margin-right:1px}main .day .slots .slot.pending{background-color:var(--selected-color-lightened);z-index:3;margin-left:9px;margin-right:1px}main .day .slots .slot.selected+.selected,main .day .slots .slot.pending+.pending{z-index:2}main .day .slots .slot.busy:not(.pending),main .day .slots .slot.closed:not(.pending){cursor:not-allowed}main .day .slots .slot.outside-of-time-range{background-color:var(--unavailable-color, #ddd)}main .day .slots .slot.outside-of-time-range:hover{cursor:not-allowed}main .day .slots .slot .selected-heading{position:absolute;top:3px;left:0;color:white;text-shadow:1px 1px 2px #002db4ff;font-weight:300;padding:0 3px;font-size:0.8rem;z-index:3;text-align:left;font-family:system-ui, sans-serif}main .day .slots .slot.pending .selected-heading{width:auto}main .day .slot-list{display:grid;grid-auto-rows:50px;grid-auto-flow:row;overflow:auto;gap:0.25rem;list-style-type:none;margin:0;padding:0}main .day .slot-list .slot{border-radius:4px;background:transparent;position:relative;align-items:center;justify-content:center;align-content:center;font-family:sans-serif;border:1px solid rgba(0, 0, 0, 0.1);box-shadow:none !important}@media(hover: hover) and (pointer: fine){main .day .slot-list .slot:hover{box-shadow:none;background-color:rgba(0, 0, 0, 0.1)}}main .day .slot-list .slot.selected{background:var(--blue);color:white}main .day .slot-list .slot .partial{display:block;font-size:0.6rem}main button.confirm{grid-column:-1/1}main.allow_booking .slot:not(.busy):hover,main.allow_booking .slot:not(.busy):focus,main.allow_booking .slot:not(.closed):hover,main.allow_booking .slot:not(.closed):focus{box-shadow:0 0 1px 0 var(--selected-color);cursor:pointer}main .attendee-overlay{background-color:white;border-radius:4px;box-shadow:0 4px 14px 0 black;display:none;font-size:14px;max-width:12rem;padding:1.2rem 1rem;position:absolute;z-index:3}main .attendee-overlay::before{content:"";width:0;height:0;border-left:10px solid transparent;border-right:10px solid transparent;border-bottom:10px solid white;position:absolute;left:5.5rem;top:-10px}main .attendee-overlay.invert-y::before{display:none}main .attendee-overlay.invert-y::after{content:"";width:0;height:0;border-left:10px solid transparent;border-right:10px solid transparent;border-top:10px solid white;position:absolute;left:5.5rem;bottom:-10px}main .attendee-overlay .attendee-list .contact{display:grid;grid-template-columns:40px auto;padding:0.6rem 0}main .attendee-overlay .attendee-list .contact.divider{border-bottom:1px solid #979797}main .attendee-overlay .attendee-list .contact.unavailable{filter:grayscale(80%);opacity:50%}main .attendee-overlay .attendee-list .contact .default-avatar{background:#002db4;border-radius:50%;color:#fff;font-family:sans-serif;font-size:1rem;font-weight:bold;height:32px;line-height:35px;text-align:center;text-transform:uppercase;width:32px}main .attendee-overlay .attendee-list .contact .contact-details{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}main .attendee-overlay .attendee-list .contact .contact-details .name{font-weight:bold;display:block}main .attendee-overlay .attendee-list .icon{position:relative;top:-1.3rem;left:1.2rem;height:0;width:0}main .attendee-overlay .more-attendees{font-weight:bold;display:inline-block;padding-top:1rem}</style>'),
        bn(
          this,
          {
            target: this.shadowRoot,
            props: Nr(this.attributes),
            customElement: !0,
          },
          Rc,
          Fc,
          vn,
          {
            id: 1,
            access_token: 28,
            event_to_hover: 0,
            event_to_select: 27,
            allow_booking: 29,
            allow_date_change: 30,
            attendees_to_show: 31,
            availability: 32,
            booking_options: 33,
            booking_user_email: 34,
            booking_user_token: 35,
            busy_color: 36,
            capacity: 37,
            closed_color: 38,
            date_format: 39,
            dates_to_show: 40,
            end_hour: 41,
            event_buffer: 42,
            free_color: 43,
            mandate_top_of_hour: 44,
            max_book_ahead_days: 45,
            min_book_ahead_days: 46,
            open_hours: 47,
            overbooked_threshold: 48,
            partial_bookable_ratio: 49,
            partial_color: 50,
            required_participants: 51,
            selected_color: 52,
            show_as_week: 53,
            show_header: 54,
            show_hosts: 55,
            show_ticks: 56,
            show_weekends: 57,
            slot_size: 58,
            start_date: 59,
            start_hour: 60,
            timezone: 61,
            view_as: 62,
            unavailable_color: 63,
            events: 64,
            reload: 65,
          },
          null,
          [-1, -1, -1, -1, -1],
        ),
        t &&
          (t.target && ie(t.target, this, t.anchor),
          t.props && (this.$set(t.props), J()));
    }
    static get observedAttributes() {
      return [
        "id",
        "access_token",
        "event_to_hover",
        "event_to_select",
        "allow_booking",
        "allow_date_change",
        "attendees_to_show",
        "availability",
        "booking_options",
        "booking_user_email",
        "booking_user_token",
        "busy_color",
        "capacity",
        "closed_color",
        "date_format",
        "dates_to_show",
        "end_hour",
        "event_buffer",
        "free_color",
        "mandate_top_of_hour",
        "max_book_ahead_days",
        "min_book_ahead_days",
        "open_hours",
        "overbooked_threshold",
        "partial_bookable_ratio",
        "partial_color",
        "required_participants",
        "selected_color",
        "show_as_week",
        "show_header",
        "show_hosts",
        "show_ticks",
        "show_weekends",
        "slot_size",
        "start_date",
        "start_hour",
        "timezone",
        "view_as",
        "unavailable_color",
        "events",
        "reload",
      ];
    }
    get id() {
      return this.$$.ctx[1];
    }
    set id(t) {
      this.$$set({ id: t }), J();
    }
    get access_token() {
      return this.$$.ctx[28];
    }
    set access_token(t) {
      this.$$set({ access_token: t }), J();
    }
    get event_to_hover() {
      return this.$$.ctx[0];
    }
    set event_to_hover(t) {
      this.$$set({ event_to_hover: t }), J();
    }
    get event_to_select() {
      return this.$$.ctx[27];
    }
    set event_to_select(t) {
      this.$$set({ event_to_select: t }), J();
    }
    get allow_booking() {
      return this.$$.ctx[29];
    }
    set allow_booking(t) {
      this.$$set({ allow_booking: t }), J();
    }
    get allow_date_change() {
      return this.$$.ctx[30];
    }
    set allow_date_change(t) {
      this.$$set({ allow_date_change: t }), J();
    }
    get attendees_to_show() {
      return this.$$.ctx[31];
    }
    set attendees_to_show(t) {
      this.$$set({ attendees_to_show: t }), J();
    }
    get availability() {
      return this.$$.ctx[32];
    }
    set availability(t) {
      this.$$set({ availability: t }), J();
    }
    get booking_options() {
      return this.$$.ctx[33];
    }
    set booking_options(t) {
      this.$$set({ booking_options: t }), J();
    }
    get booking_user_email() {
      return this.$$.ctx[34];
    }
    set booking_user_email(t) {
      this.$$set({ booking_user_email: t }), J();
    }
    get booking_user_token() {
      return this.$$.ctx[35];
    }
    set booking_user_token(t) {
      this.$$set({ booking_user_token: t }), J();
    }
    get busy_color() {
      return this.$$.ctx[36];
    }
    set busy_color(t) {
      this.$$set({ busy_color: t }), J();
    }
    get capacity() {
      return this.$$.ctx[37];
    }
    set capacity(t) {
      this.$$set({ capacity: t }), J();
    }
    get closed_color() {
      return this.$$.ctx[38];
    }
    set closed_color(t) {
      this.$$set({ closed_color: t }), J();
    }
    get date_format() {
      return this.$$.ctx[39];
    }
    set date_format(t) {
      this.$$set({ date_format: t }), J();
    }
    get dates_to_show() {
      return this.$$.ctx[40];
    }
    set dates_to_show(t) {
      this.$$set({ dates_to_show: t }), J();
    }
    get end_hour() {
      return this.$$.ctx[41];
    }
    set end_hour(t) {
      this.$$set({ end_hour: t }), J();
    }
    get event_buffer() {
      return this.$$.ctx[42];
    }
    set event_buffer(t) {
      this.$$set({ event_buffer: t }), J();
    }
    get free_color() {
      return this.$$.ctx[43];
    }
    set free_color(t) {
      this.$$set({ free_color: t }), J();
    }
    get mandate_top_of_hour() {
      return this.$$.ctx[44];
    }
    set mandate_top_of_hour(t) {
      this.$$set({ mandate_top_of_hour: t }), J();
    }
    get max_book_ahead_days() {
      return this.$$.ctx[45];
    }
    set max_book_ahead_days(t) {
      this.$$set({ max_book_ahead_days: t }), J();
    }
    get min_book_ahead_days() {
      return this.$$.ctx[46];
    }
    set min_book_ahead_days(t) {
      this.$$set({ min_book_ahead_days: t }), J();
    }
    get open_hours() {
      return this.$$.ctx[47];
    }
    set open_hours(t) {
      this.$$set({ open_hours: t }), J();
    }
    get overbooked_threshold() {
      return this.$$.ctx[48];
    }
    set overbooked_threshold(t) {
      this.$$set({ overbooked_threshold: t }), J();
    }
    get partial_bookable_ratio() {
      return this.$$.ctx[49];
    }
    set partial_bookable_ratio(t) {
      this.$$set({ partial_bookable_ratio: t }), J();
    }
    get partial_color() {
      return this.$$.ctx[50];
    }
    set partial_color(t) {
      this.$$set({ partial_color: t }), J();
    }
    get required_participants() {
      return this.$$.ctx[51];
    }
    set required_participants(t) {
      this.$$set({ required_participants: t }), J();
    }
    get selected_color() {
      return this.$$.ctx[52];
    }
    set selected_color(t) {
      this.$$set({ selected_color: t }), J();
    }
    get show_as_week() {
      return this.$$.ctx[53];
    }
    set show_as_week(t) {
      this.$$set({ show_as_week: t }), J();
    }
    get show_header() {
      return this.$$.ctx[54];
    }
    set show_header(t) {
      this.$$set({ show_header: t }), J();
    }
    get show_hosts() {
      return this.$$.ctx[55];
    }
    set show_hosts(t) {
      this.$$set({ show_hosts: t }), J();
    }
    get show_ticks() {
      return this.$$.ctx[56];
    }
    set show_ticks(t) {
      this.$$set({ show_ticks: t }), J();
    }
    get show_weekends() {
      return this.$$.ctx[57];
    }
    set show_weekends(t) {
      this.$$set({ show_weekends: t }), J();
    }
    get slot_size() {
      return this.$$.ctx[58];
    }
    set slot_size(t) {
      this.$$set({ slot_size: t }), J();
    }
    get start_date() {
      return this.$$.ctx[59];
    }
    set start_date(t) {
      this.$$set({ start_date: t }), J();
    }
    get start_hour() {
      return this.$$.ctx[60];
    }
    set start_hour(t) {
      this.$$set({ start_hour: t }), J();
    }
    get timezone() {
      return this.$$.ctx[61];
    }
    set timezone(t) {
      this.$$set({ timezone: t }), J();
    }
    get view_as() {
      return this.$$.ctx[62];
    }
    set view_as(t) {
      this.$$set({ view_as: t }), J();
    }
    get unavailable_color() {
      return this.$$.ctx[63];
    }
    set unavailable_color(t) {
      this.$$set({ unavailable_color: t }), J();
    }
    get events() {
      return this.$$.ctx[64];
    }
    set events(t) {
      this.$$set({ events: t }), J();
    }
    get reload() {
      return this.$$.ctx[65];
    }
  }
  return customElements.define("nylas-availability", fs), fs;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
