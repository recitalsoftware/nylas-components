(function(at,g){typeof exports=="object"&&typeof module!="undefined"?module.exports=g():typeof define=="function"&&define.amd?define(g):(at=typeof globalThis!="undefined"?globalThis:at||self,at.app=g())})(this,function(){"use strict";const at=window.customElements.define.bind(window.customElements);window.customElements.define=(t,...e)=>{if(!customElements.get(t))return at(t,...e)};function g(){}function Ce(t,e){for(const r in e)t[r]=e[r];return t}function Yn(t){return t&&typeof t=="object"&&typeof t.then=="function"}function Ht(t){return t()}function kr(){return Object.create(null)}function De(t){t.forEach(Ht)}function Bt(t){return typeof t=="function"}function He(t,e){return t!=t?e==e:t!==e||t&&typeof t=="object"||typeof t=="function"}let bt;function wr(t,e){return bt||(bt=document.createElement("a")),bt.href=e,t===bt.href}function Kn(t,e){return t!=t?e==e:t!==e}function Tr(t){return Object.keys(t).length===0}function Er(t,...e){if(t==null)return g;const r=t.subscribe(...e);return r.unsubscribe?()=>r.unsubscribe():r}function vt(t,e,r){t.$$.on_destroy.push(Er(e,r))}function Be(t){const e={};for(const r in t)r[0]!=="$"&&(e[r]=t[r]);return e}let yt=!1;function Vn(){yt=!0}function Xn(){yt=!1}function $n(t,e,r,n){for(;t<e;){const o=t+(e-t>>1);r(o)<=n?t=o+1:e=o}return t}function Zn(t){if(t.hydrate_init)return;t.hydrate_init=!0;let e=t.childNodes;if(t.nodeName==="HEAD"){const i=[];for(let c=0;c<e.length;c++){const u=e[c];u.claim_order!==void 0&&i.push(u)}e=i}const r=new Int32Array(e.length+1),n=new Int32Array(e.length);r[0]=-1;let o=0;for(let i=0;i<e.length;i++){const c=e[i].claim_order,u=(o>0&&e[r[o]].claim_order<=c?o+1:$n(1,o,b=>e[r[b]].claim_order,c))-1;n[i]=r[u]+1;const p=u+1;r[p]=i,o=Math.max(p,o)}const a=[],s=[];let l=e.length-1;for(let i=r[o]+1;i!=0;i=n[i-1]){for(a.push(e[i-1]);l>=i;l--)s.push(e[l]);l--}for(;l>=0;l--)s.push(e[l]);a.reverse(),s.sort((i,c)=>i.claim_order-c.claim_order);for(let i=0,c=0;i<s.length;i++){for(;c<a.length&&s[i].claim_order>=a[c].claim_order;)c++;const u=c<a.length?a[c]:null;t.insertBefore(s[i],u)}}function D(t,e){t.appendChild(e)}function Gt(t,e){if(yt){for(Zn(t),(t.actual_end_child===void 0||t.actual_end_child!==null&&t.actual_end_child.parentElement!==t)&&(t.actual_end_child=t.firstChild);t.actual_end_child!==null&&t.actual_end_child.claim_order===void 0;)t.actual_end_child=t.actual_end_child.nextSibling;e!==t.actual_end_child?(e.claim_order!==void 0||e.parentNode!==t)&&t.insertBefore(e,t.actual_end_child):t.actual_end_child=e.nextSibling}else(e.parentNode!==t||e.nextSibling!==null)&&t.appendChild(e)}function N(t,e,r){t.insertBefore(e,r||null)}function Ar(t,e,r){yt&&!r?Gt(t,e):(e.parentNode!==t||e.nextSibling!=r)&&t.insertBefore(e,r||null)}function A(t){t.parentNode.removeChild(t)}function Wt(t,e){for(let r=0;r<t.length;r+=1)t[r]&&t[r].d(e)}function R(t){return document.createElement(t)}function st(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function B(t){return document.createTextNode(t)}function Y(){return B(" ")}function Ge(){return B("")}function kt(t,e,r,n){return t.addEventListener(e,r,n),()=>t.removeEventListener(e,r,n)}function I(t,e,r){r==null?t.removeAttribute(e):t.getAttribute(e)!==r&&t.setAttribute(e,r)}function wt(t,e){for(const r in e)I(t,r,e[r])}function ie(t,e,r){e in t?t[e]=typeof t[e]=="boolean"&&r===""?!0:r:I(t,e,r)}function it(t){return Array.from(t.childNodes)}function Qn(t){t.claim_info===void 0&&(t.claim_info={last_index:0,total_claimed:0})}function qn(t,e,r,n,o=!1){Qn(t);const a=(()=>{for(let s=t.claim_info.last_index;s<t.length;s++){const l=t[s];if(e(l)){const i=r(l);return i===void 0?t.splice(s,1):t[s]=i,o||(t.claim_info.last_index=s),l}}for(let s=t.claim_info.last_index-1;s>=0;s--){const l=t[s];if(e(l)){const i=r(l);return i===void 0?t.splice(s,1):t[s]=i,o?i===void 0&&t.claim_info.last_index--:t.claim_info.last_index=s,l}}return n()})();return a.claim_order=t.claim_info.total_claimed,t.claim_info.total_claimed+=1,a}function eo(t,e,r,n){return qn(t,o=>o.nodeName===e,o=>{const a=[];for(let s=0;s<o.attributes.length;s++){const l=o.attributes[s];r[l.name]||a.push(l.name)}a.forEach(s=>o.removeAttribute(s))},()=>n(e))}function Tt(t,e,r){return eo(t,e,r,st)}function le(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function Or(t,e){t.value=e==null?"":e}function We(t,e,r,n){r===null?t.style.removeProperty(e):t.style.setProperty(e,r,n?"important":"")}function ne(t,e,r){t.classList[r?"add":"remove"](e)}function Et(t){const e={};for(const r of t)e[r.name]=r.value;return e}let lt;function ke(t){lt=t}function ct(){if(!lt)throw new Error("Function called outside component initialization");return lt}function to(t){ct().$$.before_update.push(t)}function ro(t){ct().$$.on_mount.push(t)}function no(t){ct().$$.after_update.push(t)}const ft=[],Jt=[],At=[],Sr=[],oo=Promise.resolve();let Yt=!1;function ao(){Yt||(Yt=!0,oo.then(G))}function Kt(t){At.push(t)}const Vt=new Set;let Ot=0;function G(){const t=lt;do{for(;Ot<ft.length;){const e=ft[Ot];Ot++,ke(e),so(e.$$)}for(ke(null),ft.length=0,Ot=0;Jt.length;)Jt.pop()();for(let e=0;e<At.length;e+=1){const r=At[e];Vt.has(r)||(Vt.add(r),r())}At.length=0}while(ft.length);for(;Sr.length;)Sr.pop()();Yt=!1,Vt.clear(),ke(t)}function so(t){if(t.fragment!==null){t.update(),De(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(Kt)}}const St=new Set;let Pe;function Nt(){Pe={r:0,c:[],p:Pe}}function Ct(){Pe.r||De(Pe.c),Pe=Pe.p}function ae(t,e){t&&t.i&&(St.delete(t),t.i(e))}function pe(t,e,r,n){if(t&&t.o){if(St.has(t))return;St.add(t),Pe.c.push(()=>{St.delete(t),n&&(r&&t.d(1),n())}),t.o(e)}}function ge(t,e){const r=e.token={};function n(o,a,s,l){if(e.token!==r)return;e.resolved=l;let i=e.ctx;s!==void 0&&(i=i.slice(),i[s]=l);const c=o&&(e.current=o)(i);let u=!1;e.block&&(e.blocks?e.blocks.forEach((p,b)=>{b!==a&&p&&(Nt(),pe(p,1,1,()=>{e.blocks[b]===p&&(e.blocks[b]=null)}),Ct())}):e.block.d(1),c.c(),ae(c,1),c.m(e.mount(),e.anchor),u=!0),e.block=c,e.blocks&&(e.blocks[a]=c),u&&G()}if(Yn(t)){const o=ct();if(t.then(a=>{ke(o),n(e.then,1,e.value,a),ke(null)},a=>{if(ke(o),n(e.catch,2,e.error,a),ke(null),!e.hasCatch)throw a}),e.current!==e.pending)return n(e.pending,0),!0}else{if(e.current!==e.then)return n(e.then,1,e.value,t),!0;e.resolved=t}}function ut(t,e,r){const n=e.slice(),{resolved:o}=t;t.current===t.then&&(n[t.value]=o),t.current===t.catch&&(n[t.error]=o),t.block.p(n,r)}function Nr(t,e){const r={},n={},o={$$scope:1};let a=t.length;for(;a--;){const s=t[a],l=e[a];if(l){for(const i in s)i in l||(n[i]=1);for(const i in l)o[i]||(r[i]=l[i],o[i]=1);t[a]=l}else for(const i in s)o[i]=1}for(const s in n)s in r||(r[s]=void 0);return r}function Cr(t){t&&t.c()}function Xt(t,e,r,n){const{fragment:o,on_mount:a,on_destroy:s,after_update:l}=t.$$;o&&o.m(e,r),n||Kt(()=>{const i=a.map(Ht).filter(Bt);s?s.push(...i):De(i),t.$$.on_mount=[]}),l.forEach(Kt)}function Dt(t,e){const r=t.$$;r.fragment!==null&&(De(r.on_destroy),r.fragment&&r.fragment.d(e),r.on_destroy=r.fragment=null,r.ctx=[])}function io(t,e){t.$$.dirty[0]===-1&&(ft.push(t),ao(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}function Je(t,e,r,n,o,a,s,l=[-1]){const i=lt;ke(t);const c=t.$$={fragment:null,ctx:null,props:a,update:g,not_equal:o,bound:kr(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(i?i.$$.context:[])),callbacks:kr(),dirty:l,skip_bound:!1,root:e.target||i.$$.root};s&&s(c.root);let u=!1;if(c.ctx=r?r(t,e.props||{},(p,b,..._)=>{const T=_.length?_[0]:b;return c.ctx&&o(c.ctx[p],c.ctx[p]=T)&&(!c.skip_bound&&c.bound[p]&&c.bound[p](T),u&&io(t,p)),b}):[],c.update(),u=!0,De(c.before_update),c.fragment=n?n(c.ctx):!1,e.target){if(e.hydrate){Vn();const p=it(e.target);c.fragment&&c.fragment.l(p),p.forEach(A)}else c.fragment&&c.fragment.c();e.intro&&ae(t.$$.fragment),Xt(t,e.target,e.anchor,e.customElement),Xn(),G()}ke(i)}let mt;typeof HTMLElement=="function"&&(mt=class extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(Ht).filter(Bt);for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(t,e,r){this[t]=r}disconnectedCallback(){De(this.$$.on_disconnect)}$destroy(){Dt(this,1),this.$destroy=g}$on(t,e){const r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(e),()=>{const n=r.indexOf(e);n!==-1&&r.splice(n,1)}}$set(t){this.$$set&&!Tr(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class Dr{$destroy(){Dt(this,1),this.$destroy=g}$on(e,r){const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(r),()=>{const o=n.indexOf(r);o!==-1&&n.splice(o,1)}}$set(e){this.$$set&&!Tr(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const Ye=[];function lo(t,e){return{subscribe:we(t,e).subscribe}}function we(t,e=g){let r;const n=new Set;function o(l){if(He(t,l)&&(t=l,r)){const i=!Ye.length;for(const c of n)c[1](),Ye.push(c,t);if(i){for(let c=0;c<Ye.length;c+=2)Ye[c][0](Ye[c+1]);Ye.length=0}}}function a(l){o(l(t))}function s(l,i=g){const c=[l,i];return n.add(c),n.size===1&&(r=e(o)||g),l(t),()=>{n.delete(c),n.size===0&&(r(),r=null)}}return{set:o,update:a,subscribe:s}}function co(t,e,r){const n=!Array.isArray(t),o=n?[t]:t,a=e.length<2;return lo(r,s=>{let l=!1;const i=[];let c=0,u=g;const p=()=>{if(c)return;u();const _=e(n?i[0]:i,s);a?s(_):u=Bt(_)?_:g},b=o.map((_,T)=>Er(_,L=>{i[T]=L,c&=~(1<<T),l&&p()},()=>{c|=1<<T}));return l=!0,p(),function(){De(b),u()}})}function fo(){return we({})}const $t=fo();var uo=Object.defineProperty,mo=Object.defineProperties,ho=Object.getOwnPropertyDescriptors,Rr=Object.getOwnPropertySymbols,po=Object.prototype.hasOwnProperty,go=Object.prototype.propertyIsEnumerable,xr=(t,e,r)=>e in t?uo(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,_o=(t,e)=>{for(var r in e||(e={}))po.call(e,r)&&xr(t,r,e[r]);if(Rr)for(var r of Rr(e))go.call(e,r)&&xr(t,r,e[r]);return t},bo=(t,e)=>mo(t,ho(e));async function ee(t){var e;if(!t.ok){const r=await t.json().then(a=>a),n=((e=r==null?void 0:r.response)==null?void 0:e.error)||(r==null?void 0:r.message),o=new Error(n);return o.name=r.name,Promise.reject({message:o,statusCode:t.status})}return t.json()}function te(t={component_id:""}){return{method:t.method||"GET",headers:{Accept:"application/json","Content-Type":"application/json","X-Component-Id":t.component_id||"","X-Access-Token":t.access_token||""},body:t.body?JSON.stringify(t.body):void 0}}function oe(t,e){throw console.error(e),$t.update(r=>bo(_o({},r),{[t]:e})),e}const Lr={"001":"","002":"ireland-","003":"canada-"};function re(t){let e="";if(t.substring(3,4)==="-"){const n=t.substring(0,3);typeof Lr[n]!="undefined"&&(e=Lr[n])}return`https://${e}web-components.nylas.com/middleware`}function Ie(t){}function vo(t){return Object.keys(t).reduce((e,r)=>(t[r]!==void 0&&e.append(r,t[r]),e),new URLSearchParams).toString()}const yo=async(t,e)=>{const r=`${re(t.component_id)}/contact-list/contacts?${vo(e)}`,n=await fetch(r,te({component_id:t.component_id,access_token:t.access_token})).then(o=>ee(o)).then(o=>o.response).catch(o=>oe(t.component_id,o));return n!=null?n:[]},ko=async t=>{const e=await fetch(`${re(t.component_id)}/contacts${t.query}`,te({component_id:t.component_id,access_token:t.access_token})).then(r=>ee(r)).then(r=>r.response).catch(r=>oe(t.component_id,r));return e!=null?e:[]},wo=async(t,e)=>await fetch(`${re(t.component_id)}/contacts/${e}/picture`,te({component_id:t.component_id,access_token:t.access_token})).then(r=>ee(r)).then(r=>r.response).catch(r=>oe(t.component_id,r));var To=Object.defineProperty,Eo=Object.defineProperties,Ao=Object.getOwnPropertyDescriptors,Mr=Object.getOwnPropertySymbols,Oo=Object.prototype.hasOwnProperty,So=Object.prototype.propertyIsEnumerable,Pr=(t,e,r)=>e in t?To(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Ir=(t,e)=>{for(var r in e||(e={}))Oo.call(e,r)&&Pr(t,r,e[r]);if(Mr)for(var r of Mr(e))So.call(e,r)&&Pr(t,r,e[r]);return t},Fr=(t,e)=>Eo(t,Ao(e));const jr=(t,e,r)=>{if(t.thread_ids){const o=t.thread_ids.slice(r,r+e);return Promise.all(o.map(async a=>{const s=`${re(t.component_id)}/threads/${a}?view=expanded`;return await fetch(s,te(t)).then(l=>ee(l)).then(l=>l.response).then(l=>Fr(Ir({},l),{messages:l.messages.filter(i=>i.from.length!==0||i.to.length!==0)})).catch(l=>oe(t.component_id,l))}))}let n=`${re(t.component_id)}/threads?view=expanded&not_in=trash&limit=${e}&offset=${r}`;return t.query&&Object.entries(t.query).forEach(o=>n=n.concat(`&${o[0]}=${o[1]}`)),fetch(n,te(t)).then(o=>ee(o)).then(o=>o.response).then(o=>o.map(a=>Fr(Ir({},a),{messages:a.messages.filter(s=>s.from.length!==0||s.to.length!==0)}))).catch(o=>oe(t.component_id,o))};function zr(t){let e=`${re(t.component_id)}/threads?view=expanded&not_in=trash&view=count`;return t.query&&Object.entries(t.query).forEach(r=>e=e.concat(`&${r[0]}=${r[1]}`)),t.keywordToSearch&&(e+=`&q=${t.keywordToSearch}`),fetch(e,te(t)).then(r=>ee(r)).then(r=>r.response.count)}const No=t=>{const e=`${re(t.component_id)}/threads/search?q=${t.keywordToSearch}&view=expanded&limit=${t.query.limit}&offset=${t.query.offset}`;return fetch(e,te(t)).then(async r=>ee(r)).then(r=>r.response).catch(r=>oe(t.component_id,r))},Co=async t=>await fetch(`${re(t.component_id)}/threads/${t.thread_id}?view=expanded`,te({component_id:t.component_id,access_token:t.access_token})).then(r=>ee(r)).then(r=>r.response).catch(r=>oe(t.component_id,r)),Do=(t,e)=>fetch(`${re(t.component_id)}/threads/${e.id}`,te({method:"PUT",component_id:t.component_id,access_token:t.access_token,body:{unread:e.unread,starred:e.starred,folder_id:e.folder_id,label_ids:e.label_ids}})).then(r=>ee(r)).then(r=>r.response).catch(r=>oe(t.component_id,r)),Ro=async(t,e)=>await fetch(`${re(t)}/manifest`,te({access_token:e,component_id:t})).then(ee).then(r=>r.component.theming).catch(r=>oe(t,r)),xo=async(t,e,r)=>await fetch(`${re(t)}/send`,te({method:"POST",component_id:t,access_token:r,body:e})).then(n=>ee(n)).then(n=>n.response).catch(n=>oe(t,n)),Lo=async t=>await fetch(`${re(t.component_id)}/account`,te(t)).then(r=>ee(r)).then(r=>r.response).catch(r=>oe(t.component_id,r)),Mo=t=>fetch(`${re(t.component_id)}/neural/conversation`,te({method:"PUT",access_token:t.access_token,component_id:t.component_id,body:{message_id:t.message_id}})).then(async e=>(await ee(e)).response).catch(e=>oe(t.component_id,e));var Po=Object.defineProperty,Ur=Object.getOwnPropertySymbols,Io=Object.prototype.hasOwnProperty,Fo=Object.prototype.propertyIsEnumerable,Hr=(t,e,r)=>e in t?Po(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Br=(t,e)=>{for(var r in e||(e={}))Io.call(e,r)&&Hr(t,r,e[r]);if(Ur)for(var r of Ur(e))Fo.call(e,r)&&Hr(t,r,e[r]);return t};const jo=async t=>fetch(`${re(t.component_id)}/calendars/availability`,te({method:"POST",component_id:t.component_id,access_token:t.access_token,body:t.body})).then(async e=>{const r=await ee(e);return r.response.time_slots=r.response.time_slots.map(n=>(n.start_time=n.start||0,n.end_time=n.end||0,delete n.start,delete n.end,n)),r.response}).catch(e=>oe(t.component_id,e)),zo=async t=>fetch(`${re(t.component_id)}/calendars/availability/consecutive`,te({method:"POST",component_id:t.component_id,access_token:t.access_token,body:t.body})).then(async e=>{var r;const o=((r=(await ee(e)).response)==null?void 0:r.map(l=>(l=l.map(i=>(i.start_time=new Date(i.start_time*1e3),i.end_time=new Date(i.end_time*1e3),i)),l)))||[],a=Uo(o,t.body.events);return Ho(a)}).catch(e=>oe(t.component_id,e));function Uo(t,e){return t.map(r=>r.map(n=>Br(Br({},n),e.find(o=>o.participantEmails.length===n.emails.length&&o.participantEmails.every(a=>n.emails.includes(a))))))}function Ho(t){const e=new Set;return t.filter(r=>{const n=`${r[0].start_time}_${r[r.length-1].end_time}`;return e.has(n)?!1:(e.add(n),!0)})}var Bo=Object.defineProperty,Gr=Object.getOwnPropertySymbols,Go=Object.prototype.hasOwnProperty,Wo=Object.prototype.propertyIsEnumerable,Wr=(t,e,r)=>e in t?Bo(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Jo=(t,e)=>{for(var r in e||(e={}))Go.call(e,r)&&Wr(t,r,e[r]);if(Gr)for(var r of Gr(e))Wo.call(e,r)&&Wr(t,r,e[r]);return t};function Yo(){const t=(r,n)=>{var o,a;const s=JSON.parse(n),l=Jo({},s);if(delete l.forceReload,n=JSON.stringify(l),!(!s.component_id||!((o=s==null?void 0:s.body)==null?void 0:o.start_time)||!((a=s==null?void 0:s.body)==null?void 0:a.end_time))){if(!r[n]||s.forceReload){const i=jo(s);e.update(c=>(c[n]=i,c)),r[n]=i}return r[n]}},e=we(new Proxy({},{get:t}));return e}Yo();function Ko(){const t=(r,n)=>{var o,a;const s=JSON.parse(n);if(!(!s.component_id||!((o=s==null?void 0:s.body)==null?void 0:o.start_time)||!((a=s==null?void 0:s.body)==null?void 0:a.end_time))){if(!r[n]){const l=zo(s);e.update(i=>(i[n]=l,i)),r[n]=l}return r[n]}},e=we(new Proxy({},{get:t}));return e}Ko();var Vo=Object.defineProperty,Jr=Object.getOwnPropertySymbols,Xo=Object.prototype.hasOwnProperty,$o=Object.prototype.propertyIsEnumerable,Yr=(t,e,r)=>e in t?Vo(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Kr=(t,e)=>{for(var r in e||(e={}))Xo.call(e,r)&&Yr(t,r,e[r]);if(Jr)for(var r of Jr(e))$o.call(e,r)&&Yr(t,r,e[r]);return t};let se={};function Vr(t){return t.filter(e=>!!e.given_name||!!e.surname||Array.isArray(e.emails)&&e.emails.length>0).map(e=>((!Array.isArray(e.emails)||e.emails.length===0)&&(e.emails=[{email:""}]),e))}function Zo(){const{subscribe:t,set:e,update:r}=we({});return{subscribe:t,addContacts:async(n,o)=>{var a;const s=JSON.stringify(n);if(!se[s]&&(n.component_id||n.access_token)){o.offset===0&&Zt.reset();const l=(a=await yo(n,o).then(i=>Vr(i)).catch(()=>[]))!=null?a:[];return se[s]=se[s]?[...se[s],...l]:l,r(i=>(i[s]=se[s],Kr({},i))),se[s]}},addContact:async n=>{var o;const a=JSON.stringify(n);if(!se[a]&&(n.component_id||n.access_token)){const s=(o=await ko(n).then(l=>Vr(l)).catch(()=>[]))!=null?o:[];se[a]=se[a]?[...se[a],...s]:s,r(l=>(l[a]=se[a],Kr({},l)))}return se[a]},reset:()=>{se={},e({})}}}const Zt=Zo(),Qt={};function Qo(){const{subscribe:t,set:e}=we({});return{subscribe:t,getContactAvatar:async(r,n,o=!1)=>{if(!Qt[n]||o){const a=await wo(r,n).then(s=>s).catch(()=>"");a&&(Qt[n]=a)}return Qt[n]},reset:()=>e({})}}const qo=Qo();var ea=Object.defineProperty,Xr=Object.getOwnPropertySymbols,ta=Object.prototype.hasOwnProperty,ra=Object.prototype.propertyIsEnumerable,$r=(t,e,r)=>e in t?ea(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Ke=(t,e)=>{for(var r in e||(e={}))ta.call(e,r)&&$r(t,r,e[r]);if(Xr)for(var r of Xr(e))ra.call(e,r)&&$r(t,r,e[r]);return t};function na(){const{subscribe:t,set:e,update:r}=we({}),n={};return{subscribe:t,getConversation:async o=>{const a=JSON.stringify(o);if(!n[a]&&(o.component_id||o.access_token)){const s=await Co(o).catch(Ie);s&&(n[a]=s,r(l=>(l[a]=n[a],Ke({},l))))}return await n[a]},addThread:o=>{r(a=>(a[o.queryKey]=o.data,Ke({},a)))},updateThread:o=>{r(a=>(a[o.queryKey]=Ke(Ke({},a[o.queryKey]),o.data),Ke({},a)))},addMessageToThread:o=>(r(a=>{var s;let l=(s=a[o.queryKey].messages)==null?void 0:s.find(i=>i.id===o.data.id);if(l)l=o.data;else{const i=a[o.queryKey].messages;i.push(o.data),a[o.queryKey].messages=i}return Ke({},a)}),n[o.queryKey]),reset:()=>e({})}}const Zr=na();var oa=Object.defineProperty,Qr=Object.getOwnPropertySymbols,aa=Object.prototype.hasOwnProperty,sa=Object.prototype.propertyIsEnumerable,qr=(t,e,r)=>e in t?oa(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,Fe=(t,e)=>{for(var r in e||(e={}))aa.call(e,r)&&qr(t,r,e[r]);if(Qr)for(var r of Qr(e))sa.call(e,r)&&qr(t,r,e[r]);return t};async function en(t){const e=[];for(let r=0;r<t;r++)e.push({isLoaded:!1,threads:[]});return e}function ia(){const{subscribe:t,set:e,update:r}=we({});let n={},o;return{subscribe:t,set:e,getThreads:async(a,s,l,i=!1)=>{const c=JSON.stringify(a);if(!a.component_id&&!a.access_token)return[];if(o===void 0||i){const u=a.thread_ids?a.thread_ids.length:await zr(a).catch(Ie);u&&(o=u)}if(!Array.isArray(n[c])||i){const u=Math.ceil(o/l);n[c]=await en(u)}if(typeof n[c][s]=="undefined")return[];if(!n[c][s].isLoaded){const u=await jr(a,l,s*l).catch(Ie);u&&(n[c][s].threads=u,n[c][s].isLoaded=!0)}return r(u=>(u[c]=n[c],Fe({},u))),n[c][s].threads},getNumberOfItems:async a=>{if(!a.component_id&&!a.access_token)return 0;if(typeof o=="undefined"){const s=await zr(a).catch(Ie);s&&(o=s)}return o},getThreadsWithSearchKeyword:async(a,s=!1)=>{if(!a.component_id&&!a.access_token)return[];const l=JSON.stringify(a);if((!Array.isArray(n[l])||s)&&(n[l]=await en(1)),!n[l][0].isLoaded||s){const i=await No(a).catch(Ie);i&&(n[l][0].threads=i,n[l][0].isLoaded=!0)}return r(i=>(i[l]=n[l],Fe({},i))),n[l][0].threads},updateThread:async(a,s,l,i,c)=>{const u=await Do(a,l).catch(Ie);if(!n[s][i].isLoaded){const p=await jr(JSON.parse(s),c,i*c).catch(Ie);p&&(n[s][i].threads=p,n[s][i].isLoaded=!0)}return n[s][i].threads=n[s][i].threads.map(p=>(u&&p.id===u.id&&(p=Object.assign(p,u)),p)),r(p=>(p[s]=n[s],Fe({},p))),n[s][i].threads},updateThreadSelection:(a,s,l)=>{const i=n[a][s].threads;if(l){const c=i.find(u=>u.id===l);c&&(c.selected=!c.selected)}else{const c=i.some(u=>u.selected);for(const u of i)u.selected=!c}return r(c=>(c[a]=n[a],Fe({},c))),n[a][s].threads},reset:()=>{n={},e({})},hydrateMessageInThread:(a,s,l)=>{var i,c,u;const p=JSON.stringify(s),b=(c=(i=n[p][l])==null?void 0:i.threads)==null?void 0:c.find(_=>_.id===a.thread_id);if(b){const _=(u=b.messages)==null?void 0:u.find(T=>T.id===a.id);_?(_.body=a.body,r(T=>{if(a.thread_id){let L=T[p][l].threads.find(O=>O.id===b.id);L&&(L=JSON.parse(JSON.stringify(b)))}return Fe({},T)})):r(T=>{if(a.thread_id){let L=T[p][l].threads.find(O=>O.id===b.id);if(L){const O=b.messages;O.push(a),b.messages=O,b.snippet=a.snippet,b.drafts=b.drafts.filter(M=>M.id!==a.id),L=JSON.parse(JSON.stringify(b))}}return Fe({},T)})}return n[p][l].threads},hydrateDraftInThread:(a,s,l)=>{var i,c,u;const p=JSON.stringify(s),b=(c=(i=n[p][l])==null?void 0:i.threads)==null?void 0:c.find(_=>_.id===a.thread_id);if(b){const _=(u=b.drafts)==null?void 0:u.find(T=>T.id===a.id);if(a.thread_id){if(_)Object.assign(_,a);else{const T=b.drafts;T.push(a),b.drafts=T}r(T=>{let L=T[p][l].threads.find(O=>O.id===b.id);return L&&(L=JSON.parse(JSON.stringify(b))),Fe({},T)})}}return n[p][l].threads}}}const la=ia();co(la,t=>{const e={};return Object.entries(t).forEach(([r,n])=>e[r]=n.map(o=>o.threads).flat()),e});function ca(){const t=(r,n)=>{const o=JSON.parse(n);if(!!o.component_id){if(!r[n]){const a=Ro(o.component_id,o.access_token);e.update(s=>(s[n]=a,s)),r[n]=a}return r[n]}},e=we(new Proxy({},{get:t}));return e}const fa=ca();function ua(t){return(e,r)=>{t.dispatchEvent&&t.dispatchEvent(new CustomEvent(e,{detail:r,composed:!0}))}}function qt(t,e,r){return new Proxy(t,{get:(n,o)=>o==="toString"||o==="toJSON"?()=>JSON.stringify(n):Reflect.get(n,o)!==void 0?tn(Reflect.get(n,o),r[o]):e&&o in e?tn(e[o],r[o]):r[o],ownKeys:n=>{const o=new Set([...Reflect.ownKeys(n),...Object.keys(e),...Object.keys(r)]);return Array.from(o)},getOwnPropertyDescriptor:(n,o)=>{var a,s;let l=Reflect.getOwnPropertyDescriptor(n,o);return l||(l=(s=(a=e&&Object.getOwnPropertyDescriptor(e,o))!=null?a:r&&Object.getOwnPropertyDescriptor(r,o))!=null?s:{configurable:!0,enumerable:!0,writable:!0},Reflect.defineProperty(n,o,l)),l}})}function tn(t,e){if(t){if(typeof e=="boolean")return ma(t);if(typeof e=="number")return Number(t);if(e instanceof Date)return new Date(t)}return t===void 0?e!=null?e:null:t}function ma(t){return[!0,"true","1"].includes(t)}function rn(t){let e,r,n,o,a,s;function l(u,p){if(u[2]==="HostDomainNotAllowedError")return ha;if(u[2]==="IncompatibleProperties")return da}let i=l(t),c=i&&i(t);return{c(){var u,p;e=R("div"),c&&c.c(),r=Y(),n=R("span"),n.textContent="Debug info:",o=Y(),a=R("textarea"),I(n,"class","details"),I(a,"class","details"),a.readOnly=!0,a.value=s=`
      `+t[2]+": "+t[0]+`
      `+((p=(u=t[1].message)==null?void 0:u.message)!=null?p:"")+`
    `,I(e,"class","message-container")},m(u,p){N(u,e,p),c&&c.m(e,null),D(e,r),D(e,n),D(e,o),D(e,a)},p(u,p){var b,_;i===(i=l(u))&&c?c.p(u,p):(c&&c.d(1),c=i&&i(u),c&&(c.c(),c.m(e,r))),p&7&&s!==(s=`
      `+u[2]+": "+u[0]+`
      `+((_=(b=u[1].message)==null?void 0:b.message)!=null?_:"")+`
    `)&&(a.value=s)},d(u){u&&A(e),c&&c.d()}}}function da(t){let e;return{c(){e=R("h3"),e.textContent="Your component properties do not work with each other."},m(r,n){N(r,e,n)},p:g,d(r){r&&A(e)}}}function ha(t){let e,r,n,o,a,s;return{c(){e=R("h3"),r=B(`You are trying to access this component from\xA0
        `),n=R("code"),n.textContent=`${window.location.hostname}`,o=B(`. The component's settings do not
        allow access from this domain.`),a=Y(),s=R("h4"),s.innerHTML=`The list of allowed domains can be modified in your\xA0
        <a href="https://dashboard.nylas.com">Dashboard</a>.`},m(l,i){N(l,e,i),D(e,r),D(e,n),D(e,o),N(l,a,i),N(l,s,i)},p:g,d(l){l&&A(e),l&&A(a),l&&A(s)}}}function pa(t){let e,r=t[2]&&t[3]&&rn(t);return{c(){r&&r.c(),e=Ge(),this.c=g},m(n,o){r&&r.m(n,o),N(n,e,o)},p(n,[o]){n[2]&&n[3]?r?r.p(n,o):(r=rn(n),r.c(),r.m(e.parentNode,e)):r&&(r.d(1),r=null)},i:g,o:g,d(n){r&&r.d(n),n&&A(e)}}}function ga(t,e,r){let n;vt(t,$t,b=>r(8,n=b));var o,a,s,l;let{id:i}=e,c,u;const p=window.location.href.includes("localhost")||window.location.href.includes("127.0.0.1");return t.$$set=b=>{"id"in b&&r(0,i=b.id)},t.$$.update=()=>{t.$$.dirty&499&&(r(1,c=r(4,o=n[i])!==null&&o!==void 0?o:{name:""}),r(2,u=r(7,l=r(5,a=c.name)!==null&&a!==void 0?a:r(6,s=c.message)===null||s===void 0?void 0:s.name)!==null&&l!==void 0?l:""))},[i,c,u,p,o,a,s,l,n]}class _a extends mt{constructor(e){super();this.shadowRoot.innerHTML=`<style>.message-container{background:#fff6f6;border-radius:5px;box-shadow:0 0 0 1px #aa92a0 inset, 0 0 0 0 transparent;color:#9f3a38;font-size:1.25rem;padding:10px;margin:0 auto;transition:opacity 500ms ease, color 500ms ease,
      background-color 500ms ease, box-shadow 500ms ease,
      -webkit-box-shadow 500ms ease}.message-container *:focus{outline:5px auto Highlight;outline:5px auto -webkit-focus-ring-color}.details{color:#494949;font-size:0.75rem;width:100%}</style>`,Je(this,{target:this.shadowRoot,props:Et(this.attributes),customElement:!0},ga,pa,Kn,{id:0},null),e&&(e.target&&N(e.target,this,e.anchor),e.props&&(this.$set(e.props),G()))}static get observedAttributes(){return["id"]}get id(){return this.$$.ctx[0]}set id(e){this.$$set({id:e}),G()}}customElements.define("nylas-error",_a);function ba(t){let e,r=(t[0].given_name&&t[0].surname?t[0].given_name.charAt(0)+t[0].surname.charAt(0):t[0].name?t[0].name.charAt(0):t[0].email?t[0].email.charAt(0):"?")+"",n;return{c(){e=R("p"),n=B(r),We(e,"margin","0")},m(o,a){N(o,e,a),D(e,n)},p(o,a){a&1&&r!==(r=(o[0].given_name&&o[0].surname?o[0].given_name.charAt(0)+o[0].surname.charAt(0):o[0].name?o[0].name.charAt(0):o[0].email?o[0].email.charAt(0):"?")+"")&&le(n,r)},d(o){o&&A(e)}}}function va(t){let e,r;return{c(){e=R("img"),I(e,"alt",""),We(e,"height",t[1]),We(e,"width",t[2]),We(e,"border-radius","50%"),wr(e.src,r="data:image/jpg;base64,"+t[3])||I(e,"src",r)},m(n,o){N(n,e,o)},p(n,o){o&2&&We(e,"height",n[1]),o&4&&We(e,"width",n[2]),o&8&&!wr(e.src,r="data:image/jpg;base64,"+n[3])&&I(e,"src",r)},d(n){n&&A(e)}}}function ya(t){let e;function r(a,s){if(a[3])return va;if(a[0])return ba}let n=r(t),o=n&&n(t);return{c(){o&&o.c(),e=Ge(),this.c=g},m(a,s){o&&o.m(a,s),N(a,e,s)},p(a,[s]){n===(n=r(a))&&o?o.p(a,s):(o&&o.d(1),o=n&&n(a),o&&(o.c(),o.m(e.parentNode,e)))},i:g,o:g,d(a){o&&o.d(a),a&&A(e)}}}function ka(t,e,r){let n,{contact:o}=e,{contact_query:a}=e,{height:s="32px"}=e,{width:l="32px"}=e;return to(async()=>{o&&o.picture_url?r(3,n=await qo.getContactAvatar(a,o.id)):r(3,n=null)}),t.$$set=i=>{"contact"in i&&r(0,o=i.contact),"contact_query"in i&&r(4,a=i.contact_query),"height"in i&&r(1,s=i.height),"width"in i&&r(2,l=i.width)},r(3,n=null),[o,s,l,n,a]}class wa extends mt{constructor(e){super();Je(this,{target:this.shadowRoot,props:Et(this.attributes),customElement:!0},ka,ya,He,{contact:0,contact_query:4,height:1,width:2},null),e&&(e.target&&N(e.target,this,e.anchor),e.props&&(this.$set(e.props),G()))}static get observedAttributes(){return["contact","contact_query","height","width"]}get contact(){return this.$$.ctx[0]}set contact(e){this.$$set({contact:e}),G()}get contact_query(){return this.$$.ctx[4]}set contact_query(e){this.$$set({contact_query:e}),G()}get height(){return this.$$.ctx[1]}set height(e){this.$$set({height:e}),G()}get width(){return this.$$.ctx[2]}set width(e){this.$$set({width:e}),G()}}customElements.define("nylas-contact-image",wa);function Ta(t){let e,r,n,o,a,s,l;return{c(){e=R("div"),r=R("p"),n=B(t[0]),o=Y(),a=R("button"),a.textContent="Refresh your page",this.c=g,I(a,"type","button")},m(i,c){N(i,e,c),D(e,r),D(r,n),D(e,o),D(e,a),s||(l=kt(a,"click",t[1]),s=!0)},p(i,[c]){c&1&&le(n,i[0])},i:g,o:g,d(i){i&&A(e),s=!1,l()}}}function Ea(t,e,r){let{error_message:n="Uh oh! Looks like an error occurred"}=e;const o=()=>location.reload();return t.$$set=a=>{"error_message"in a&&r(0,n=a.error_message)},[n,o]}class Aa extends mt{constructor(e){super();this.shadowRoot.innerHTML="<style>*{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline;list-style:none}div{background:var(--red-lighter);bottom:0;color:var(--red);font-size:1rem;line-height:24px;min-height:85px;padding:20px 24px;position:fixed;right:0;min-width:240px;z-index:2}button{background:transparent;color:var(--blue);cursor:pointer;font-style:italic;text-decoration:underline;margin-top:10px}</style>",Je(this,{target:this.shadowRoot,props:Et(this.attributes),customElement:!0},Ea,Ta,He,{error_message:0},null),e&&(e.target&&N(e.target,this,e.anchor),e.props&&(this.$set(e.props),G()))}static get observedAttributes(){return["error_message"]}get error_message(){return this.$$.ctx[0]}set error_message(e){this.$$set({error_message:e}),G()}}customElements.define("nylas-message-error",Aa);function Oa(t){const e=t.toLocaleTimeString([],{timeStyle:"short"});return e==="12:00 p.m."?"Noon":e.replace(/\./g,"")}function Sa(t){const e=r=>[31,21,1].includes(r)?"st ":[22,2].includes(r)?"nd ":[23,3].includes(r)?"rd ":"th ";return t.toLocaleDateString(void 0,{year:"numeric",month:"short",day:"numeric"}).replaceAll(/, /g,e(t.getDate())).replaceAll(/[.]/g,"")}function Na(t){return t.toLocaleDateString(void 0,{month:"short",day:"numeric"}).replaceAll(/[.]/g,"")}function nn(t){const e=new Date;return e.toDateString()===t.toDateString()?Oa(t):e.getFullYear()-t.getFullYear()!==0?Sa(t):new Date(e.getDate()-1).toDateString()===t.toDateString()?"Yesterday":Na(t)}var Ca=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"?window:typeof global!="undefined"?global:typeof self!="undefined"?self:{};function Da(t,e,r){return r={path:e,exports:{},require:function(n,o){return Ra(n,o==null?r.path:o)}},t(r,r.exports),r.exports}function Ra(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var on=Da(function(t,e){/*! @license DOMPurify 2.3.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.5/LICENSE */(function(r,n){t.exports=n()})(Ca,function(){function r(m){if(Array.isArray(m)){for(var h=0,C=Array(m.length);h<m.length;h++)C[h]=m[h];return C}else return Array.from(m)}var n=Object.hasOwnProperty,o=Object.setPrototypeOf,a=Object.isFrozen,s=Object.getPrototypeOf,l=Object.getOwnPropertyDescriptor,i=Object.freeze,c=Object.seal,u=Object.create,p=typeof Reflect!="undefined"&&Reflect,b=p.apply,_=p.construct;b||(b=function(h,C,P){return h.apply(C,P)}),i||(i=function(h){return h}),c||(c=function(h){return h}),_||(_=function(h,C){return new(Function.prototype.bind.apply(h,[null].concat(r(C))))});var T=K(Array.prototype.forEach),L=K(Array.prototype.pop),O=K(Array.prototype.push),M=K(String.prototype.toLowerCase),x=K(String.prototype.match),F=K(String.prototype.replace),U=K(String.prototype.indexOf),v=K(String.prototype.trim),k=K(RegExp.prototype.test),H=_e(TypeError);function K(m){return function(h){for(var C=arguments.length,P=Array(C>1?C-1:0),j=1;j<C;j++)P[j-1]=arguments[j];return b(m,h,P)}}function _e(m){return function(){for(var h=arguments.length,C=Array(h),P=0;P<h;P++)C[P]=arguments[P];return _(m,C)}}function S(m,h){o&&o(m,null);for(var C=h.length;C--;){var P=h[C];if(typeof P=="string"){var j=M(P);j!==P&&(a(h)||(h[C]=j),P=j)}m[P]=!0}return m}function be(m){var h=u(null),C=void 0;for(C in m)b(n,m,[C])&&(h[C]=m[C]);return h}function de(m,h){for(;m!==null;){var C=l(m,h);if(C){if(C.get)return K(C.get);if(typeof C.value=="function")return K(C.value)}m=s(m)}function P(j){return console.warn("fallback value for",j),null}return P}var je=i(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),he=i(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),Ve=i(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),V=i(["animate","color-profile","cursor","discard","fedropshadow","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),Re=i(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),Te=i(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),Ee=i(["#text"]),Rt=i(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns","slot"]),dt=i(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),xt=i(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),W=i(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),Ae=c(/\{\{[\s\S]*|[\s\S]*\}\}/gm),ce=c(/<%[\s\S]*|[\s\S]*%>/gm),Xe=c(/^data-[\-\w.\u00B7-\uFFFF]/),$e=c(/^aria-[\-\w]+$/),er=c(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),tr=c(/^(?:\w+script|data):/i),wn=c(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),Oe=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(m){return typeof m}:function(m){return m&&typeof Symbol=="function"&&m.constructor===Symbol&&m!==Symbol.prototype?"symbol":typeof m};function fe(m){if(Array.isArray(m)){for(var h=0,C=Array(m.length);h<m.length;h++)C[h]=m[h];return C}else return Array.from(m)}var rr=function(){return typeof window=="undefined"?null:window},nr=function(h,C){if((typeof h=="undefined"?"undefined":Oe(h))!=="object"||typeof h.createPolicy!="function")return null;var P=null,j="data-tt-policy-suffix";C.currentScript&&C.currentScript.hasAttribute(j)&&(P=C.currentScript.getAttribute(j));var ue="dompurify"+(P?"#"+P:"");try{return h.createPolicy(ue,{createHTML:function(Ze){return Ze}})}catch(xe){return console.warn("TrustedTypes policy "+ue+" could not be created."),null}};function Lt(){var m=arguments.length>0&&arguments[0]!==void 0?arguments[0]:rr(),h=function(f){return Lt(f)};if(h.version="2.3.5",h.removed=[],!m||!m.document||m.document.nodeType!==9)return h.isSupported=!1,h;var C=m.document,P=m.document,j=m.DocumentFragment,ue=m.HTMLTemplateElement,xe=m.Node,Ze=m.Element,ze=m.NodeFilter,ve=m.NamedNodeMap,ht=ve===void 0?m.NamedNodeMap||m.MozNamedAttrMap:ve,ls=m.HTMLFormElement,cs=m.DOMParser,fs=m.trustedTypes,Mt=Ze.prototype,us=de(Mt,"cloneNode"),ms=de(Mt,"nextSibling"),ds=de(Mt,"childNodes"),or=de(Mt,"parentNode");if(typeof ue=="function"){var ar=P.createElement("template");ar.content&&ar.content.ownerDocument&&(P=ar.content.ownerDocument)}var Le=nr(fs,C),Tn=Le?Le.createHTML(""):"",Pt=P,sr=Pt.implementation,hs=Pt.createNodeIterator,ps=Pt.createDocumentFragment,gs=Pt.getElementsByTagName,_s=C.importNode,En={};try{En=be(P).documentMode?P.documentMode:{}}catch(E){}var ye={};h.isSupported=typeof or=="function"&&sr&&typeof sr.createHTMLDocument!="undefined"&&En!==9;var ir=Ae,lr=ce,bs=Xe,vs=$e,ys=tr,An=wn,cr=er,X=null,On=S({},[].concat(fe(je),fe(he),fe(Ve),fe(Re),fe(Ee))),$=null,Sn=S({},[].concat(fe(Rt),fe(dt),fe(xt),fe(W))),J=Object.seal(Object.create(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),pt=null,fr=null,Nn=!0,ur=!0,Cn=!1,Qe=!1,qe=!1,mr=!1,dr=!1,et=!1,It=!1,Ft=!1,Dn=!0,hr=!0,gt=!1,tt={},rt=null,Rn=S({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]),xn=null,Ln=S({},["audio","video","img","source","image","track"]),pr=null,Mn=S({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),gr="http://www.w3.org/1998/Math/MathML",_r="http://www.w3.org/2000/svg",Me="http://www.w3.org/1999/xhtml",jt=Me,br=!1,nt=void 0,ks=["application/xhtml+xml","text/html"],ws="text/html",Ue=void 0,ot=null,Ts=P.createElement("form"),Pn=function(f){return f instanceof RegExp||f instanceof Function},vr=function(f){ot&&ot===f||((!f||(typeof f=="undefined"?"undefined":Oe(f))!=="object")&&(f={}),f=be(f),X="ALLOWED_TAGS"in f?S({},f.ALLOWED_TAGS):On,$="ALLOWED_ATTR"in f?S({},f.ALLOWED_ATTR):Sn,pr="ADD_URI_SAFE_ATTR"in f?S(be(Mn),f.ADD_URI_SAFE_ATTR):Mn,xn="ADD_DATA_URI_TAGS"in f?S(be(Ln),f.ADD_DATA_URI_TAGS):Ln,rt="FORBID_CONTENTS"in f?S({},f.FORBID_CONTENTS):Rn,pt="FORBID_TAGS"in f?S({},f.FORBID_TAGS):{},fr="FORBID_ATTR"in f?S({},f.FORBID_ATTR):{},tt="USE_PROFILES"in f?f.USE_PROFILES:!1,Nn=f.ALLOW_ARIA_ATTR!==!1,ur=f.ALLOW_DATA_ATTR!==!1,Cn=f.ALLOW_UNKNOWN_PROTOCOLS||!1,Qe=f.SAFE_FOR_TEMPLATES||!1,qe=f.WHOLE_DOCUMENT||!1,et=f.RETURN_DOM||!1,It=f.RETURN_DOM_FRAGMENT||!1,Ft=f.RETURN_TRUSTED_TYPE||!1,dr=f.FORCE_BODY||!1,Dn=f.SANITIZE_DOM!==!1,hr=f.KEEP_CONTENT!==!1,gt=f.IN_PLACE||!1,cr=f.ALLOWED_URI_REGEXP||cr,jt=f.NAMESPACE||Me,f.CUSTOM_ELEMENT_HANDLING&&Pn(f.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(J.tagNameCheck=f.CUSTOM_ELEMENT_HANDLING.tagNameCheck),f.CUSTOM_ELEMENT_HANDLING&&Pn(f.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(J.attributeNameCheck=f.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),f.CUSTOM_ELEMENT_HANDLING&&typeof f.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements=="boolean"&&(J.allowCustomizedBuiltInElements=f.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),nt=ks.indexOf(f.PARSER_MEDIA_TYPE)===-1?nt=ws:nt=f.PARSER_MEDIA_TYPE,Ue=nt==="application/xhtml+xml"?function(d){return d}:M,Qe&&(ur=!1),It&&(et=!0),tt&&(X=S({},[].concat(fe(Ee))),$=[],tt.html===!0&&(S(X,je),S($,Rt)),tt.svg===!0&&(S(X,he),S($,dt),S($,W)),tt.svgFilters===!0&&(S(X,Ve),S($,dt),S($,W)),tt.mathMl===!0&&(S(X,Re),S($,xt),S($,W))),f.ADD_TAGS&&(X===On&&(X=be(X)),S(X,f.ADD_TAGS)),f.ADD_ATTR&&($===Sn&&($=be($)),S($,f.ADD_ATTR)),f.ADD_URI_SAFE_ATTR&&S(pr,f.ADD_URI_SAFE_ATTR),f.FORBID_CONTENTS&&(rt===Rn&&(rt=be(rt)),S(rt,f.FORBID_CONTENTS)),hr&&(X["#text"]=!0),qe&&S(X,["html","head","body"]),X.table&&(S(X,["tbody"]),delete pt.tbody),i&&i(f),ot=f)},In=S({},["mi","mo","mn","ms","mtext"]),Fn=S({},["foreignobject","desc","title","annotation-xml"]),zt=S({},he);S(zt,Ve),S(zt,V);var yr=S({},Re);S(yr,Te);var Es=function(f){var d=or(f);(!d||!d.tagName)&&(d={namespaceURI:Me,tagName:"template"});var y=M(f.tagName),z=M(d.tagName);if(f.namespaceURI===_r)return d.namespaceURI===Me?y==="svg":d.namespaceURI===gr?y==="svg"&&(z==="annotation-xml"||In[z]):Boolean(zt[y]);if(f.namespaceURI===gr)return d.namespaceURI===Me?y==="math":d.namespaceURI===_r?y==="math"&&Fn[z]:Boolean(yr[y]);if(f.namespaceURI===Me){if(d.namespaceURI===_r&&!Fn[z]||d.namespaceURI===gr&&!In[z])return!1;var Q=S({},["title","style","font","a","script"]);return!yr[y]&&(Q[y]||!zt[y])}return!1},Se=function(f){O(h.removed,{element:f});try{f.parentNode.removeChild(f)}catch(d){try{f.outerHTML=Tn}catch(y){f.remove()}}},jn=function(f,d){try{O(h.removed,{attribute:d.getAttributeNode(f),from:d})}catch(y){O(h.removed,{attribute:null,from:d})}if(d.removeAttribute(f),f==="is"&&!$[f])if(et||It)try{Se(d)}catch(y){}else try{d.setAttribute(f,"")}catch(y){}},zn=function(f){var d=void 0,y=void 0;if(dr)f="<remove></remove>"+f;else{var z=x(f,/^[\r\n\t ]+/);y=z&&z[0]}nt==="application/xhtml+xml"&&(f='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+f+"</body></html>");var Q=Le?Le.createHTML(f):f;if(jt===Me)try{d=new cs().parseFromString(Q,nt)}catch(Z){}if(!d||!d.documentElement){d=sr.createDocument(jt,"template",null);try{d.documentElement.innerHTML=br?"":Q}catch(Z){}}var q=d.body||d.documentElement;return f&&y&&q.insertBefore(P.createTextNode(y),q.childNodes[0]||null),jt===Me?gs.call(d,qe?"html":"body")[0]:qe?d.documentElement:q},Un=function(f){return hs.call(f.ownerDocument||f,f,ze.SHOW_ELEMENT|ze.SHOW_COMMENT|ze.SHOW_TEXT,null,!1)},As=function(f){return f instanceof ls&&(typeof f.nodeName!="string"||typeof f.textContent!="string"||typeof f.removeChild!="function"||!(f.attributes instanceof ht)||typeof f.removeAttribute!="function"||typeof f.setAttribute!="function"||typeof f.namespaceURI!="string"||typeof f.insertBefore!="function")},_t=function(f){return(typeof xe=="undefined"?"undefined":Oe(xe))==="object"?f instanceof xe:f&&(typeof f=="undefined"?"undefined":Oe(f))==="object"&&typeof f.nodeType=="number"&&typeof f.nodeName=="string"},Ne=function(f,d,y){!ye[f]||T(ye[f],function(z){z.call(h,d,y,ot)})},Hn=function(f){var d=void 0;if(Ne("beforeSanitizeElements",f,null),As(f)||x(f.nodeName,/[\u0080-\uFFFF]/))return Se(f),!0;var y=Ue(f.nodeName);if(Ne("uponSanitizeElement",f,{tagName:y,allowedTags:X}),!_t(f.firstElementChild)&&(!_t(f.content)||!_t(f.content.firstElementChild))&&k(/<[/\w]/g,f.innerHTML)&&k(/<[/\w]/g,f.textContent)||y==="select"&&k(/<template/i,f.innerHTML))return Se(f),!0;if(!X[y]||pt[y]){if(hr&&!rt[y]){var z=or(f)||f.parentNode,Q=ds(f)||f.childNodes;if(Q&&z)for(var q=Q.length,Z=q-1;Z>=0;--Z)z.insertBefore(us(Q[Z],!0),ms(f))}return!pt[y]&&Gn(y)&&(J.tagNameCheck instanceof RegExp&&k(J.tagNameCheck,y)||J.tagNameCheck instanceof Function&&J.tagNameCheck(y))?!1:(Se(f),!0)}return f instanceof Ze&&!Es(f)||(y==="noscript"||y==="noembed")&&k(/<\/no(script|embed)/i,f.innerHTML)?(Se(f),!0):(Qe&&f.nodeType===3&&(d=f.textContent,d=F(d,ir," "),d=F(d,lr," "),f.textContent!==d&&(O(h.removed,{element:f.cloneNode()}),f.textContent=d)),Ne("afterSanitizeElements",f,null),!1)},Bn=function(f,d,y){if(Dn&&(d==="id"||d==="name")&&(y in P||y in Ts))return!1;if(!(ur&&!fr[d]&&k(bs,d))){if(!(Nn&&k(vs,d))){if(!$[d]||fr[d]){if(!(Gn(f)&&(J.tagNameCheck instanceof RegExp&&k(J.tagNameCheck,f)||J.tagNameCheck instanceof Function&&J.tagNameCheck(f))&&(J.attributeNameCheck instanceof RegExp&&k(J.attributeNameCheck,d)||J.attributeNameCheck instanceof Function&&J.attributeNameCheck(d))||d==="is"&&J.allowCustomizedBuiltInElements&&(J.tagNameCheck instanceof RegExp&&k(J.tagNameCheck,y)||J.tagNameCheck instanceof Function&&J.tagNameCheck(y))))return!1}else if(!pr[d]){if(!k(cr,F(y,An,""))){if(!((d==="src"||d==="xlink:href"||d==="href")&&f!=="script"&&U(y,"data:")===0&&xn[f])){if(!(Cn&&!k(ys,F(y,An,"")))){if(y)return!1}}}}}}return!0},Gn=function(f){return f.indexOf("-")>0},Wn=function(f){var d=void 0,y=void 0,z=void 0,Q=void 0;Ne("beforeSanitizeAttributes",f,null);var q=f.attributes;if(!!q){var Z={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:$};for(Q=q.length;Q--;){d=q[Q];var Ut=d,me=Ut.name,Jn=Ut.namespaceURI;if(y=v(d.value),z=Ue(me),Z.attrName=z,Z.attrValue=y,Z.keepAttr=!0,Z.forceKeepAttr=void 0,Ne("uponSanitizeAttribute",f,Z),y=Z.attrValue,!Z.forceKeepAttr&&(jn(me,f),!!Z.keepAttr)){if(k(/\/>/i,y)){jn(me,f);continue}Qe&&(y=F(y,ir," "),y=F(y,lr," "));var Ss=Ue(f.nodeName);if(!!Bn(Ss,z,y))try{Jn?f.setAttributeNS(Jn,me,y):f.setAttribute(me,y),L(h.removed)}catch(Ns){}}}Ne("afterSanitizeAttributes",f,null)}},Os=function E(f){var d=void 0,y=Un(f);for(Ne("beforeSanitizeShadowDOM",f,null);d=y.nextNode();)Ne("uponSanitizeShadowNode",d,null),!Hn(d)&&(d.content instanceof j&&E(d.content),Wn(d));Ne("afterSanitizeShadowDOM",f,null)};return h.sanitize=function(E,f){var d=void 0,y=void 0,z=void 0,Q=void 0,q=void 0;if(br=!E,br&&(E="<!-->"),typeof E!="string"&&!_t(E)){if(typeof E.toString!="function")throw H("toString is not a function");if(E=E.toString(),typeof E!="string")throw H("dirty is not a string, aborting")}if(!h.isSupported){if(Oe(m.toStaticHTML)==="object"||typeof m.toStaticHTML=="function"){if(typeof E=="string")return m.toStaticHTML(E);if(_t(E))return m.toStaticHTML(E.outerHTML)}return E}if(mr||vr(f),h.removed=[],typeof E=="string"&&(gt=!1),gt){if(E.nodeName){var Z=Ue(E.nodeName);if(!X[Z]||pt[Z])throw H("root node is forbidden and cannot be sanitized in-place")}}else if(E instanceof xe)d=zn("<!---->"),y=d.ownerDocument.importNode(E,!0),y.nodeType===1&&y.nodeName==="BODY"||y.nodeName==="HTML"?d=y:d.appendChild(y);else{if(!et&&!Qe&&!qe&&E.indexOf("<")===-1)return Le&&Ft?Le.createHTML(E):E;if(d=zn(E),!d)return et?null:Ft?Tn:""}d&&dr&&Se(d.firstChild);for(var Ut=Un(gt?E:d);z=Ut.nextNode();)z.nodeType===3&&z===Q||Hn(z)||(z.content instanceof j&&Os(z.content),Wn(z),Q=z);if(Q=null,gt)return E;if(et){if(It)for(q=ps.call(d.ownerDocument);d.firstChild;)q.appendChild(d.firstChild);else q=d;return $.shadowroot&&(q=_s.call(C,q,!0)),q}var me=qe?d.outerHTML:d.innerHTML;return Qe&&(me=F(me,ir," "),me=F(me,lr," ")),Le&&Ft?Le.createHTML(me):me},h.setConfig=function(E){vr(E),mr=!0},h.clearConfig=function(){ot=null,mr=!1},h.isValidAttribute=function(E,f,d){ot||vr({});var y=Ue(E),z=Ue(f);return Bn(y,z,d)},h.addHook=function(E,f){typeof f=="function"&&(ye[E]=ye[E]||[],O(ye[E],f))},h.removeHook=function(E){ye[E]&&L(ye[E])},h.removeHooks=function(E){ye[E]&&(ye[E]=[])},h.removeAllHooks=function(){ye={}},h}var w=Lt();return w})});function xa(t){let e,r,n=[{width:"13"},{height:"13"},{viewBox:"0 0 13 13"},{xmlns:"http://www.w3.org/2000/svg"},t[0]],o={};for(let a=0;a<n.length;a+=1)o=Ce(o,n[a]);return{c(){e=st("svg"),r=st("path"),this.h()},l(a){e=Tt(a,"svg",{width:!0,height:!0,viewBox:!0,xmlns:!0});var s=it(e);r=Tt(s,"path",{d:!0,fill:!0}),it(r).forEach(A),s.forEach(A),this.h()},h(){I(r,"d","M0.460449 12.1807L13.0001 6.50003L0.460449 0.819336V5.23765L9.41731 6.50003L0.460449 7.76241V12.1807Z"),I(r,"fill","white"),wt(e,o)},m(a,s){Ar(a,e,s),Gt(e,r)},p(a,[s]){wt(e,o=Nr(n,[{width:"13"},{height:"13"},{viewBox:"0 0 13 13"},{xmlns:"http://www.w3.org/2000/svg"},s&1&&a[0]]))},i:g,o:g,d(a){a&&A(e)}}}function La(t,e,r){return t.$$set=n=>{r(0,e=Ce(Ce({},e),Be(n)))},e=Be(e),[e]}class Ma extends Dr{constructor(e){super();Je(this,e,La,xa,He,{})}}function Pa(t){let e,r,n=[{width:"12"},{height:"12"},{viewBox:"0 0 12 12"},{xmlns:"http://www.w3.org/2000/svg"},t[0]],o={};for(let a=0;a<n.length;a+=1)o=Ce(o,n[a]);return{c(){e=st("svg"),r=st("path"),this.h()},l(a){e=Tt(a,"svg",{width:!0,height:!0,viewBox:!0,xmlns:!0});var s=it(e);r=Tt(s,"path",{d:!0,fill:!0}),it(r).forEach(A),s.forEach(A),this.h()},h(){I(r,"d","M1.49229 3.49889C1.24729 3.74389 1.24729 4.13889 1.49229 4.38389L5.64729 8.53889C5.84229 8.73389 6.15729 8.73389 6.35229 8.53889L10.5073 4.38389C10.7523 4.13889 10.7523 3.74389 10.5073 3.49889C10.2623 3.25389 9.86729 3.25389 9.62229 3.49889L5.99729 7.11889L2.37229 3.49389C2.13229 3.25389 1.73229 3.25389 1.49229 3.49889Z"),I(r,"fill","#636671"),wt(e,o)},m(a,s){Ar(a,e,s),Gt(e,r)},p(a,[s]){wt(e,o=Nr(n,[{width:"12"},{height:"12"},{viewBox:"0 0 12 12"},{xmlns:"http://www.w3.org/2000/svg"},s&1&&a[0]]))},i:g,o:g,d(a){a&&A(e)}}}function Ia(t,e,r){return t.$$set=n=>{r(0,e=Ce(Ce({},e),Be(n)))},e=Be(e),[e]}class Fa extends Dr{constructor(e){super();Je(this,e,Ia,Pa,He,{})}}function an(t,e,r){const n=t.slice();return n[51]=e[r],n[53]=r,n}function sn(t,e,r){const n=t.slice();return n[57]=e[r],n}function ln(t,e,r){const n=t.slice();return n[57]=e[r],n}function cn(t){let e,r;return{c(){e=R("nylas-message-error"),ie(e,"error_message",r=t[5][t[0]].message)},m(n,o){N(n,e,o)},p(n,o){o[0]&33&&r!==(r=n[5][n[0]].message)&&ie(e,"error_message",r)},d(n){n&&A(e)}}}function ja(t){let e,r;return{c(){e=R("nylas-message-error"),ie(e,"error_message",r=t[62].message)},m(n,o){N(n,e,o)},p(n,o){o[0]&8&&r!==(r=n[62].message)&&ie(e,"error_message",r)},i:g,o:g,d(n){n&&A(e)}}}function za(t){let e,r,n,o,a,s,l,i,c,u,p,b,_=t[10].to.length&&fn(t),T=(t[10].to.length>1||t[10].cc.length)&&un(t),L=t[13]&&mn(t),O=t[10].to.length&&pn(t),M=t[10].cc.length&&gn(t),x=t[2],F=[];for(let v=0;v<x.length;v+=1)F[v]=_n(an(t,x,v));let U=t[1].show_reply&&bn(t);return{c(){e=R("header"),_&&_.c(),r=Y(),T&&T.c(),n=Y(),L&&L.c(),o=Y(),a=R("header"),O&&O.c(),s=Y(),M&&M.c(),l=Y(),i=R("div");for(let v=0;v<F.length;v+=1)F[v].c();u=Y(),U&&U.c(),p=Ge(),I(e,"class","mobile"),ne(e,"loading",t[8]==="loading"),ne(e,"error",t[14]),ne(e,"expanded",t[13]),I(a,"class","tablet"),ne(a,"error",t[14]),ne(a,"loading",t[8]==="loading"),I(i,"class",c="messages "+t[1].theme),ne(i,"dont-show-avatars",!t[1].show_avatars)},m(v,k){N(v,e,k),_&&_.m(e,null),D(e,r),T&&T.m(e,null),D(e,n),L&&L.m(e,null),N(v,o,k),N(v,a,k),O&&O.m(a,null),D(a,s),M&&M.m(a,null),N(v,l,k),N(v,i,k);for(let H=0;H<F.length;H+=1)F[H].m(i,null);N(v,u,k),U&&U.m(v,k),N(v,p,k),b=!0},p(v,k){if(v[10].to.length?_?_.p(v,k):(_=fn(v),_.c(),_.m(e,r)):_&&(_.d(1),_=null),v[10].to.length>1||v[10].cc.length?T?(T.p(v,k),k[0]&1024&&ae(T,1)):(T=un(v),T.c(),ae(T,1),T.m(e,n)):T&&(Nt(),pe(T,1,1,()=>{T=null}),Ct()),v[13]?L?L.p(v,k):(L=mn(v),L.c(),L.m(e,null)):L&&(L.d(1),L=null),k[0]&256&&ne(e,"loading",v[8]==="loading"),k[0]&16384&&ne(e,"error",v[14]),k[0]&8192&&ne(e,"expanded",v[13]),v[10].to.length?O?O.p(v,k):(O=pn(v),O.c(),O.m(a,s)):O&&(O.d(1),O=null),v[10].cc.length?M?M.p(v,k):(M=gn(v),M.c(),M.m(a,null)):M&&(M.d(1),M=null),k[0]&16384&&ne(a,"error",v[14]),k[0]&256&&ne(a,"loading",v[8]==="loading"),k[0]&598){x=v[2];let H;for(H=0;H<x.length;H+=1){const K=an(v,x,H);F[H]?F[H].p(K,k):(F[H]=_n(K),F[H].c(),F[H].m(i,null))}for(;H<F.length;H+=1)F[H].d(1);F.length=x.length}(!b||k[0]&2&&c!==(c="messages "+v[1].theme))&&I(i,"class",c),k[0]&2&&ne(i,"dont-show-avatars",!v[1].show_avatars),v[1].show_reply?U?(U.p(v,k),k[0]&2&&ae(U,1)):(U=bn(v),U.c(),ae(U,1),U.m(p.parentNode,p)):U&&(Nt(),pe(U,1,1,()=>{U=null}),Ct())},i(v){b||(ae(T),ae(U),b=!0)},o(v){pe(T),pe(U),b=!1},d(v){v&&A(e),_&&_.d(),T&&T.d(),L&&L.d(),v&&A(o),v&&A(a),O&&O.d(),M&&M.d(),v&&A(l),v&&A(i),Wt(F,v),v&&A(u),U&&U.d(v),v&&A(p)}}}function fn(t){let e,r,n=t[10].to[0].email+"",o;return{c(){e=R("span"),r=B("to: "),o=B(n)},m(a,s){N(a,e,s),D(e,r),D(e,o)},p(a,s){s[0]&1024&&n!==(n=a[10].to[0].email+"")&&le(o,n)},d(a){a&&A(e)}}}function un(t){let e,r,n,o,a;return r=new Fa({props:{"aria-hidden":"true"}}),{c(){e=R("button"),Cr(r.$$.fragment),I(e,"aria-label","Toggle showing additional emails in this thread")},m(s,l){N(s,e,l),Xt(r,e,null),n=!0,o||(a=kt(e,"click",t[34]),o=!0)},p:g,i(s){n||(ae(r.$$.fragment,s),n=!0)},o(s){pe(r.$$.fragment,s),n=!1},d(s){s&&A(e),Dt(r),o=!1,a()}}}function mn(t){let e,r,n=t[10].to.slice(1),o=[];for(let l=0;l<n.length;l+=1)o[l]=dn(ln(t,n,l));let a=t[10].cc,s=[];for(let l=0;l<a.length;l+=1)s[l]=hn(sn(t,a,l));return{c(){for(let l=0;l<o.length;l+=1)o[l].c();e=Y();for(let l=0;l<s.length;l+=1)s[l].c();r=Ge()},m(l,i){for(let c=0;c<o.length;c+=1)o[c].m(l,i);N(l,e,i);for(let c=0;c<s.length;c+=1)s[c].m(l,i);N(l,r,i)},p(l,i){if(i[0]&1024){n=l[10].to.slice(1);let c;for(c=0;c<n.length;c+=1){const u=ln(l,n,c);o[c]?o[c].p(u,i):(o[c]=dn(u),o[c].c(),o[c].m(e.parentNode,e))}for(;c<o.length;c+=1)o[c].d(1);o.length=n.length}if(i[0]&1024){a=l[10].cc;let c;for(c=0;c<a.length;c+=1){const u=sn(l,a,c);s[c]?s[c].p(u,i):(s[c]=hn(u),s[c].c(),s[c].m(r.parentNode,r))}for(;c<s.length;c+=1)s[c].d(1);s.length=a.length}},d(l){Wt(o,l),l&&A(e),Wt(s,l),l&&A(r)}}}function dn(t){let e,r,n=t[57].email+"",o;return{c(){e=R("span"),r=B("to: "),o=B(n)},m(a,s){N(a,e,s),D(e,r),D(e,o)},p(a,s){s[0]&1024&&n!==(n=a[57].email+"")&&le(o,n)},d(a){a&&A(e)}}}function hn(t){let e,r,n=t[57].email+"",o;return{c(){e=R("span"),r=B("cc: "),o=B(n)},m(a,s){N(a,e,s),D(e,r),D(e,o)},p(a,s){s[0]&1024&&n!==(n=a[57].email+"")&&le(o,n)},d(a){a&&A(e)}}}function pn(t){let e,r,n=t[10].to.map(vn).join(", ")+"",o;return{c(){e=R("span"),r=B("to: "),o=B(n)},m(a,s){N(a,e,s),D(e,r),D(e,o)},p(a,s){s[0]&1024&&n!==(n=a[10].to.map(vn).join(", ")+"")&&le(o,n)},d(a){a&&A(e)}}}function gn(t){let e,r,n=t[10].cc.map(yn).join(", ")+"",o;return{c(){e=R("span"),r=B("cc: "),o=B(n)},m(a,s){N(a,e,s),D(e,r),D(e,o)},p(a,s){s[0]&1024&&n!==(n=a[10].cc.map(yn).join(", ")+"")&&le(o,n)},d(a){a&&A(e)}}}function Ua(t){return{c:g,m:g,p:g,d:g}}function Ha(t){let e,r,n={ctx:t,current:null,token:null,hasCatch:!1,pending:es,then:Ga,catch:Ba,value:55};return ge(e=t[54].email===t[1].you.email_address,n),{c(){n.block.c(),r=Y()},m(o,a){n.block.m(o,n.anchor=a),n.mount=()=>r.parentNode,n.anchor=r,N(o,r,a)},p(o,a){t=o,n.ctx=t,a[0]&6&&e!==(e=t[54].email===t[1].you.email_address)&&ge(e,n)||ut(n,t,a)},d(o){n.block.d(o),n.token=null,n=null,o&&A(r)}}}function Ba(t){return{c:g,m:g,p:g,d:g}}function Ga(t){let e,r;function n(...a){return t[35](t[54],...a)}let o={ctx:t,current:null,token:null,hasCatch:!1,pending:qa,then:Ja,catch:Wa,value:56};return ge(r=t[6].findIndex(n),o),{c(){e=Ge(),o.block.c()},m(a,s){N(a,e,s),o.block.m(a,o.anchor=s),o.mount=()=>e.parentNode,o.anchor=e},p(a,s){t=a,o.ctx=t,s[0]&68&&r!==(r=t[6].findIndex(n))&&ge(r,o)||ut(o,t,s)},d(a){a&&A(e),o.block.d(a),o.token=null,o=null}}}function Wa(t){return{c:g,m:g,p:g,d:g}}function Ja(t){let e,r,n,o,a,s,l,i,c,u=nn(new Date(t[51].date*1e3))+"",p,b,_={ctx:t,current:null,token:null,hasCatch:!1,pending:Va,then:Ka,catch:Ya,value:57};ge(n=t[4][t[54].email],_);function T(M,x){return x[0]&4&&(s=null),x[0]&4&&(l=null),M[51].conversation?Qa:(s==null&&(s=!!(M[51].hasOwnProperty("conversation")&&!M[51].conversation)),s?Za:(l==null&&(l=!!M[51].snippet.includes(" On ")),l?$a:Xa))}let L=T(t,[-1,-1,-1]),O=L(t);return{c(){e=R("article"),r=R("div"),_.block.c(),o=Y(),a=R("div"),O.c(),i=Y(),c=R("div"),p=B(u),I(r,"class","contact"),I(a,"class","body"),I(c,"class","time"),I(e,"class",b="message member-"+(t[56]+1)),ne(e,"you",t[55])},m(M,x){N(M,e,x),D(e,r),_.block.m(r,_.anchor=null),_.mount=()=>r,_.anchor=null,D(e,o),D(e,a),O.m(a,null),D(e,i),D(e,c),D(c,p)},p(M,x){t=M,_.ctx=t,x[0]&20&&n!==(n=t[4][t[54].email])&&ge(n,_)||ut(_,t,x),L===(L=T(t,x))&&O?O.p(t,x):(O.d(1),O=L(t),O&&(O.c(),O.m(a,null))),x[0]&4&&u!==(u=nn(new Date(t[51].date*1e3))+"")&&le(p,u),x[0]&68&&b!==(b="message member-"+(t[56]+1))&&I(e,"class",b),x[0]&70&&ne(e,"you",t[55])},d(M){M&&A(e),_.block.d(),_.token=null,_=null,O.d()}}}function Ya(t){return{c:g,m:g,p:g,d:g}}function Ka(t){let e,r,n;return{c(){e=R("div"),r=R("nylas-contact-image"),ie(r,"contact_query",t[9]),ie(r,"contact",n=t[57]),ie(r,"height","32px"),ie(r,"width","32px"),I(e,"class","avatar")},m(o,a){N(o,e,a),D(e,r)},p(o,a){a[0]&512&&ie(r,"contact_query",o[9]),a[0]&20&&n!==(n=o[57])&&ie(r,"contact",n)},d(o){o&&A(e)}}}function Va(t){return{c:g,m:g,p:g,d:g}}function Xa(t){let e,r=t[51].snippet+"",n;return{c(){e=R("p"),n=B(r)},m(o,a){N(o,e,a),D(e,n)},p(o,a){a[0]&4&&r!==(r=o[51].snippet+"")&&le(n,r)},d(o){o&&A(e)}}}function $a(t){let e,r=t[51].snippet.split("On ")[0]+"",n,o,a,s,l=t[51].snippet.split("On ")[1]+"",i;return{c(){e=R("p"),n=B(r),o=Y(),a=R("p"),s=B("On "),i=B(l),I(a,"class","after")},m(c,u){N(c,e,u),D(e,n),N(c,o,u),N(c,a,u),D(a,s),D(a,i)},p(c,u){u[0]&4&&r!==(r=c[51].snippet.split("On ")[0]+"")&&le(n,r),u[0]&4&&l!==(l=c[51].snippet.split("On ")[1]+"")&&le(i,l)},d(c){c&&A(e),c&&A(o),c&&A(a)}}}function Za(t){let e,r=on.sanitize(t[51].body)+"";return{c(){e=R("p")},m(n,o){N(n,e,o),e.innerHTML=r},p(n,o){o[0]&4&&r!==(r=on.sanitize(n[51].body)+"")&&(e.innerHTML=r)},d(n){n&&A(e)}}}function Qa(t){let e,r=t[51].conversation+"",n;return{c(){e=R("p"),n=B(r)},m(o,a){N(o,e,a),D(e,n)},p(o,a){a[0]&4&&r!==(r=o[51].conversation+"")&&le(n,r)},d(o){o&&A(e)}}}function qa(t){return{c:g,m:g,p:g,d:g}}function es(t){return{c:g,m:g,p:g,d:g}}function ts(t){return{c:g,m:g,p:g,d:g}}function _n(t){let e,r,n={ctx:t,current:null,token:null,hasCatch:!1,pending:ts,then:Ha,catch:Ua,value:54};return ge(r=t[51].from[0],n),{c(){e=Ge(),n.block.c()},m(o,a){N(o,e,a),n.block.m(o,n.anchor=a),n.mount=()=>e.parentNode,n.anchor=e},p(o,a){t=o,n.ctx=t,a[0]&4&&r!==(r=t[51].from[0])&&ge(r,n)||ut(n,t,a)},d(o){o&&A(e),n.block.d(o),n.token=null,n=null}}}function bn(t){let e,r,n,o,a,s,l,i,c,u,p,b,_,T;const L=[ns,rs],O=[];function M(x,F){return x[12]==="sending"?0:1}return i=M(t),c=O[i]=L[i](t),{c(){e=R("div"),r=R("form"),n=R("label"),n.textContent="Type and send a response",o=Y(),a=R("input"),s=Y(),l=R("button"),c.c(),I(n,"for","send-response"),I(n,"class","sr-only"),I(a,"id","send-response"),I(a,"type","text"),I(a,"placeholder","Type a Response"),I(l,"type","submit"),l.disabled=u=!t[10].to.length,I(l,"aria-label",p=`Send${t[12]?"ing":""} email`),I(e,"class","reply-box")},m(x,F){N(x,e,F),D(e,r),D(r,n),D(r,o),D(r,a),Or(a,t[11]),D(r,s),D(r,l),O[i].m(l,null),b=!0,_||(T=[kt(a,"input",t[36]),kt(r,"submit",t[15])],_=!0)},p(x,F){F[0]&2048&&a.value!==x[11]&&Or(a,x[11]);let U=i;i=M(x),i!==U&&(Nt(),pe(O[U],1,1,()=>{O[U]=null}),Ct(),c=O[i],c||(c=O[i]=L[i](x),c.c()),ae(c,1),c.m(l,null)),(!b||F[0]&1024&&u!==(u=!x[10].to.length))&&(l.disabled=u),(!b||F[0]&4096&&p!==(p=`Send${x[12]?"ing":""} email`))&&I(l,"aria-label",p)},i(x){b||(ae(c),b=!0)},o(x){pe(c),b=!1},d(x){x&&A(e),O[i].d(),_=!1,De(T)}}}function rs(t){let e,r;return e=new Ma({props:{"aria-hidden":"true"}}),{c(){Cr(e.$$.fragment)},m(n,o){Xt(e,n,o),r=!0},i(n){r||(ae(e.$$.fragment,n),r=!0)},o(n){pe(e.$$.fragment,n),r=!1},d(n){Dt(e,n)}}}function ns(t){let e;return{c(){e=B("...")},m(r,n){N(r,e,n)},i:g,o:g,d(r){r&&A(e)}}}function os(t){let e;return{c(){e=R("div"),I(e,"class","loading status")},m(r,n){N(r,e,n)},p:g,i:g,o:g,d(r){r&&A(e)}}}function as(t){let e,r,n,o,a,s,l=t[14]&&cn(t),i={ctx:t,current:null,token:null,hasCatch:!0,pending:os,then:za,catch:ja,value:50,error:62,blocks:[,,,]};return ge(a=t[3],i),{c(){e=R("nylas-error"),r=Y(),n=R("main"),l&&l.c(),o=Y(),i.block.c(),this.c=g,ie(e,"id",t[0])},m(c,u){N(c,e,u),N(c,r,u),N(c,n,u),l&&l.m(n,null),D(n,o),i.block.m(n,i.anchor=null),i.mount=()=>n,i.anchor=null,t[37](n),s=!0},p(c,u){t=c,(!s||u[0]&1)&&ie(e,"id",t[0]),t[14]?l?l.p(t,u):(l=cn(t),l.c(),l.m(n,o)):l&&(l.d(1),l=null),i.ctx=t,u[0]&8&&a!==(a=t[3])&&ge(a,i)||ut(i,t,u)},i(c){s||(ae(i.block),s=!0)},o(c){for(let u=0;u<3;u+=1){const p=i.blocks[u];pe(p)}s=!1},d(c){c&&A(e),c&&A(r),c&&A(n),l&&l.d(),i.block.d(),i.token=null,i=null,t[37](null)}}}const ss=20,vn=t=>t.email,yn=t=>t.email;function is(t,e,r){let n,o,a,s;vt(t,Zt,w=>r(39,o=w)),vt(t,$t,w=>r(5,a=w)),vt(t,fa,w=>r(40,s=w));var l=this&&this.__awaiter||function(w,m,h,C){function P(j){return j instanceof h?j:new h(function(ue){ue(j)})}return new(h||(h=Promise))(function(j,ue){function xe(ve){try{ze(C.next(ve))}catch(ht){ue(ht)}}function Ze(ve){try{ze(C.throw(ve))}catch(ht){ue(ht)}}function ze(ve){ve.done?j(ve.value):P(ve.value).then(xe,Ze)}ze((C=C.apply(w,m||[])).next())})},i,c,u,p,b;let{id:_=""}=e,{access_token:T=""}=e,{messages:L=[]}=e,{show_avatars:O}=e,{show_reply:M}=e,{theme:x}=e,{thread_id:F}=e,{you:U}=e;const v={show_avatars:!1,show_reply:!1,theme:"theme-1",thread_id:"",you:{}};let k=qt({},{},v),H={};const K=ua(ct());let _e;ro(()=>l(void 0,void 0,void 0,function*(){var w;r(28,H=(yield s[JSON.stringify({component_id:_,access_token:T})])||{}),r(1,k=qt(e,H,v)),_&&!((w=k.you)===null||w===void 0?void 0:w.id)&&!_e&&r(1,k.you=yield Lo({component_id:he.component_id,access_token:T}),k)}));let S,be=[],de,je=e,he,Ve,V=null,Re="loading",Te=null,Ee;function Rt(w){var m;return l(this,void 0,void 0,function*(){const h=((m=w.messages)===null||m===void 0?void 0:m.reduce((P,j)=>{const ue=j.from[0];return P[ue.email]=ue,P},{}))||{},C=Array.from(Object.values(h))||[];for(const P of C){const j=P.email;Te||r(4,Te={}),j&&!Te[j]&&r(4,Te[j]=yield dt(P),Te)}})}function dt(w){var m;return l(this,void 0,void 0,function*(){if(r(9,Ee.query=`?email=${w.email}`,Ee),_){let h=o[JSON.stringify(Ee)];return h||(h=yield Zt.addContact(Ee)),(m=h[0])!==null&&m!==void 0?m:w}else return w})}function xt(){return l(this,void 0,void 0,function*(){he.component_id&&he.thread_id&&(r(8,Re="loading"),r(3,V=yield Zr.getConversation(he)),r(8,Re="loaded"))})}let W={to:[],from:[],cc:[]},Ae="",ce,Xe=!1,$e="";function er(){return Mo({access_token:T,component_id:_,message_id:S.slice(-ss).map(w=>w.id)}).then(w=>{w.forEach(m=>{let h=S.find(C=>C.id===m.id);h&&(h.conversation=m.conversation,h.body=m.body)}),r(2,S),r(29,_e),r(1,k),r(3,V),r(30,je),r(49,e),r(28,H)}),!0}function tr(w){if(w.preventDefault(),K("sendMessageClicked",{event:w,message:Object.assign(Object.assign({},W),{body:Ae})}),!V&&_e){r(11,Ae="");return}if($e!=="sending"){if(r(12,$e="sending"),!V)return;xo(_,{from:W.from,to:W.to,body:Ae,subject:V.subject,cc:W.cc,reply_to_message_id:ce.id,bcc:[]},T).then(m=>{const h={queryKey:Ve,data:m};r(3,V=Zr.addMessageToThread(h)),r(12,$e=""),r(11,Ae="")})}}no(()=>{let w;de&&(w=de.scrollHeight,de.scrollTo({top:w,left:0,behavior:"smooth"}))});let Oe=!1;const fe=()=>r(13,Oe=!Oe),rr=(w,m)=>m.email===w.email&&m.name===w.name;function nr(){Ae=this.value,r(11,Ae)}function Lt(w){Jt[w?"unshift":"push"](()=>{de=w,r(7,de)})}return t.$$set=w=>{r(49,e=Ce(Ce({},e),Be(w))),"id"in w&&r(0,_=w.id),"access_token"in w&&r(16,T=w.access_token),"messages"in w&&r(17,L=w.messages),"show_avatars"in w&&r(18,O=w.show_avatars),"show_reply"in w&&r(19,M=w.show_reply),"theme"in w&&r(20,x=w.theme),"thread_id"in w&&r(21,F=w.thread_id),"you"in w&&r(22,U=w.you)},t.$$.update=()=>{t.$$.dirty[0]&268435456&&K("manifestLoaded",H),t.$$.dirty[0]&32&&Object.keys(a).length&&K("onError",a),JSON.stringify(je)!==JSON.stringify(e)&&(r(1,k=qt(e,H,v)),r(30,je=e)),t.$$.dirty[0]&2&&r(29,_e=!!k.messages&&k.messages.length>0),t.$$.dirty[0]&32&&r(14,n=!!Object.keys(a).length),t.$$.dirty[0]&536870922&&r(2,S=_e?k.messages:(V==null?void 0:V.messages)||[]),t.$$.dirty[0]&8&&r(6,be=(V==null?void 0:V.participants)||[]),t.$$.dirty[0]&65539&&r(31,he={access_token:T,component_id:_,thread_id:k.thread_id}),t.$$.dirty[1]&1&&(Ve=JSON.stringify(he)),t.$$.dirty[0]&536870915&&(_&&k.thread_id?xt():_e&&r(8,Re="loaded")),t.$$.dirty[0]&536870916&&!_e&&S.length&&!S.filter(w=>w.conversation).length&&er(),t.$$.dirty[0]&65537&&r(9,Ee={component_id:_,access_token:T,query:""}),t.$$.dirty[0]&24&&(()=>l(void 0,void 0,void 0,function*(){!Te&&V&&(yield Rt(V))}))(),t.$$.dirty[0]&4&&S&&(r(32,ce=S[S.length-1]),r(33,Xe=!0)),t.$$.dirty[0]&25165826|t.$$.dirty[1]&6&&ce&&Xe&&(r(33,Xe=!1),(r(23,i=k.you)===null||i===void 0?void 0:i.email_address)&&(ce.from[0].email===(r(24,c=k.you)===null||c===void 0?void 0:c.email_address)?(r(10,W.to=ce.to,W),r(10,W.cc=ce.cc.filter(w=>{var m;return w.email!==((m=k.you)===null||m===void 0?void 0:m.email_address)})||[],W)):(r(10,W.to=ce.from,W),r(10,W.cc=[...ce.cc,...ce.to].filter(w=>{var m;return w.email!==((m=k.you)===null||m===void 0?void 0:m.email_address)}),W)))),t.$$.dirty[0]&234881026&&(r(25,u=k.you)===null||u===void 0?void 0:u.email_address)&&r(10,W.from=[{name:r(26,p=k.you)===null||p===void 0?void 0:p.name,email:r(27,b=k.you)===null||b===void 0?void 0:b.email_address}],W)},e=Be(e),[_,k,S,V,Te,a,be,de,Re,Ee,W,Ae,$e,Oe,n,tr,T,L,O,M,x,F,U,i,c,u,p,b,H,_e,je,he,ce,Xe,fe,rr,nr,Lt]}class kn extends mt{constructor(e){super();this.shadowRoot.innerHTML='<style>*{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline;list-style:none}.sr-only{position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden}main{--black:#161717;--grey-dark:#636671;--grey:#bdc0cb;--grey-lighter:#dfe1e8;--grey-dark-warm:#9fa4b5;--grey-lightest:#f7f7f8;--grey-background:#f0f1f5;--white:#ffffff;--blue:#314fa9;--blue-lighter:#f0f3ff;--red:#ee3248;--red-lighter:#ffeef0;--fs-12:0.75rem;--fs-14:0.875rem;--fs-16:1rem;--black-90:#2c2e2e;--grey-light:#f7f7f8;--grey-warm:#cbcbcb}.events.theme-1 .event:nth-of-type(12n + 1){color:black;background-color:#8dd3c7}.events.theme-1 .event:nth-of-type(12n + 2){color:black;background-color:#ffffb3}.events.theme-1 .event:nth-of-type(12n + 3){color:black;background-color:#bebada}.events.theme-1 .event:nth-of-type(12n + 4){color:black;background-color:#fb8072}.events.theme-1 .event:nth-of-type(12n + 5){color:black;background-color:#80b1d3}.events.theme-1 .event:nth-of-type(12n + 6){color:black;background-color:#fdb462}.events.theme-1 .event:nth-of-type(12n + 7){color:black;background-color:#b3de69}.events.theme-1 .event:nth-of-type(12n + 8){color:black;background-color:#fccde5}.events.theme-1 .event:nth-of-type(12n + 9){color:black;background-color:#d9d9d9}.events.theme-1 .event:nth-of-type(12n + 10){color:black;background-color:#bc80bd}.events.theme-1 .event:nth-of-type(12n + 11){color:black;background-color:#ccebc5}.events.theme-1 .event:nth-of-type(12n + 12){color:black;background-color:#ffed6f}.events.theme-2 .event:nth-of-type(10n + 1){background-color:#1f77b4}.events.theme-2 .event:nth-of-type(10n + 2){background-color:#ff7f0e}.events.theme-2 .event:nth-of-type(10n + 3){background-color:#2ca02c}.events.theme-2 .event:nth-of-type(10n + 4){background-color:#d62728}.events.theme-2 .event:nth-of-type(10n + 5){background-color:#9467bd}.events.theme-2 .event:nth-of-type(10n + 6){background-color:#8c564b}.events.theme-2 .event:nth-of-type(10n + 7){background-color:#e377c2}.events.theme-2 .event:nth-of-type(10n + 8){background-color:#7f7f7f}.events.theme-2 .event:nth-of-type(10n + 9){background-color:#bcbd22}.events.theme-2 .event:nth-of-type(10n + 10){background-color:#17becf}.events.theme-3 .event:nth-of-type(6n + 1){background-color:#2d588a}.events.theme-3 .event:nth-of-type(6n + 2){background-color:#58954c}.events.theme-3 .event:nth-of-type(6n + 3){background-color:#e9a044}.events.theme-3 .event:nth-of-type(6n + 4){background-color:#c12f32}.events.theme-3 .event:nth-of-type(6n + 5){background-color:#723e77}.events.theme-3 .event:nth-of-type(6n + 6){background-color:#7d807f}.events.gmail .event:nth-of-type(6n + 1){background-color:#4285f4}.events.gmail .event:nth-of-type(6n + 2){background-color:#0b8043}.events.gmail .event:nth-of-type(6n + 3){background-color:#d81b60}.events.gmail .event:nth-of-type(6n + 4){background-color:#b39ddb}.events.gmail .event:nth-of-type(6n + 5){background-color:#e4c441}.events.gmail .event:nth-of-type(6n + 6){background-color:#a79b8e}.events.ellsworth-kelly .event:nth-of-type(11n + 1){background-color:#f8b800}.events.ellsworth-kelly .event:nth-of-type(11n + 2){background-color:#4db930}.events.ellsworth-kelly .event:nth-of-type(11n + 3){background-color:#00a14d}.events.ellsworth-kelly .event:nth-of-type(11n + 4){background-color:#008874}.events.ellsworth-kelly .event:nth-of-type(11n + 5){background-color:#0758bb}.events.ellsworth-kelly .event:nth-of-type(11n + 6){background-color:#093cb3}.events.ellsworth-kelly .event:nth-of-type(11n + 7){background-color:#58266e}.events.ellsworth-kelly .event:nth-of-type(11n + 8){background-color:#ab2049}.events.ellsworth-kelly .event:nth-of-type(11n + 9){background-color:#de032c}.events.ellsworth-kelly .event:nth-of-type(11n + 10){background-color:#f52324}.events.ellsworth-kelly .event:nth-of-type(11n + 11){background-color:#fa540e}.messages.theme-1 .message.member-1{color:black;border-color:#8dd3c7}.messages.theme-1 .message.member-1 .avatar{background-color:#8dd3c7}.messages.theme-1 .message.member-2{color:black;border-color:#ffffb3}.messages.theme-1 .message.member-2 .avatar{background-color:#ffffb3}.messages.theme-1 .message.member-3{color:black;border-color:#bebada}.messages.theme-1 .message.member-3 .avatar{background-color:#bebada}.messages.theme-1 .message.member-4{color:black;border-color:#fb8072}.messages.theme-1 .message.member-4 .avatar{background-color:#fb8072}.messages.theme-1 .message.member-5{color:black;border-color:#80b1d3}.messages.theme-1 .message.member-5 .avatar{background-color:#80b1d3}.messages.theme-1 .message.member-6{color:black;border-color:#fdb462}.messages.theme-1 .message.member-6 .avatar{background-color:#fdb462}.messages.theme-1 .message.member-7{color:black;border-color:#b3de69}.messages.theme-1 .message.member-7 .avatar{background-color:#b3de69}.messages.theme-1 .message.member-8{color:black;border-color:#fccde5}.messages.theme-1 .message.member-8 .avatar{background-color:#fccde5}.messages.theme-1 .message.member-9{color:black;border-color:#d9d9d9}.messages.theme-1 .message.member-9 .avatar{background-color:#d9d9d9}.messages.theme-1 .message.member-10{color:black;border-color:#bc80bd}.messages.theme-1 .message.member-10 .avatar{background-color:#bc80bd}.messages.theme-1 .message.member-11{color:black;border-color:#ccebc5}.messages.theme-1 .message.member-11 .avatar{background-color:#ccebc5}.messages.theme-1 .message.member-12{color:black;border-color:#ffed6f}.messages.theme-1 .message.member-12 .avatar{background-color:#ffed6f}.messages.theme-2 .message.member-1{border-color:#1f77b4}.messages.theme-2 .message.member-1 .avatar{background-color:#1f77b4}.messages.theme-2 .message.member-2{border-color:#ff7f0e}.messages.theme-2 .message.member-2 .avatar{background-color:#ff7f0e}.messages.theme-2 .message.member-3{border-color:#2ca02c}.messages.theme-2 .message.member-3 .avatar{background-color:#2ca02c}.messages.theme-2 .message.member-4{border-color:#d62728}.messages.theme-2 .message.member-4 .avatar{background-color:#d62728}.messages.theme-2 .message.member-5{border-color:#9467bd}.messages.theme-2 .message.member-5 .avatar{background-color:#9467bd}.messages.theme-2 .message.member-6{border-color:#8c564b}.messages.theme-2 .message.member-6 .avatar{background-color:#8c564b}.messages.theme-2 .message.member-7{border-color:#e377c2}.messages.theme-2 .message.member-7 .avatar{background-color:#e377c2}.messages.theme-2 .message.member-8{border-color:#7f7f7f}.messages.theme-2 .message.member-8 .avatar{background-color:#7f7f7f}.messages.theme-2 .message.member-9{border-color:#bcbd22}.messages.theme-2 .message.member-9 .avatar{background-color:#bcbd22}.messages.theme-2 .message.member-10{border-color:#17becf}.messages.theme-2 .message.member-10 .avatar{background-color:#17becf}.messages.theme-3 .message.member-1{border-color:#2d588a}.messages.theme-3 .message.member-1 .avatar{background-color:#2d588a}.messages.theme-3 .message.member-2{border-color:#58954c}.messages.theme-3 .message.member-2 .avatar{background-color:#58954c}.messages.theme-3 .message.member-3{border-color:#e9a044}.messages.theme-3 .message.member-3 .avatar{background-color:#e9a044}.messages.theme-3 .message.member-4{border-color:#c12f32}.messages.theme-3 .message.member-4 .avatar{background-color:#c12f32}.messages.theme-3 .message.member-5{border-color:#723e77}.messages.theme-3 .message.member-5 .avatar{background-color:#723e77}.messages.theme-3 .message.member-6{border-color:#7d807f}.messages.theme-3 .message.member-6 .avatar{background-color:#7d807f}.messages.gmail .message.member-1{border-color:#4285f4}.messages.gmail .message.member-1 .avatar{background-color:#4285f4}.messages.gmail .message.member-2{border-color:#0b8043}.messages.gmail .message.member-2 .avatar{background-color:#0b8043}.messages.gmail .message.member-3{border-color:#d81b60}.messages.gmail .message.member-3 .avatar{background-color:#d81b60}.messages.gmail .message.member-4{border-color:#b39ddb}.messages.gmail .message.member-4 .avatar{background-color:#b39ddb}.messages.gmail .message.member-5{border-color:#e4c441}.messages.gmail .message.member-5 .avatar{background-color:#e4c441}.messages.gmail .message.member-6{border-color:#a79b8e}.messages.gmail .message.member-6 .avatar{background-color:#a79b8e}.messages.ellsworth-kelly .message.member-1{border-color:#f8b800}.messages.ellsworth-kelly .message.member-1 .avatar{background-color:#f8b800}.messages.ellsworth-kelly .message.member-2{border-color:#4db930}.messages.ellsworth-kelly .message.member-2 .avatar{background-color:#4db930}.messages.ellsworth-kelly .message.member-3{border-color:#00a14d}.messages.ellsworth-kelly .message.member-3 .avatar{background-color:#00a14d}.messages.ellsworth-kelly .message.member-4{border-color:#008874}.messages.ellsworth-kelly .message.member-4 .avatar{background-color:#008874}.messages.ellsworth-kelly .message.member-5{border-color:#0758bb}.messages.ellsworth-kelly .message.member-5 .avatar{background-color:#0758bb}.messages.ellsworth-kelly .message.member-6{border-color:#093cb3}.messages.ellsworth-kelly .message.member-6 .avatar{background-color:#093cb3}.messages.ellsworth-kelly .message.member-7{border-color:#58266e}.messages.ellsworth-kelly .message.member-7 .avatar{background-color:#58266e}.messages.ellsworth-kelly .message.member-8{border-color:#ab2049}.messages.ellsworth-kelly .message.member-8 .avatar{background-color:#ab2049}.messages.ellsworth-kelly .message.member-9{border-color:#de032c}.messages.ellsworth-kelly .message.member-9 .avatar{background-color:#de032c}.messages.ellsworth-kelly .message.member-10{border-color:#f52324}.messages.ellsworth-kelly .message.member-10 .avatar{background-color:#f52324}.messages.ellsworth-kelly .message.member-11{border-color:#fa540e}.messages.ellsworth-kelly .message.member-11 .avatar{background-color:#fa540e}main{height:100%;max-height:100vh;width:100%;overflow:auto;position:relative;font-family:sans-serif;background-color:var(--conversation-background, var(--grey-light))}@keyframes progress{0%{width:0}100%{width:100%}}.loading::after{background-color:var(--blue-lighter);z-index:-1}.loading::before{animation:progress 2s ease-in-out infinite;background-color:var(--blue)}.loading::before,.loading::after{top:calc(var(--fs-14) + 30px);left:0;content:"";display:block;height:4px;position:absolute}.loading.status{border-top:calc(var(--fs-14) + 30px) solid #fff;border-bottom:50px solid #fff;height:calc(100vh - (var(--fs-14) + 80px));overflow:hidden}header{display:flex;background:var(--conversation-header-background, var(--white));min-height:var(--fs-14);padding:15px 32px;gap:32px;color:var(--conversation-header-color, var(--black));font-size:var(--fs-14);position:sticky;width:calc(100% - 64px);top:0;z-index:1}@keyframes progress{0%{width:0}100%{width:100%}}header.loading::after{background-color:var(--blue-lighter);z-index:-1}header.loading::before{animation:progress 2s ease-in-out infinite;background-color:var(--blue)}header.loading::before,header.loading::after{bottom:0;left:0;content:"";display:block;height:4px;position:absolute}@keyframes progress{0%{width:0}100%{width:100%}}header.error::after{background-color:var(--red);z-index:-1}header.error::before{animation:progress 2s ease-in-out infinite;background-color:var(--red)}header.error::before,header.error::after{bottom:0;left:0;content:"";display:block;height:4px;position:absolute}header.error::before,header.error::after{animation:none;width:100%}header.mobile{width:calc(100% - (32px * 2))}@media(min-width: 768px){header.mobile{display:none}}header.mobile button{position:absolute;right:32px;top:16px;background:none;display:flex}header.mobile.expanded{display:grid;gap:12px}header.mobile.expanded button{rotate:180deg}header.tablet{display:none}@media(min-width: 768px){header.tablet{display:flex}}.messages{display:grid;gap:1rem;padding:1rem;padding:61px 0 49px 0}.messages .message{max-width:min(400px, calc(100% - 32px - 1rem));display:grid;column-gap:1rem;row-gap:0.25rem;grid-template-columns:32px 1fr;grid-template-rows:auto auto;transition:0.5s}@media(min-width: 768px){.messages .message{width:max-content;max-width:600px}}@media(min-width: 1140px){.messages .message{max-width:752px}}.messages .message:last-child{padding-bottom:2rem}.messages .message .body{border-radius:8px;background-color:var(--conversation-peer-message-background, var(--white));color:var(--conversation-peer-message-color, var(--black));max-height:50vh;overflow:auto;position:relative}.messages .message .contact{display:flex;flex-direction:column;align-items:center;grid-template-rows:auto 1fr;gap:0.5rem}.messages .message .contact .avatar{border-radius:20px;width:32px;height:32px;text-align:center;color:white;font-size:1rem;font-weight:bold;background-color:blue;overflow:hidden;display:grid;align-items:center;justify-items:center}.messages .message .contact .email{font-size:0.8rem;color:#555;width:100%;overflow:hidden;text-overflow:ellipsis}.messages .message .time{grid-column:2/3;font-size:var(--fs-12);color:var(--grey-dark)}.messages .message p{padding:1rem;font-weight:300;line-height:1.3em;font-size:0.9em;border-radius:8px;white-space:pre-line}.messages .message p.after{padding-top:0;margin-top:-1rem;color:var(--grey-dark)}.messages .message.you{justify-self:end;grid-template-columns:1fr 32px}.messages .message.you .contact{grid-row:1/2;grid-column:2/3}.messages .message.you .body{order:1;grid-column:1/1;color:var(--conversation-your-message-color, var(--white));background-color:var(--conversation-your-message-background, var(--blue))}.messages .message.you .body p.after{color:var(--grey)}.messages .message.you .time{order:1;grid-column:1/1}.messages.dont-show-avatars .message{column-gap:0;grid-template-columns:0 1fr;width:clamp(200px, calc(100% - 4rem), 700px)}.messages.dont-show-avatars .message .contact{overflow:hidden}.messages.dont-show-avatars .message.you{grid-template-columns:1fr 0}.reply-box{position:sticky;width:100%;bottom:0;z-index:1}.reply-box form{position:relative;display:flex;align-items:center}.reply-box form button[type=submit]{position:absolute;right:1rem;border-radius:4px;background-color:var(--blue);height:28px;width:28px;color:white;display:flex;align-items:center;justify-content:center}.reply-box form button[type=submit]:disabled{cursor:not-allowed;background-color:gray}.reply-box form input{border-top:1px solid #ebebeb;height:25px;padding:12px 1rem;width:100%;font-size:var(--fs-16);color:var(--conversation-reply-color, var(--grey-black));background-color:var(--conversation-reply-background, var(--white))}.reply-box form input::placeholder{color:var(--conversation-reply-color, var(--grey))}</style>',Je(this,{target:this.shadowRoot,props:Et(this.attributes),customElement:!0},is,as,He,{id:0,access_token:16,messages:17,show_avatars:18,show_reply:19,theme:20,thread_id:21,you:22},null,[-1,-1,-1]),e&&(e.target&&N(e.target,this,e.anchor),e.props&&(this.$set(e.props),G()))}static get observedAttributes(){return["id","access_token","messages","show_avatars","show_reply","theme","thread_id","you"]}get id(){return this.$$.ctx[0]}set id(e){this.$$set({id:e}),G()}get access_token(){return this.$$.ctx[16]}set access_token(e){this.$$set({access_token:e}),G()}get messages(){return this.$$.ctx[17]}set messages(e){this.$$set({messages:e}),G()}get show_avatars(){return this.$$.ctx[18]}set show_avatars(e){this.$$set({show_avatars:e}),G()}get show_reply(){return this.$$.ctx[19]}set show_reply(e){this.$$set({show_reply:e}),G()}get theme(){return this.$$.ctx[20]}set theme(e){this.$$set({theme:e}),G()}get thread_id(){return this.$$.ctx[21]}set thread_id(e){this.$$set({thread_id:e}),G()}get you(){return this.$$.ctx[22]}set you(e){this.$$set({you:e}),G()}}return customElements.define("nylas-conversation",kn),kn});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
