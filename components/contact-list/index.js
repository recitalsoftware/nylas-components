(function(de,w){typeof exports=="object"&&typeof module!="undefined"?module.exports=w():typeof define=="function"&&define.amd?define(w):(de=typeof globalThis!="undefined"?globalThis:de||self,de.app=w())})(this,function(){"use strict";const de=window.customElements.define.bind(window.customElements);window.customElements.define=(t,...e)=>{if(!customElements.get(t))return de(t,...e)};function w(){}function Ve(t,e){for(const n in e)t[n]=e[n];return t}function Xt(t){return t&&typeof t=="object"&&typeof t.then=="function"}function Ae(t){return t()}function Xe(){return Object.create(null)}function K(t){t.forEach(Ae)}function be(t){return typeof t=="function"}function Be(t,e){return t!=t?e==e:t!==e||t&&typeof t=="object"||typeof t=="function"}let ve;function oe(t,e){return ve||(ve=document.createElement("a")),ve.href=e,t===ve.href}function Bt(t,e){return t!=t?e==e:t!==e}function Qt(t){return Object.keys(t).length===0}function Qe(t,...e){if(t==null)return w;const n=t.subscribe(...e);return n.unsubscribe?()=>n.unsubscribe():n}function ye(t,e,n){t.$$.on_destroy.push(Qe(e,n))}function xe(t){const e={};for(const n in t)n[0]!=="$"&&(e[n]=t[n]);return e}function P(t,e){t.appendChild(e)}function b(t,e,n){t.insertBefore(e,n||null)}function v(t){t.parentNode.removeChild(t)}function xt(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e)}function S(t){return document.createElement(t)}function A(t){return document.createTextNode(t)}function j(){return A(" ")}function me(){return A("")}function $(t,e,n,r){return t.addEventListener(e,n,r),()=>t.removeEventListener(e,n,r)}function y(t,e,n){n==null?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function Ge(t,e,n){e in t?t[e]=typeof t[e]=="boolean"&&n===""?!0:n:y(t,e,n)}function Gt(t){return Array.from(t.childNodes)}function F(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function Ze(t,e){t.value=e==null?"":e}function we(t,e,n,r){n===null?t.style.removeProperty(e):t.style.setProperty(e,n,r?"important":"")}let ke;function Zt(){if(ke===void 0){ke=!1;try{typeof window!="undefined"&&window.parent&&window.parent.document}catch(t){ke=!0}}return ke}function Kt(t,e){getComputedStyle(t).position==="static"&&(t.style.position="relative");const r=S("iframe");r.setAttribute("style","display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"),r.setAttribute("aria-hidden","true"),r.tabIndex=-1;const i=Zt();let o;return i?(r.src="data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>",o=$(window,"message",a=>{a.source===r.contentWindow&&e()})):(r.src="about:blank",r.onload=()=>{o=$(r.contentWindow,"resize",e)}),P(t,r),()=>{(i||o&&r.contentWindow)&&o(),v(r)}}function ae(t,e,n){t.classList[n?"add":"remove"](e)}function Ke(t){const e={};for(const n of t)e[n.name]=n.value;return e}let he;function x(t){he=t}function De(){if(!he)throw new Error("Function called outside component initialization");return he}function qt(t){De().$$.on_mount.push(t)}const _e=[],je=[],Oe=[],qe=[],$e=Promise.resolve();let Ie=!1;function et(){Ie||(Ie=!0,$e.then(W))}function $t(){return et(),$e}function Pe(t){Oe.push(t)}const Re=new Set;let Se=0;function W(){const t=he;do{for(;Se<_e.length;){const e=_e[Se];Se++,x(e),en(e.$$)}for(x(null),_e.length=0,Se=0;je.length;)je.pop()();for(let e=0;e<Oe.length;e+=1){const n=Oe[e];Re.has(n)||(Re.add(n),n())}Oe.length=0}while(_e.length);for(;qe.length;)qe.pop()();Ie=!1,Re.clear(),x(t)}function en(t){if(t.fragment!==null){t.update(),K(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(Pe)}}const Me=new Set;let ee;function tn(){ee={r:0,c:[],p:ee}}function nn(){ee.r||K(ee.c),ee=ee.p}function tt(t,e){t&&t.i&&(Me.delete(t),t.i(e))}function rn(t,e,n,r){if(t&&t.o){if(Me.has(t))return;Me.add(t),ee.c.push(()=>{Me.delete(t),r&&(n&&t.d(1),r())}),t.o(e)}}function Ce(t,e){const n=e.token={};function r(i,o,a,l){if(e.token!==n)return;e.resolved=l;let s=e.ctx;a!==void 0&&(s=s.slice(),s[a]=l);const c=i&&(e.current=i)(s);let u=!1;e.block&&(e.blocks?e.blocks.forEach((f,_)=>{_!==o&&f&&(tn(),rn(f,1,1,()=>{e.blocks[_]===f&&(e.blocks[_]=null)}),nn())}):e.block.d(1),c.c(),tt(c,1),c.m(e.mount(),e.anchor),u=!0),e.block=c,e.blocks&&(e.blocks[o]=c),u&&W()}if(Xt(t)){const i=De();if(t.then(o=>{x(i),r(e.then,1,e.value,o),x(null)},o=>{if(x(i),r(e.catch,2,e.error,o),x(null),!e.hasCatch)throw o}),e.current!==e.pending)return r(e.pending,0),!0}else{if(e.current!==e.then)return r(e.then,1,e.value,t),!0;e.resolved=t}}function nt(t,e,n){const r=e.slice(),{resolved:i}=t;t.current===t.then&&(r[t.value]=i),t.current===t.catch&&(r[t.error]=i),t.block.p(r,n)}function on(t,e,n,r){const{fragment:i,on_mount:o,on_destroy:a,after_update:l}=t.$$;i&&i.m(e,n),r||Pe(()=>{const s=o.map(Ae).filter(be);a?a.push(...s):K(s),t.$$.on_mount=[]}),l.forEach(Pe)}function an(t,e){const n=t.$$;n.fragment!==null&&(K(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function ln(t,e){t.$$.dirty[0]===-1&&(_e.push(t),et(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}function rt(t,e,n,r,i,o,a,l=[-1]){const s=he;x(t);const c=t.$$={fragment:null,ctx:null,props:o,update:w,not_equal:i,bound:Xe(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(s?s.$$.context:[])),callbacks:Xe(),dirty:l,skip_bound:!1,root:e.target||s.$$.root};a&&a(c.root);let u=!1;if(c.ctx=n?n(t,e.props||{},(f,_,...d)=>{const p=d.length?d[0]:_;return c.ctx&&i(c.ctx[f],c.ctx[f]=p)&&(!c.skip_bound&&c.bound[f]&&c.bound[f](p),u&&ln(t,f)),_}):[],c.update(),u=!0,K(c.before_update),c.fragment=r?r(c.ctx):!1,e.target){if(e.hydrate){const f=Gt(e.target);c.fragment&&c.fragment.l(f),f.forEach(v)}else c.fragment&&c.fragment.c();e.intro&&tt(t.$$.fragment),on(t,e.target,e.anchor,e.customElement),W()}x(s)}let We;typeof HTMLElement=="function"&&(We=class extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(Ae).filter(be);for(const e in this.$$.slotted)this.appendChild(this.$$.slotted[e])}attributeChangedCallback(t,e,n){this[t]=n}disconnectedCallback(){K(this.$$.on_disconnect)}$destroy(){an(this,1),this.$destroy=w}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const r=n.indexOf(e);r!==-1&&n.splice(r,1)}}$set(t){this.$$set&&!Qt(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});function I(t,e,n){return n={path:e,exports:{},require:function(r,i){return sn(r,i==null?n.path:i)}},t(n,n.exports),n.exports}function sn(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var cn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=i;var n=6e4;function r(o){return o.getTime()%n}function i(o){var a=new Date(o.getTime()),l=Math.ceil(a.getTimezoneOffset());a.setSeconds(0,0);var s=l>0,c=s?(n+r(a))%n:r(a);return l*n+c}t.exports=e.default}),pe=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n;function n(r,i){if(i.length<r)throw new TypeError(r+" argument"+(r>1?"s":"")+" required, but only "+i.length+" present")}t.exports=e.default}),Le=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=i;var n=r(pe);function r(o){return o&&o.__esModule?o:{default:o}}function i(o){(0,n.default)(1,arguments);var a=Object.prototype.toString.call(o);return o instanceof Date||typeof o=="object"&&a==="[object Date]"?new Date(o.getTime()):typeof o=="number"||a==="[object Number]"?new Date(o):((typeof o=="string"||a==="[object String]")&&typeof console!="undefined"&&(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn(new Error().stack)),new Date(NaN))}t.exports=e.default}),un=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=o;var n=i(Le),r=i(pe);function i(a){return a&&a.__esModule?a:{default:a}}function o(a,l){(0,r.default)(2,arguments);var s=(0,n.default)(a),c=(0,n.default)(l),u=s.getTime()-c.getTime();return u<0?-1:u>0?1:u}t.exports=e.default}),fn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=o;var n=i(Le),r=i(pe);function i(a){return a&&a.__esModule?a:{default:a}}function o(a,l){(0,r.default)(2,arguments);var s=(0,n.default)(a),c=(0,n.default)(l);return s.getTime()-c.getTime()}t.exports=e.default}),dn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=o;var n=i(fn),r=i(pe);function i(a){return a&&a.__esModule?a:{default:a}}function o(a,l){(0,r.default)(2,arguments);var s=(0,n.default)(a,l)/1e3;return s>0?Math.floor(s):Math.ceil(s)}t.exports=e.default}),mn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n;function n(r,i){if(r==null)throw new TypeError("assign requires that input parameter not be null or undefined");i=i||{};for(var o in i)i.hasOwnProperty(o)&&(r[o]=i[o]);return r}t.exports=e.default}),hn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=i;var n=r(mn);function r(o){return o&&o.__esModule?o:{default:o}}function i(o){return(0,n.default)({},o)}t.exports=e.default}),_n=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var n={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function r(i,o,a){a=a||{};var l;return typeof n[i]=="string"?l=n[i]:o===1?l=n[i].one:l=n[i].other.replace("{{count}}",o),a.addSuffix?a.comparison>0?"in "+l:l+" ago":l}t.exports=e.default}),pn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n;function n(r){return function(i){var o=i||{},a=o.width?String(o.width):r.defaultWidth,l=r.formats[a]||r.formats[r.defaultWidth];return l}}t.exports=e.default}),gn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=r(pn);function r(c){return c&&c.__esModule?c:{default:c}}var i={full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},o={full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},a={full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},l={date:(0,n.default)({formats:i,defaultWidth:"full"}),time:(0,n.default)({formats:o,defaultWidth:"full"}),dateTime:(0,n.default)({formats:a,defaultWidth:"full"})},s=l;e.default=s,t.exports=e.default}),bn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var n={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function r(i,o,a,l){return n[i]}t.exports=e.default}),vn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n;function n(r){return function(i,o){var a=o||{},l=a.context?String(a.context):"standalone",s;if(l==="formatting"&&r.formattingValues){var c=r.defaultFormattingWidth||r.defaultWidth,u=a.width?String(a.width):c;s=r.formattingValues[u]||r.formattingValues[c]}else{var f=r.defaultWidth,_=a.width?String(a.width):r.defaultWidth;s=r.values[_]||r.values[f]}var d=r.argumentCallback?r.argumentCallback(i):i;return s[d]}}t.exports=e.default}),yn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=r(vn);function r(d){return d&&d.__esModule?d:{default:d}}var i={narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},o={narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},a={narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},l={narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},s={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},c={narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}};function u(d,p){var m=Number(d),h=m%100;if(h>20||h<10)switch(h%10){case 1:return m+"st";case 2:return m+"nd";case 3:return m+"rd"}return m+"th"}var f={ordinalNumber:u,era:(0,n.default)({values:i,defaultWidth:"wide"}),quarter:(0,n.default)({values:o,defaultWidth:"wide",argumentCallback:function(d){return Number(d)-1}}),month:(0,n.default)({values:a,defaultWidth:"wide"}),day:(0,n.default)({values:l,defaultWidth:"wide"}),dayPeriod:(0,n.default)({values:s,defaultWidth:"wide",formattingValues:c,defaultFormattingWidth:"wide"})},_=f;e.default=_,t.exports=e.default}),wn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n;function n(r){return function(i,o){var a=String(i),l=o||{},s=a.match(r.matchPattern);if(!s)return null;var c=s[0],u=a.match(r.parsePattern);if(!u)return null;var f=r.valueCallback?r.valueCallback(u[0]):u[0];return f=l.valueCallback?l.valueCallback(f):f,{value:f,rest:a.slice(c.length)}}}t.exports=e.default}),kn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n;function n(o){return function(a,l){var s=String(a),c=l||{},u=c.width,f=u&&o.matchPatterns[u]||o.matchPatterns[o.defaultMatchWidth],_=s.match(f);if(!_)return null;var d=_[0],p=u&&o.parsePatterns[u]||o.parsePatterns[o.defaultParseWidth],m;return Object.prototype.toString.call(p)==="[object Array]"?m=i(p,function(h){return h.test(d)}):m=r(p,function(h){return h.test(d)}),m=o.valueCallback?o.valueCallback(m):m,m=c.valueCallback?c.valueCallback(m):m,{value:m,rest:s.slice(d.length)}}}function r(o,a){for(var l in o)if(o.hasOwnProperty(l)&&a(o[l]))return l}function i(o,a){for(var l=0;l<o.length;l++)if(a(o[l]))return l}t.exports=e.default}),On=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=i(wn),r=i(kn);function i(M){return M&&M.__esModule?M:{default:M}}var o=/^(\d+)(th|st|nd|rd)?/i,a=/\d+/i,l={narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},s={any:[/^b/i,/^(a|c)/i]},c={narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},u={any:[/1/i,/2/i,/3/i,/4/i]},f={narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},_={narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},d={narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},p={narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},m={narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},h={any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},O={ordinalNumber:(0,n.default)({matchPattern:o,parsePattern:a,valueCallback:function(M){return parseInt(M,10)}}),era:(0,r.default)({matchPatterns:l,defaultMatchWidth:"wide",parsePatterns:s,defaultParseWidth:"any"}),quarter:(0,r.default)({matchPatterns:c,defaultMatchWidth:"wide",parsePatterns:u,defaultParseWidth:"any",valueCallback:function(M){return M+1}}),month:(0,r.default)({matchPatterns:f,defaultMatchWidth:"wide",parsePatterns:_,defaultParseWidth:"any"}),day:(0,r.default)({matchPatterns:d,defaultMatchWidth:"wide",parsePatterns:p,defaultParseWidth:"any"}),dayPeriod:(0,r.default)({matchPatterns:m,defaultMatchWidth:"any",parsePatterns:h,defaultParseWidth:"any"})},R=O;e.default=R,t.exports=e.default}),Pn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(_n),r=l(gn),i=l(bn),o=l(yn),a=l(On);function l(u){return u&&u.__esModule?u:{default:u}}var s={code:"en-US",formatDistance:n.default,formatLong:r.default,formatRelative:i.default,localize:o.default,match:a.default,options:{weekStartsOn:0,firstWeekContainsDate:1}},c=s;e.default=c,t.exports=e.default}),Sn=I(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=d;var n=c(cn),r=c(un),i=c(Le),o=c(dn),a=c(hn),l=c(Pn),s=c(pe);function c(p){return p&&p.__esModule?p:{default:p}}var u=1440,f=43200,_=525600;function d(p,m,h){(0,s.default)(2,arguments);var O=h||{},R=O.locale||l.default;if(!R.formatDistance)throw new RangeError("locale must contain localize.formatDistance property");var M=(0,r.default)(p,m);if(isNaN(M))throw new RangeError("Invalid time value");var E=(0,a.default)(O);E.addSuffix=Boolean(O.addSuffix),E.comparison=M;var N,C;M>0?(N=(0,i.default)(m),C=(0,i.default)(p)):(N=(0,i.default)(p),C=(0,i.default)(m));var U=O.roundingMethod==null?"round":String(O.roundingMethod),k;if(U==="floor")k=Math.floor;else if(U==="ceil")k=Math.ceil;else if(U==="round")k=Math.round;else throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");var D=(0,o.default)(C,N),ce=((0,n.default)(C)-(0,n.default)(N))/1e3,J=k((D-ce)/60),L;if(O.unit==null?J<1?L="second":J<60?L="minute":J<u?L="hour":J<f?L="day":J<_?L="month":L="year":L=String(O.unit),L==="second")return R.formatDistance("xSeconds",D,E);if(L==="minute")return R.formatDistance("xMinutes",J,E);if(L==="hour"){var z=k(J/60);return R.formatDistance("xHours",z,E)}else if(L==="day"){var B=k(J/u);return R.formatDistance("xDays",B,E)}else if(L==="month"){var re=k(J/f);return R.formatDistance("xMonths",re,E)}else if(L==="year"){var ue=k(J/_);return R.formatDistance("xYears",ue,E)}throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'")}t.exports=e.default});const le=[];function Mn(t,e){return{subscribe:te(t,e).subscribe}}function te(t,e=w){let n;const r=new Set;function i(l){if(Be(t,l)&&(t=l,n)){const s=!le.length;for(const c of r)c[1](),le.push(c,t);if(s){for(let c=0;c<le.length;c+=2)le[c][0](le[c+1]);le.length=0}}}function o(l){i(l(t))}function a(l,s=w){const c=[l,s];return r.add(c),r.size===1&&(n=e(i)||w),l(t),()=>{r.delete(c),r.size===0&&(n(),n=null)}}return{set:i,update:o,subscribe:a}}function Cn(t,e,n){const r=!Array.isArray(t),i=r?[t]:t,o=e.length<2;return Mn(n,a=>{let l=!1;const s=[];let c=0,u=w;const f=()=>{if(c)return;u();const d=e(r?s[0]:s,a);o?a(d):u=be(d)?d:w},_=i.map((d,p)=>Qe(d,m=>{s[p]=m,c&=~(1<<p),l&&f()},()=>{c|=1<<p}));return l=!0,f(),function(){K(_),u()}})}function En(){return te({})}const ze=En();var Nn=Object.defineProperty,Tn=Object.defineProperties,An=Object.getOwnPropertyDescriptors,it=Object.getOwnPropertySymbols,Dn=Object.prototype.hasOwnProperty,jn=Object.prototype.propertyIsEnumerable,ot=(t,e,n)=>e in t?Nn(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,In=(t,e)=>{for(var n in e||(e={}))Dn.call(e,n)&&ot(t,n,e[n]);if(it)for(var n of it(e))jn.call(e,n)&&ot(t,n,e[n]);return t},Rn=(t,e)=>Tn(t,An(e));async function Y(t){var e;if(!t.ok){const n=await t.json().then(o=>o),r=((e=n==null?void 0:n.response)==null?void 0:e.error)||(n==null?void 0:n.message),i=new Error(r);return i.name=n.name,Promise.reject({message:i,statusCode:t.status})}return t.json()}function V(t={component_id:""}){return{method:t.method||"GET",headers:{Accept:"application/json","Content-Type":"application/json","X-Component-Id":t.component_id||"","X-Access-Token":t.access_token||""},body:t.body?JSON.stringify(t.body):void 0}}function Q(t,e){throw console.error(e),ze.update(n=>Rn(In({},n),{[t]:e})),e}const at={"001":"","002":"ireland-","003":"canada-"};function X(t){let e="";if(t.substring(3,4)==="-"){const r=t.substring(0,3);typeof at[r]!="undefined"&&(e=at[r])}return`https://${e}web-components.nylas.com/middleware`}function se(t){}function Wn(t){return Object.keys(t).reduce((e,n)=>(t[n]!==void 0&&e.append(n,t[n]),e),new URLSearchParams).toString()}const Ln=async(t,e)=>{const n=`${X(t.component_id)}/contact-list/contacts?${Wn(e)}`,r=await fetch(n,V({component_id:t.component_id,access_token:t.access_token})).then(i=>Y(i)).then(i=>i.response).catch(i=>Q(t.component_id,i));return r!=null?r:[]},zn=async t=>{const e=await fetch(`${X(t.component_id)}/contacts${t.query}`,V({component_id:t.component_id,access_token:t.access_token})).then(n=>Y(n)).then(n=>n.response).catch(n=>Q(t.component_id,n));return e!=null?e:[]},lt=async(t,e)=>await fetch(`${X(t.component_id)}/contacts/${e}/picture`,V({component_id:t.component_id,access_token:t.access_token})).then(n=>Y(n)).then(n=>n.response).catch(n=>Q(t.component_id,n));var Jn=Object.defineProperty,Fn=Object.defineProperties,Hn=Object.getOwnPropertyDescriptors,st=Object.getOwnPropertySymbols,Un=Object.prototype.hasOwnProperty,Yn=Object.prototype.propertyIsEnumerable,ct=(t,e,n)=>e in t?Jn(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,ut=(t,e)=>{for(var n in e||(e={}))Un.call(e,n)&&ct(t,n,e[n]);if(st)for(var n of st(e))Yn.call(e,n)&&ct(t,n,e[n]);return t},ft=(t,e)=>Fn(t,Hn(e));const dt=(t,e,n)=>{if(t.thread_ids){const i=t.thread_ids.slice(n,n+e);return Promise.all(i.map(async o=>{const a=`${X(t.component_id)}/threads/${o}?view=expanded`;return await fetch(a,V(t)).then(l=>Y(l)).then(l=>l.response).then(l=>ft(ut({},l),{messages:l.messages.filter(s=>s.from.length!==0||s.to.length!==0)})).catch(l=>Q(t.component_id,l))}))}let r=`${X(t.component_id)}/threads?view=expanded&not_in=trash&limit=${e}&offset=${n}`;return t.query&&Object.entries(t.query).forEach(i=>r=r.concat(`&${i[0]}=${i[1]}`)),fetch(r,V(t)).then(i=>Y(i)).then(i=>i.response).then(i=>i.map(o=>ft(ut({},o),{messages:o.messages.filter(a=>a.from.length!==0||a.to.length!==0)}))).catch(i=>Q(t.component_id,i))};function mt(t){let e=`${X(t.component_id)}/threads?view=expanded&not_in=trash&view=count`;return t.query&&Object.entries(t.query).forEach(n=>e=e.concat(`&${n[0]}=${n[1]}`)),t.keywordToSearch&&(e+=`&q=${t.keywordToSearch}`),fetch(e,V(t)).then(n=>Y(n)).then(n=>n.response.count)}const Vn=t=>{const e=`${X(t.component_id)}/threads/search?q=${t.keywordToSearch}&view=expanded&limit=${t.query.limit}&offset=${t.query.offset}`;return fetch(e,V(t)).then(async n=>Y(n)).then(n=>n.response).catch(n=>Q(t.component_id,n))},Xn=(t,e)=>fetch(`${X(t.component_id)}/threads/${e.id}`,V({method:"PUT",component_id:t.component_id,access_token:t.access_token,body:{unread:e.unread,starred:e.starred,folder_id:e.folder_id,label_ids:e.label_ids}})).then(n=>Y(n)).then(n=>n.response).catch(n=>Q(t.component_id,n)),Bn=async(t,e)=>await fetch(`${X(t)}/manifest`,V({access_token:e,component_id:t})).then(Y).then(n=>n.component.theming).catch(n=>Q(t,n));var Qn=Object.defineProperty,ht=Object.getOwnPropertySymbols,xn=Object.prototype.hasOwnProperty,Gn=Object.prototype.propertyIsEnumerable,_t=(t,e,n)=>e in t?Qn(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,pt=(t,e)=>{for(var n in e||(e={}))xn.call(e,n)&&_t(t,n,e[n]);if(ht)for(var n of ht(e))Gn.call(e,n)&&_t(t,n,e[n]);return t};const Zn=async t=>fetch(`${X(t.component_id)}/calendars/availability`,V({method:"POST",component_id:t.component_id,access_token:t.access_token,body:t.body})).then(async e=>{const n=await Y(e);return n.response.time_slots=n.response.time_slots.map(r=>(r.start_time=r.start||0,r.end_time=r.end||0,delete r.start,delete r.end,r)),n.response}).catch(e=>Q(t.component_id,e)),Kn=async t=>fetch(`${X(t.component_id)}/calendars/availability/consecutive`,V({method:"POST",component_id:t.component_id,access_token:t.access_token,body:t.body})).then(async e=>{var n;const i=((n=(await Y(e)).response)==null?void 0:n.map(l=>(l=l.map(s=>(s.start_time=new Date(s.start_time*1e3),s.end_time=new Date(s.end_time*1e3),s)),l)))||[],o=qn(i,t.body.events);return $n(o)}).catch(e=>Q(t.component_id,e));function qn(t,e){return t.map(n=>n.map(r=>pt(pt({},r),e.find(i=>i.participantEmails.length===r.emails.length&&i.participantEmails.every(o=>r.emails.includes(o))))))}function $n(t){const e=new Set;return t.filter(n=>{const r=`${n[0].start_time}_${n[n.length-1].end_time}`;return e.has(r)?!1:(e.add(r),!0)})}var er=Object.defineProperty,gt=Object.getOwnPropertySymbols,tr=Object.prototype.hasOwnProperty,nr=Object.prototype.propertyIsEnumerable,bt=(t,e,n)=>e in t?er(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,rr=(t,e)=>{for(var n in e||(e={}))tr.call(e,n)&&bt(t,n,e[n]);if(gt)for(var n of gt(e))nr.call(e,n)&&bt(t,n,e[n]);return t};function ir(){const t=(n,r)=>{var i,o;const a=JSON.parse(r),l=rr({},a);if(delete l.forceReload,r=JSON.stringify(l),!(!a.component_id||!((i=a==null?void 0:a.body)==null?void 0:i.start_time)||!((o=a==null?void 0:a.body)==null?void 0:o.end_time))){if(!n[r]||a.forceReload){const s=Zn(a);e.update(c=>(c[r]=s,c)),n[r]=s}return n[r]}},e=te(new Proxy({},{get:t}));return e}ir();function or(){const t=(n,r)=>{var i,o;const a=JSON.parse(r);if(!(!a.component_id||!((i=a==null?void 0:a.body)==null?void 0:i.start_time)||!((o=a==null?void 0:a.body)==null?void 0:o.end_time))){if(!n[r]){const l=Kn(a);e.update(s=>(s[r]=l,s)),n[r]=l}return n[r]}},e=te(new Proxy({},{get:t}));return e}or();var ar=Object.defineProperty,vt=Object.getOwnPropertySymbols,lr=Object.prototype.hasOwnProperty,sr=Object.prototype.propertyIsEnumerable,yt=(t,e,n)=>e in t?ar(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,wt=(t,e)=>{for(var n in e||(e={}))lr.call(e,n)&&yt(t,n,e[n]);if(vt)for(var n of vt(e))sr.call(e,n)&&yt(t,n,e[n]);return t};let H={};function kt(t){return t.filter(e=>!!e.given_name||!!e.surname||Array.isArray(e.emails)&&e.emails.length>0).map(e=>((!Array.isArray(e.emails)||e.emails.length===0)&&(e.emails=[{email:""}]),e))}function cr(){const{subscribe:t,set:e,update:n}=te({});return{subscribe:t,addContacts:async(r,i)=>{var o;const a=JSON.stringify(r);if(!H[a]&&(r.component_id||r.access_token)){i.offset===0&&Je.reset();const l=(o=await Ln(r,i).then(s=>kt(s)).catch(()=>[]))!=null?o:[];return H[a]=H[a]?[...H[a],...l]:l,n(s=>(s[a]=H[a],wt({},s))),H[a]}},addContact:async r=>{var i;const o=JSON.stringify(r);if(!H[o]&&(r.component_id||r.access_token)){const a=(i=await zn(r).then(l=>kt(l)).catch(()=>[]))!=null?i:[];H[o]=H[o]?[...H[o],...a]:a,n(l=>(l[o]=H[o],wt({},l)))}return H[o]},reset:()=>{H={},e({})}}}const Je=cr();var ur=Object.defineProperty,Ot=Object.getOwnPropertySymbols,fr=Object.prototype.hasOwnProperty,dr=Object.prototype.propertyIsEnumerable,Pt=(t,e,n)=>e in t?ur(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,ne=(t,e)=>{for(var n in e||(e={}))fr.call(e,n)&&Pt(t,n,e[n]);if(Ot)for(var n of Ot(e))dr.call(e,n)&&Pt(t,n,e[n]);return t};async function St(t){const e=[];for(let n=0;n<t;n++)e.push({isLoaded:!1,threads:[]});return e}function mr(){const{subscribe:t,set:e,update:n}=te({});let r={},i;return{subscribe:t,set:e,getThreads:async(o,a,l,s=!1)=>{const c=JSON.stringify(o);if(!o.component_id&&!o.access_token)return[];if(i===void 0||s){const u=o.thread_ids?o.thread_ids.length:await mt(o).catch(se);u&&(i=u)}if(!Array.isArray(r[c])||s){const u=Math.ceil(i/l);r[c]=await St(u)}if(typeof r[c][a]=="undefined")return[];if(!r[c][a].isLoaded){const u=await dt(o,l,a*l).catch(se);u&&(r[c][a].threads=u,r[c][a].isLoaded=!0)}return n(u=>(u[c]=r[c],ne({},u))),r[c][a].threads},getNumberOfItems:async o=>{if(!o.component_id&&!o.access_token)return 0;if(typeof i=="undefined"){const a=await mt(o).catch(se);a&&(i=a)}return i},getThreadsWithSearchKeyword:async(o,a=!1)=>{if(!o.component_id&&!o.access_token)return[];const l=JSON.stringify(o);if((!Array.isArray(r[l])||a)&&(r[l]=await St(1)),!r[l][0].isLoaded||a){const s=await Vn(o).catch(se);s&&(r[l][0].threads=s,r[l][0].isLoaded=!0)}return n(s=>(s[l]=r[l],ne({},s))),r[l][0].threads},updateThread:async(o,a,l,s,c)=>{const u=await Xn(o,l).catch(se);if(!r[a][s].isLoaded){const f=await dt(JSON.parse(a),c,s*c).catch(se);f&&(r[a][s].threads=f,r[a][s].isLoaded=!0)}return r[a][s].threads=r[a][s].threads.map(f=>(u&&f.id===u.id&&(f=Object.assign(f,u)),f)),n(f=>(f[a]=r[a],ne({},f))),r[a][s].threads},updateThreadSelection:(o,a,l)=>{const s=r[o][a].threads;if(l){const c=s.find(u=>u.id===l);c&&(c.selected=!c.selected)}else{const c=s.some(u=>u.selected);for(const u of s)u.selected=!c}return n(c=>(c[o]=r[o],ne({},c))),r[o][a].threads},reset:()=>{r={},e({})},hydrateMessageInThread:(o,a,l)=>{var s,c,u;const f=JSON.stringify(a),_=(c=(s=r[f][l])==null?void 0:s.threads)==null?void 0:c.find(d=>d.id===o.thread_id);if(_){const d=(u=_.messages)==null?void 0:u.find(p=>p.id===o.id);d?(d.body=o.body,n(p=>{if(o.thread_id){let m=p[f][l].threads.find(h=>h.id===_.id);m&&(m=JSON.parse(JSON.stringify(_)))}return ne({},p)})):n(p=>{if(o.thread_id){let m=p[f][l].threads.find(h=>h.id===_.id);if(m){const h=_.messages;h.push(o),_.messages=h,_.snippet=o.snippet,_.drafts=_.drafts.filter(O=>O.id!==o.id),m=JSON.parse(JSON.stringify(_))}}return ne({},p)})}return r[f][l].threads},hydrateDraftInThread:(o,a,l)=>{var s,c,u;const f=JSON.stringify(a),_=(c=(s=r[f][l])==null?void 0:s.threads)==null?void 0:c.find(d=>d.id===o.thread_id);if(_){const d=(u=_.drafts)==null?void 0:u.find(p=>p.id===o.id);if(o.thread_id){if(d)Object.assign(d,o);else{const p=_.drafts;p.push(o),_.drafts=p}n(p=>{let m=p[f][l].threads.find(h=>h.id===_.id);return m&&(m=JSON.parse(JSON.stringify(_))),ne({},p)})}}return r[f][l].threads}}}const hr=mr();Cn(hr,t=>{const e={};return Object.entries(t).forEach(([n,r])=>e[n]=r.map(i=>i.threads).flat()),e});function _r(){const t=(n,r)=>{const i=JSON.parse(r);if(!!i.component_id){if(!n[r]){const o=Bn(i.component_id,i.access_token);e.update(a=>(a[r]=o,a)),n[r]=o}return n[r]}},e=te(new Proxy({},{get:t}));return e}const pr=_r();function gr(t){return(e,n)=>{t.dispatchEvent&&t.dispatchEvent(new CustomEvent(e,{detail:n,composed:!0}))}}function br(t,e){let n;return()=>{n&&clearTimeout(n),n=setTimeout(t,e)}}function Fe(t,e,n){return new Proxy(t,{get:(r,i)=>i==="toString"||i==="toJSON"?()=>JSON.stringify(r):Reflect.get(r,i)!==void 0?Mt(Reflect.get(r,i),n[i]):e&&i in e?Mt(e[i],n[i]):n[i],ownKeys:r=>{const i=new Set([...Reflect.ownKeys(r),...Object.keys(e),...Object.keys(n)]);return Array.from(i)},getOwnPropertyDescriptor:(r,i)=>{var o,a;let l=Reflect.getOwnPropertyDescriptor(r,i);return l||(l=(a=(o=e&&Object.getOwnPropertyDescriptor(e,i))!=null?o:n&&Object.getOwnPropertyDescriptor(n,i))!=null?a:{configurable:!0,enumerable:!0,writable:!0},Reflect.defineProperty(r,i,l)),l}})}function Mt(t,e){if(t){if(typeof e=="boolean")return vr(t);if(typeof e=="number")return Number(t);if(e instanceof Date)return new Date(t)}return t===void 0?e!=null?e:null:t}function vr(t){return[!0,"true","1"].includes(t)}function Ct(t){let e,n,r,i,o,a;function l(u,f){if(u[2]==="HostDomainNotAllowedError")return wr;if(u[2]==="IncompatibleProperties")return yr}let s=l(t),c=s&&s(t);return{c(){var u,f;e=S("div"),c&&c.c(),n=j(),r=S("span"),r.textContent="Debug info:",i=j(),o=S("textarea"),y(r,"class","details"),y(o,"class","details"),o.readOnly=!0,o.value=a=`
      `+t[2]+": "+t[0]+`
      `+((f=(u=t[1].message)==null?void 0:u.message)!=null?f:"")+`
    `,y(e,"class","message-container")},m(u,f){b(u,e,f),c&&c.m(e,null),P(e,n),P(e,r),P(e,i),P(e,o)},p(u,f){var _,d;s===(s=l(u))&&c?c.p(u,f):(c&&c.d(1),c=s&&s(u),c&&(c.c(),c.m(e,n))),f&7&&a!==(a=`
      `+u[2]+": "+u[0]+`
      `+((d=(_=u[1].message)==null?void 0:_.message)!=null?d:"")+`
    `)&&(o.value=a)},d(u){u&&v(e),c&&c.d()}}}function yr(t){let e;return{c(){e=S("h3"),e.textContent="Your component properties do not work with each other."},m(n,r){b(n,e,r)},p:w,d(n){n&&v(e)}}}function wr(t){let e,n,r,i,o,a;return{c(){e=S("h3"),n=A(`You are trying to access this component from\xA0
        `),r=S("code"),r.textContent=`${window.location.hostname}`,i=A(`. The component's settings do not
        allow access from this domain.`),o=j(),a=S("h4"),a.innerHTML=`The list of allowed domains can be modified in your\xA0
        <a href="https://dashboard.nylas.com">Dashboard</a>.`},m(l,s){b(l,e,s),P(e,n),P(e,r),P(e,i),b(l,o,s),b(l,a,s)},p:w,d(l){l&&v(e),l&&v(o),l&&v(a)}}}function kr(t){let e,n=t[2]&&t[3]&&Ct(t);return{c(){n&&n.c(),e=me(),this.c=w},m(r,i){n&&n.m(r,i),b(r,e,i)},p(r,[i]){r[2]&&r[3]?n?n.p(r,i):(n=Ct(r),n.c(),n.m(e.parentNode,e)):n&&(n.d(1),n=null)},i:w,o:w,d(r){n&&n.d(r),r&&v(e)}}}function Or(t,e,n){let r;ye(t,ze,_=>n(8,r=_));var i,o,a,l;let{id:s}=e,c,u;const f=window.location.href.includes("localhost")||window.location.href.includes("127.0.0.1");return t.$$set=_=>{"id"in _&&n(0,s=_.id)},t.$$.update=()=>{t.$$.dirty&499&&(n(1,c=n(4,i=r[s])!==null&&i!==void 0?i:{name:""}),n(2,u=n(7,l=n(5,o=c.name)!==null&&o!==void 0?o:n(6,a=c.message)===null||a===void 0?void 0:a.name)!==null&&l!==void 0?l:""))},[s,c,u,f,i,o,a,l,r]}class Pr extends We{constructor(e){super();this.shadowRoot.innerHTML=`<style>.message-container{background:#fff6f6;border-radius:5px;box-shadow:0 0 0 1px #aa92a0 inset, 0 0 0 0 transparent;color:#9f3a38;font-size:1.25rem;padding:10px;margin:0 auto;transition:opacity 500ms ease, color 500ms ease,
      background-color 500ms ease, box-shadow 500ms ease,
      -webkit-box-shadow 500ms ease}.message-container *:focus{outline:5px auto Highlight;outline:5px auto -webkit-focus-ring-color}.details{color:#494949;font-size:0.75rem;width:100%}</style>`,rt(this,{target:this.shadowRoot,props:Ke(this.attributes),customElement:!0},Or,kr,Bt,{id:0},null),e&&(e.target&&b(e.target,this,e.anchor),e.props&&(this.$set(e.props),W()))}static get observedAttributes(){return["id"]}get id(){return this.$$.ctx[0]}set id(e){this.$$set({id:e}),W()}}customElements.define("nylas-error",Pr);const Sr={last_emailed:(t,e)=>(e.last_contacted_date||0)-(t.last_contacted_date||0),name:(t,e)=>(t.given_name||t.emails[0].email).localeCompare(e.given_name||e.emails[0].email)};function Et(t,e,n){const r=t.slice();return r[50]=e[n],r[51]=e,r[52]=n,r}function Nt(t){let e;return{c(){e=S("link"),y(e,"rel","stylesheet"),y(e,"href",t[9])},m(n,r){b(n,e,r)},p(n,r){r[0]&512&&y(e,"href",n[9])},d(n){n&&v(e)}}}function Mr(t){let e;return{c(){e=S("div"),e.innerHTML=`<p>Enter contacts using the
        <code>contacts</code>
        prop or sync a Nylas account in the Dashboard.</p> 
      <p>See our <a href="https://docs.nylas.com/docs/contact-list-component" target="_blank">Docs</a>
        for more details.</p>`,y(e,"class","empty-state")},m(n,r){b(n,e,r)},d(n){n&&v(e)}}}function Cr(t){let e;return{c(){e=S("div"),y(e,"class","loader")},m(n,r){b(n,e,r)},d(n){n&&v(e)}}}function Er(t){return{c:w,m:w,p:w,d:w}}function Nr(t){let e,n,r,i=t[8]==="loading"&&t[49].length>=t[2].contacts_to_load&&Tt(t),o=t[2].show_filter&&t[8]!=="loading"&&At(t),a=t[49],l=[];for(let s=0;s<a.length;s+=1)l[s]=Ft(Et(t,a,s));return{c(){i&&i.c(),e=j(),o&&o.c(),n=j(),r=S("ul");for(let s=0;s<l.length;s+=1)l[s].c();y(r,"class","contacts")},m(s,c){i&&i.m(s,c),b(s,e,c),o&&o.m(s,c),b(s,n,c),b(s,r,c);for(let u=0;u<l.length;u+=1)l[u].m(r,null)},p(s,c){if(s[8]==="loading"&&s[49].length>=s[2].contacts_to_load?i?i.p(s,c):(i=Tt(s),i.c(),i.m(e.parentNode,e)):i&&(i.d(1),i=null),s[2].show_filter&&s[8]!=="loading"?o?o.p(s,c):(o=At(s),o.c(),o.m(n.parentNode,n)):o&&(o.d(1),o=null),c[0]&5140){a=s[49];let u;for(u=0;u<a.length;u+=1){const f=Et(s,a,u);l[u]?l[u].p(f,c):(l[u]=Ft(f),l[u].c(),l[u].m(r,null))}for(;u<l.length;u+=1)l[u].d(1);l.length=a.length}},d(s){i&&i.d(s),s&&v(e),o&&o.d(s),s&&v(n),s&&v(r),xt(l,s)}}}function Tt(t){let e,n;return{c(){e=S("span"),n=A("Loading More Contacts"),y(e,"class","loading"),we(e,"--height",t[6]+"px"),we(e,"--width",t[7]+"px")},m(r,i){b(r,e,i),P(e,n)},p(r,i){i[0]&64&&we(e,"--height",r[6]+"px"),i[0]&128&&we(e,"--width",r[7]+"px")},d(r){r&&v(e)}}}function At(t){let e,n,r,i,o;return{c(){e=S("label"),n=A("Filter by email: "),r=S("input"),y(r,"id","show-filter-input"),y(r,"type","text"),y(e,"class","entry filter")},m(a,l){b(a,e,l),P(e,n),P(e,r),Ze(r,t[1]),i||(o=$(r,"input",t[31]),i=!0)},p(a,l){l[0]&2&&r.value!==a[1]&&Ze(r,a[1])},d(a){a&&v(e),i=!1,o()}}}function Dt(t){let e,n,r,i=(t[50].selected?"Deselect":"Select")+"",o,a,l=t[50].given_name+"",s,c,u=t[50].surname+"",f,_,d;function p(){t[32].call(e,t[51],t[52])}return{c(){e=S("input"),n=j(),r=S("label"),o=A(i),a=j(),s=A(l),c=j(),f=A(u),y(e,"type","checkbox"),y(e,"id","contact-"+t[52]+"-checkbox"),y(r,"for","contact-"+t[52]+"-checkbox")},m(m,h){b(m,e,h),e.checked=t[50].selected,b(m,n,h),b(m,r,h),P(r,o),P(r,a),P(r,s),P(r,c),P(r,f),_||(d=$(e,"change",p),_=!0)},p(m,h){t=m,h[0]&1024&&(e.checked=t[50].selected),h[0]&1024&&i!==(i=(t[50].selected?"Deselect":"Select")+"")&&F(o,i),h[0]&1024&&l!==(l=t[50].given_name+"")&&F(s,l),h[0]&1024&&u!==(u=t[50].surname+"")&&F(f,u)},d(m){m&&v(e),m&&v(n),m&&v(r),_=!1,d()}}}function Tr(t){let e,n=(t[50].given_name&&t[50].surname?t[50].given_name.charAt(0)+t[50].surname.charAt(0):t[50].emails[0].email.charAt(0))+"",r;return{c(){e=S("div"),r=A(n),y(e,"class","default")},m(i,o){b(i,e,o),P(e,r)},p(i,o){o[0]&1024&&n!==(n=(i[50].given_name&&i[50].surname?i[50].given_name.charAt(0)+i[50].surname.charAt(0):i[50].emails[0].email.charAt(0))+"")&&F(r,n)},d(i){i&&v(e)}}}function Ar(t){let e=(t[50].default_picture=t[2].default_photo)+"",n;return{c(){n=A(e)},m(r,i){b(r,n,i)},p(r,i){i[0]&1028&&e!==(e=(r[50].default_picture=r[2].default_photo)+"")&&F(n,e)},d(r){r&&v(n)}}}function Dr(t){let e,n,r;return{c(){e=S("img"),oe(e.src,n=t[50].default_picture)||y(e,"src",n),y(e,"alt",r=t[50].emails[0].email),y(e,"data-cy","default_set_by_user")},m(i,o){b(i,e,o)},p(i,o){o[0]&1024&&!oe(e.src,n=i[50].default_picture)&&y(e,"src",n),o[0]&1024&&r!==(r=i[50].emails[0].email)&&y(e,"alt",r)},d(i){i&&v(e)}}}function jr(t){let e;function n(o,a){var l;return((l=o[2].contacts)==null?void 0:l.length)?Wr:Rr}let r=n(t),i=r(t);return{c(){i.c(),e=me()},m(o,a){i.m(o,a),b(o,e,a)},p(o,a){r===(r=n(o))&&i?i.p(o,a):(i.d(1),i=r(o),i&&(i.c(),i.m(e.parentNode,e)))},d(o){i.d(o),o&&v(e)}}}function Ir(t){let e,n=t[50].picture!=="Loading"&&jt(t);return{c(){n&&n.c(),e=me()},m(r,i){n&&n.m(r,i),b(r,e,i)},p(r,i){r[50].picture!=="Loading"?n?n.p(r,i):(n=jt(r),n.c(),n.m(e.parentNode,e)):n&&(n.d(1),n=null)},d(r){n&&n.d(r),r&&v(e)}}}function Rr(t){let e,n;function r(...o){return t[33](t[50],t[51],t[52],...o)}let i={ctx:t,current:null,token:null,hasCatch:!1,pending:Jr,then:zr,catch:Lr};return Ce(n=lt(t[4],t[50].id).then(r),i),{c(){e=me(),i.block.c()},m(o,a){b(o,e,a),i.block.m(o,i.anchor=a),i.mount=()=>e.parentNode,i.anchor=e},p(o,a){t=o,i.ctx=t,a[0]&1040&&n!==(n=lt(t[4],t[50].id).then(r))&&Ce(n,i)||nt(i,t,a)},d(o){o&&v(e),i.block.d(o),i.token=null,i=null}}}function Wr(t){let e,n,r;return{c(){e=S("img"),oe(e.src,n=t[50].picture_url)||y(e,"src",n),y(e,"alt",r=t[50].emails[0].email)},m(i,o){b(i,e,o)},p(i,o){o[0]&1024&&!oe(e.src,n=i[50].picture_url)&&y(e,"src",n),o[0]&1024&&r!==(r=i[50].emails[0].email)&&y(e,"alt",r)},d(i){i&&v(e)}}}function Lr(t){return{c:w,m:w,p:w,d:w}}function zr(t){return{c:w,m:w,p:w,d:w}}function Jr(t){let e=(t[50].picture="Loading")+"",n;return{c(){n=A(e)},m(r,i){b(r,n,i)},p(r,i){i[0]&1024&&e!==(e=(r[50].picture="Loading")+"")&&F(n,e)},d(r){r&&v(n)}}}function jt(t){let e,n,r;return{c(){e=S("img"),y(e,"alt",n=t[50].emails[0].email),oe(e.src,r="data:image/jpg;base64,"+t[50].picture)||y(e,"src",r)},m(i,o){b(i,e,o)},p(i,o){o[0]&1024&&n!==(n=i[50].emails[0].email)&&y(e,"alt",n),o[0]&1024&&!oe(e.src,r="data:image/jpg;base64,"+i[50].picture)&&y(e,"src",r)},d(i){i&&v(e)}}}function Fr(t){let e=t[50].emails[0].email+"",n;return{c(){n=A(e)},m(r,i){b(r,n,i)},p(r,i){i[0]&1024&&e!==(e=r[50].emails[0].email+"")&&F(n,e)},d(r){r&&v(n)}}}function Hr(t){let e,n,r,i=t[50].given_name&&It(t),o=t[50].surname&&Rt(t),a=!t[50].given_name&&!t[50].surname&&Wt(t);return{c(){i&&i.c(),e=j(),o&&o.c(),n=j(),a&&a.c(),r=me()},m(l,s){i&&i.m(l,s),b(l,e,s),o&&o.m(l,s),b(l,n,s),a&&a.m(l,s),b(l,r,s)},p(l,s){l[50].given_name?i?i.p(l,s):(i=It(l),i.c(),i.m(e.parentNode,e)):i&&(i.d(1),i=null),l[50].surname?o?o.p(l,s):(o=Rt(l),o.c(),o.m(n.parentNode,n)):o&&(o.d(1),o=null),!l[50].given_name&&!l[50].surname?a?a.p(l,s):(a=Wt(l),a.c(),a.m(r.parentNode,r)):a&&(a.d(1),a=null)},d(l){i&&i.d(l),l&&v(e),o&&o.d(l),l&&v(n),a&&a.d(l),l&&v(r)}}}function It(t){let e=t[50].given_name+"",n;return{c(){n=A(e)},m(r,i){b(r,n,i)},p(r,i){i[0]&1024&&e!==(e=r[50].given_name+"")&&F(n,e)},d(r){r&&v(n)}}}function Rt(t){let e=t[50].surname+"",n;return{c(){n=A(e)},m(r,i){b(r,n,i)},p(r,i){i[0]&1024&&e!==(e=r[50].surname+"")&&F(n,e)},d(r){r&&v(n)}}}function Wt(t){let e=t[50].emails[0].email+"",n;return{c(){n=A(e)},m(r,i){b(r,n,i)},p(r,i){i[0]&1024&&e!==(e=r[50].emails[0].email+"")&&F(n,e)},d(r){r&&v(n)}}}function Lt(t){let e,n=t[50].emails[0].email+"",r,i,o=t[50].emails.length>1&&zt(t);return{c(){e=S("span"),r=A(n),i=j(),o&&o.c(),y(e,"class","email")},m(a,l){b(a,e,l),P(e,r),P(e,i),o&&o.m(e,null)},p(a,l){l[0]&1024&&n!==(n=a[50].emails[0].email+"")&&F(r,n),a[50].emails.length>1?o?o.p(a,l):(o=zt(a),o.c(),o.m(e,null)):o&&(o.d(1),o=null)},d(a){a&&v(e),o&&o.d()}}}function zt(t){let e,n=t[50].emails.length-1+"",r,i;return{c(){e=A(`and
                `),r=A(n),i=A(`
                others`)},m(o,a){b(o,e,a),b(o,r,a),b(o,i,a)},p(o,a){a[0]&1024&&n!==(n=o[50].emails.length-1+"")&&F(r,n)},d(o){o&&v(e),o&&v(r),o&&v(i)}}}function Jt(t){let e,n=t[50].time_ago+"",r;return{c(){e=S("span"),r=A(n),y(e,"class","recency"),ae(e,"no-last-contact-data",!t[50].last_contacted_date)},m(i,o){b(i,e,o),P(e,r)},p(i,o){o[0]&1024&&n!==(n=i[50].time_ago+"")&&F(r,n),o[0]&1024&&ae(e,"no-last-contact-data",!i[50].last_contacted_date)},d(i){i&&v(e)}}}function Ft(t){let e,n,r,i,o,a,l,s,c,u,f,_,d=t[2].click_action==="select"&&Dt(t);function p(k,D){return k[50].picture?Ir:k[50].picture_url?jr:k[50].default_picture?Dr:k[2].default_photo?Ar:Tr}let m=p(t),h=m(t);function O(k,D){return k[2].show_names?Hr:Fr}let R=O(t),M=R(t),E=t[2].show_names&&Lt(t),N=t[50].time_ago&&Jt(t);function C(...k){return t[34](t[50],...k)}function U(...k){return t[35](t[50],...k)}return{c(){e=S("li"),n=S("span"),d&&d.c(),r=j(),i=S("span"),h.c(),o=j(),a=S("span"),M.c(),l=j(),E&&E.c(),s=j(),N&&N.c(),c=j(),y(n,"class","checkbox"),y(i,"class","image"),y(a,"class","title"),y(e,"tabindex","0"),y(e,"class","entry contact"),y(e,"data-cy",t[52]),y(e,"data-last-contacted-date",u=t[50].last_contacted_date||-1),ae(e,"selectable",t[2].click_action==="select"),ae(e,"selected",t[50].selected)},m(k,D){b(k,e,D),P(e,n),d&&d.m(n,null),P(e,r),P(e,i),h.m(i,null),P(e,o),P(e,a),M.m(a,null),P(e,l),E&&E.m(e,null),P(e,s),N&&N.m(e,null),P(e,c),f||(_=[$(e,"click",C),$(e,"keyup",U)],f=!0)},p(k,D){t=k,t[2].click_action==="select"?d?d.p(t,D):(d=Dt(t),d.c(),d.m(n,null)):d&&(d.d(1),d=null),m===(m=p(t))&&h?h.p(t,D):(h.d(1),h=m(t),h&&(h.c(),h.m(i,null))),R===(R=O(t))&&M?M.p(t,D):(M.d(1),M=R(t),M&&(M.c(),M.m(a,null))),t[2].show_names?E?E.p(t,D):(E=Lt(t),E.c(),E.m(e,s)):E&&(E.d(1),E=null),t[50].time_ago?N?N.p(t,D):(N=Jt(t),N.c(),N.m(e,c)):N&&(N.d(1),N=null),D[0]&1024&&u!==(u=t[50].last_contacted_date||-1)&&y(e,"data-last-contacted-date",u),D[0]&4&&ae(e,"selectable",t[2].click_action==="select"),D[0]&1024&&ae(e,"selected",t[50].selected)},d(k){k&&v(e),d&&d.d(),h.d(),M.d(),E&&E.d(),N&&N.d(),f=!1,K(_)}}}function Ur(t){return{c:w,m:w,p:w,d:w}}function Yr(t){let e,n,r,i,o,a,l,s,c,u,f=t[9]&&Nt(t);function _(h,O){if(h[8]==="loading"&&h[3].length<=0)return Cr;if(h[3].length===0)return Mr}let d=_(t),p=d&&d(t),m={ctx:t,current:null,token:null,hasCatch:!1,pending:Ur,then:Nr,catch:Er,value:49};return Ce(a=t[10],m),{c(){e=S("nylas-error"),n=j(),f&&f.c(),r=j(),i=S("main"),p&&p.c(),o=j(),m.block.c(),this.c=w,Ge(e,"id",t[0]),y(i,"class",l=t[9]?"custom":t[2].theme),Pe(()=>t[37].call(i))},m(h,O){b(h,e,O),b(h,n,O),f&&f.m(h,O),b(h,r,O),b(h,i,O),p&&p.m(i,null),P(i,o),m.block.m(i,m.anchor=null),m.mount=()=>i,m.anchor=null,t[36](i),s=Kt(i,t[37].bind(i)),c||(u=$(i,"scroll",function(){be(t[2].contacts?Ht:t[11])&&(t[2].contacts?Ht:t[11]).apply(this,arguments)}),c=!0)},p(h,O){t=h,O[0]&1&&Ge(e,"id",t[0]),t[9]?f?f.p(t,O):(f=Nt(t),f.c(),f.m(r.parentNode,r)):f&&(f.d(1),f=null),d!==(d=_(t))&&(p&&p.d(1),p=d&&d(t),p&&(p.c(),p.m(i,o))),m.ctx=t,O[0]&1024&&a!==(a=t[10])&&Ce(a,m)||nt(m,t,O),O[0]&516&&l!==(l=t[9]?"custom":t[2].theme)&&y(i,"class",l)},i:w,o:w,d(h){h&&v(e),h&&v(n),f&&f.d(h),h&&v(r),h&&v(i),p&&p.d(),m.block.d(),m.token=null,m=null,t[36](null),s(),c=!1,u()}}}let Vr="byEmail";const Ht=()=>{};function Xr(t,e,n){let r,i,o;ye(t,Je,g=>n(29,r=g)),ye(t,pr,g=>n(39,i=g)),ye(t,ze,g=>n(30,o=g));var a=this&&this.__awaiter||function(g,T,q,Z){function ri(ge){return ge instanceof q?ge:new q(function(Te){Te(ge)})}return new(q||(q=Promise))(function(ge,Te){function ii(ie){try{Ue(Z.next(ie))}catch(Ye){Te(Ye)}}function oi(ie){try{Ue(Z.throw(ie))}catch(Ye){Te(Ye)}}function Ue(ie){ie.done?ge(ie.value):ri(ie.value).then(ii,oi)}Ue((Z=Z.apply(g,T||[])).next())})};let{id:l=""}=e,{access_token:s=""}=e,{click_action:c}=e,{contacts_to_load:u}=e,{contacts:f}=e,{default_photo:_}=e,{show_filter:d}=e,{show_names:p}=e,{sort_by:m}=e,{theme:h="theme-1"}=e,{group:O}=e;const R={click_action:"email",contacts_to_load:100,show_filter:!1,show_names:!0,sort_by:"name",theme:"theme-1"};let M="";const E={byEmail:g=>g.emails[0].email.includes(M)},N=gr(De());let C=Fe({},{},R),U={},k,D=0,ce=0,J=0,L=0,z=[],B="loading",re=!1;qt(()=>a(void 0,void 0,void 0,function*(){yield $t(),n(6,D=(k==null?void 0:k.getBoundingClientRect().height)||0),n(7,ce=(k==null?void 0:k.getBoundingClientRect().width)||0),n(23,U=(yield i[JSON.stringify({component_id:l,access_token:s})])||{}),n(2,C=Fe(e,U,R)),C.contacts?(n(3,z=C.contacts),n(8,B="loaded")):r[G]?(n(3,z=r[G]),n(8,B="loaded")):fe.component_id&&Ee(),n(26,re=!0)}));let ue=e,Yt,fe,G,Vt;function Br(){return a(this,void 0,void 0,function*(){!re||(n(8,B="loading"),f&&Array.isArray(f)?(n(3,z=f),n(8,B="loaded")):r[G]?(n(3,z=r[G]),n(8,B="loaded")):fe.component_id?Ee():(n(3,z=[]),n(8,B="loaded")))})}function Ee(){n(8,B="loading"),Je.addContacts(fe,Vt).then(g=>{var T;g&&g.length>0&&(n(3,z=(T=r[G])!==null&&T!==void 0?T:g),n(24,J+=C.contacts_to_load)),n(8,B="loaded")})}function Qr(){const{scrollHeight:g,scrollTop:T}=k;Math.abs(T+D-g)<=50&&Ee()}const xr=br(Qr,500);let Ne=[];const Gr=new Date;function He(g,T){C.click_action==="email"&&(window.location.href=`mailto:${T.emails[0].email}`),C.click_action==="select"&&(T.selected=!T.selected,N("contactClicked",{event:g,contact:T,contacts:z}),n(3,z=[...z]))}function Zr(){M=this.value,n(1,M)}function Kr(g,T){g[T].selected=this.checked,n(10,Ne),n(1,M),n(3,z),n(2,C),n(27,ue),n(48,e),n(23,U),n(26,re)}const qr=(g,T,q,Z)=>n(10,T[q].picture=Z,Ne),$r=(g,T)=>He(T,g),ei=(g,T)=>{T.key==="Enter"&&He(T,g)};function ti(g){je[g?"unshift":"push"](()=>{k=g,n(5,k)})}function ni(){D=this.clientHeight,ce=this.clientWidth,n(6,D),n(7,ce)}return t.$$set=g=>{n(48,e=Ve(Ve({},e),xe(g))),"id"in g&&n(0,l=g.id),"access_token"in g&&n(13,s=g.access_token),"click_action"in g&&n(14,c=g.click_action),"contacts_to_load"in g&&n(15,u=g.contacts_to_load),"contacts"in g&&n(16,f=g.contacts),"default_photo"in g&&n(17,_=g.default_photo),"show_filter"in g&&n(18,d=g.show_filter),"show_names"in g&&n(19,p=g.show_names),"sort_by"in g&&n(20,m=g.sort_by),"theme"in g&&n(21,h=g.theme),"group"in g&&n(22,O=g.group)},t.$$.update=()=>{if(t.$$.dirty[0]&8388608&&N("manifestLoaded",U),t.$$.dirty[0]&1073741824&&Object.keys(o).length&&N("onError",o),JSON.stringify(ue)!==JSON.stringify(e)&&(n(2,C=Fe(e,U,R)),n(27,ue=e)),t.$$.dirty[0]&67108868&&re&&n(2,C.contacts_to_load=Math.max(Math.min(C.contacts_to_load,1e3),1),C),t.$$.dirty[0]&4&&!!C.theme&&(C.theme.startsWith(".")||C.theme.startsWith("http"))&&n(9,Yt=C.theme),t.$$.dirty[0]&8193&&n(4,fe={component_id:l,access_token:s}),t.$$.dirty[0]&16&&n(28,G=JSON.stringify(fe)),t.$$.dirty[0]&838860804&&r[G]&&C.contacts_to_load!==L&&(n(25,L=C.contacts_to_load),n(24,J=0),Ee()),t.$$.dirty[0]&16777220&&(Vt=Object.assign({offset:J,limit:C.contacts_to_load},C.group?{group:C.group}:{})),t.$$.dirty[0]&268500992&&Br(),t.$$.dirty[0]&8&&z.length&&n(3,z=z.map(g=>(g.last_contacted_date?g.time_ago=`Emailed ${Sn(Gr,new Date(g.last_contacted_date*1e3),{addSuffix:!1})} ago`:g.time_ago="No recent activity",g))),t.$$.dirty[0]&14){const g=z.filter(E[Vr]).sort(Sr[C.sort_by]),T=Object.values(g.reduce((q,Z)=>Object.assign(q,{[Z.emails[0].email]:Z}),{}));n(10,Ne=T)}},e=xe(e),[l,M,C,z,fe,k,D,ce,B,Yt,Ne,xr,He,s,c,u,f,_,d,p,m,h,O,U,J,L,re,ue,G,r,o,Zr,Kr,qr,$r,ei,ti,ni]}class Ut extends We{constructor(e){super();this.shadowRoot.innerHTML=`<style>*{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline;list-style:none}.sr-only{position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden}main{--black:#161717;--grey-dark:#636671;--grey:#bdc0cb;--grey-lighter:#dfe1e8;--grey-dark-warm:#9fa4b5;--grey-lightest:#f7f7f8;--grey-background:#f0f1f5;--white:#ffffff;--blue:#314fa9;--blue-lighter:#f0f3ff;--red:#ee3248;--red-lighter:#ffeef0;--fs-12:0.75rem;--fs-14:0.875rem;--fs-16:1rem;--black-90:#2c2e2e;--grey-light:#f7f7f8;--grey-warm:#cbcbcb}main{height:100%;width:100%;overflow:auto;position:relative}main.theme-1{--mainText:#000000;--linesAndIcons:#d5d5d5;--contactColor:#002db4;--contactTextColor:white;--selectColor:#36d2ac;--hoverColor:#eee}main.theme-2{--mainText:#000000;--linesAndIcons:#d5d5d5;--contactColor:#6300c6;--contactTextColor:#ffffff;--selectColor:#d23636;--hoverColor:#eee}main.theme-3{--mainText:#000000;--linesAndIcons:#d5d5d5;--contactColor:#1d9f51;--contactTextColor:#ffffff;--selectColor:#c12b73;--hoverColor:#eee}main.theme-4{--mainText:#ffffff;--linesAndIcons:#414247;--contactColor:#1951fa;--contactTextColor:#ffffff;--selectColor:#7ae1c7;--hoverColor:#eee}main.theme-5{--mainText:#ffffff;--linesAndIcons:#d5d5d5;--contactColor:#5285ed;--contactTextColor:#ffffff;--selectColor:#ecb63f;--hoverColor:#eee}.loader{display:grid;justify-content:center;align-content:center;height:100%;width:100%}@keyframes lds-dual-ring{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.loader::after{content:" ";display:block;width:50px;height:50px;margin:8px;border-radius:50%;border:6px solid var(--linesAndIcons);border-left-color:transparent;border-right-color:transparent;animation:lds-dual-ring 1.2s linear infinite}.empty-state{background-color:white;border:2px dashed var(--linesAndIcons);padding:3rem;text-align:center}.empty-state p{margin:1rem 0}.loading{overflow:auto;display:flex;justify-content:center;align-items:center;z-index:1;background-color:#000c;color:white;position:fixed;opacity:0.8;height:var(--height, 100%);width:var(--width, 100%)}.entry{display:flex;align-items:center;padding:14px 8px;list-style-type:none;background-color:white;border-bottom:1px solid var(--linesAndIcons);max-width:100%;overflow:hidden}.filter input{margin-left:10px;padding:0.5rem}.contacts{display:grid;max-width:100%}.contacts .contact{display:grid;transition:0.2s;border-left:0 solid var(--contactColor);grid-template-areas:"check image title title" "check image email recency";grid-template-columns:0 56px 1fr max-content;gap:0.25rem}.contacts .contact.selectable{grid-template-columns:24px 56px 1fr max-content}.contacts .contact.selected{border-left:10px solid var(--contactColor)}.contacts .contact:hover,.contacts .contact:focus{cursor:pointer;background-color:var(--hoverColor);outline:none}.contacts .contact span{display:block;text-overflow:ellipsis;overflow:hidden}.contacts .contact span div.default{background:var(--contactColor);color:var(--contactTextColor);border-radius:48px;height:48px;width:48px;display:flex;justify-content:center;align-items:center;font-size:large;text-transform:uppercase;font-family:sans-serif}.contacts .contact .checkbox{grid-area:check}.contacts .contact .checkbox label{position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden}.contacts .contact .checkbox input{border-radius:4px;width:16px;height:16px;border:0;cursor:pointer;background-color:var(--linesAndIcons);-webkit-appearance:none;-moz-appearance:none;-o-appearance:none;appearance:none}.contacts .contact .checkbox input:checked{background-color:var(--contactColor)}.contacts .contact .checkbox input:checked::before{content:" ";background-image:url('data:image/svg+xml;utf8,<svg width="14" height="10" viewBox="0 0 14 10" xmlns="http://www.w3.org/2000/svg"><path d="M5.29249 9.2925C4.90249 9.6825 4.27249 9.6825 3.88249 9.2925L0.292486 5.7025C0.105233 5.51567 0 5.26202 0 4.9975C0 4.73298 0.105233 4.47933 0.292486 4.2925C0.682486 3.9025 1.31249 3.9025 1.70249 4.2925L4.58249 7.1725L11.4625 0.2925C11.8525 -0.0975 12.4825 -0.0975 12.8725 0.2925C13.2625 0.6825 13.2625 1.3125 12.8725 1.7025L5.29249 9.2925Z" fill="white"/></svg>');height:10px;width:14px;display:block;text-align:center;margin-left:1.5px;margin-top:3px}.contacts .contact .image{grid-area:image}.contacts .contact .image img{border-radius:48px;height:48px;width:48px}.contacts .contact .title{grid-area:title;font-weight:bold}.contacts .contact .email{grid-area:email;white-space:nowrap}.contacts .contact .recency{grid-area:recency;font-size:small}.contacts .contact .recency.no-last-contact-data{display:none}@media(min-width: 640px){.contacts .contact{grid-template-areas:"check image title recency" "check image email recency"}.contacts .contact .recency.no-last-contact-data{display:block}}</style>`,rt(this,{target:this.shadowRoot,props:Ke(this.attributes),customElement:!0},Xr,Yr,Be,{id:0,access_token:13,click_action:14,contacts_to_load:15,contacts:16,default_photo:17,show_filter:18,show_names:19,sort_by:20,theme:21,group:22},null,[-1,-1]),e&&(e.target&&b(e.target,this,e.anchor),e.props&&(this.$set(e.props),W()))}static get observedAttributes(){return["id","access_token","click_action","contacts_to_load","contacts","default_photo","show_filter","show_names","sort_by","theme","group"]}get id(){return this.$$.ctx[0]}set id(e){this.$$set({id:e}),W()}get access_token(){return this.$$.ctx[13]}set access_token(e){this.$$set({access_token:e}),W()}get click_action(){return this.$$.ctx[14]}set click_action(e){this.$$set({click_action:e}),W()}get contacts_to_load(){return this.$$.ctx[15]}set contacts_to_load(e){this.$$set({contacts_to_load:e}),W()}get contacts(){return this.$$.ctx[16]}set contacts(e){this.$$set({contacts:e}),W()}get default_photo(){return this.$$.ctx[17]}set default_photo(e){this.$$set({default_photo:e}),W()}get show_filter(){return this.$$.ctx[18]}set show_filter(e){this.$$set({show_filter:e}),W()}get show_names(){return this.$$.ctx[19]}set show_names(e){this.$$set({show_names:e}),W()}get sort_by(){return this.$$.ctx[20]}set sort_by(e){this.$$set({sort_by:e}),W()}get theme(){return this.$$.ctx[21]}set theme(e){this.$$set({theme:e}),W()}get group(){return this.$$.ctx[22]}set group(e){this.$$set({group:e}),W()}}return customElements.define("nylas-contact-list",Ut),Ut});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
