(function(Xn,be){typeof exports=="object"&&typeof module!="undefined"?module.exports=be():typeof define=="function"&&define.amd?define(be):(Xn=typeof globalThis!="undefined"?globalThis:Xn||self,Xn.app=be())})(this,function(){"use strict";const Xn=window.customElements.define.bind(window.customElements);window.customElements.define=(t,...n)=>{if(!customElements.get(t))return Xn(t,...n)};function be(){}function ea(t,n){for(const a in n)t[a]=n[a];return t}function ho(t){return t&&typeof t=="object"&&typeof t.then=="function"}function Dr(t){return t()}function ta(){return Object.create(null)}function wt(t){t.forEach(Dr)}function lr(t){return typeof t=="function"}function vo(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function na(t,n){return t!=t?n==n:t!==n}function yo(t){return Object.keys(t).length===0}function ra(t,...n){if(t==null)return be;const a=t.subscribe(...n);return a.unsubscribe?()=>a.unsubscribe():a}function Rn(t,n,a){t.$$.on_destroy.push(ra(n,a))}function aa(t){const n={};for(const a in t)a[0]!=="$"&&(n[a]=t[a]);return n}const ia=typeof window!="undefined";let oa=ia?()=>window.performance.now():()=>Date.now(),sa=ia?t=>requestAnimationFrame(t):be;const Fn=new Set;function la(t){Fn.forEach(n=>{n.c(t)||(Fn.delete(n),n.f())}),Fn.size!==0&&sa(la)}function go(t){let n;return Fn.size===0&&sa(la),{promise:new Promise(a=>{Fn.add(n={c:t,f:a})}),abort(){Fn.delete(n)}}}function j(t,n){t.appendChild(n)}function G(t,n,a){t.insertBefore(n,a||null)}function B(t){t.parentNode.removeChild(t)}function xn(t,n){for(let a=0;a<t.length;a+=1)t[a]&&t[a].d(n)}function J(t){return document.createElement(t)}function Pn(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function Se(t){return document.createTextNode(t)}function we(){return Se(" ")}function zn(){return Se("")}function ze(t,n,a,l){return t.addEventListener(n,a,l),()=>t.removeEventListener(n,a,l)}function z(t,n,a){a==null?t.removeAttribute(n):t.getAttribute(n)!==a&&t.setAttribute(n,a)}function ua(t,n,a){n in t?t[n]=typeof t[n]=="boolean"&&a===""?!0:a:z(t,n,a)}function po(t){return Array.from(t.childNodes)}function He(t,n){n=""+n,t.wholeText!==n&&(t.data=n)}function Be(t,n,a,l){a===null?t.style.removeProperty(n):t.style.setProperty(n,a,l?"important":"")}let ur;function _o(){if(ur===void 0){ur=!1;try{typeof window!="undefined"&&window.parent&&window.parent.document}catch(t){ur=!0}}return ur}function bo(t,n){getComputedStyle(t).position==="static"&&(t.style.position="relative");const l=J("iframe");l.setAttribute("style","display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;"),l.setAttribute("aria-hidden","true"),l.tabIndex=-1;const d=_o();let c;return d?(l.src="data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}<\/script>",c=ze(window,"message",f=>{f.source===l.contentWindow&&n()})):(l.src="about:blank",l.onload=()=>{c=ze(l.contentWindow,"resize",n)}),j(t,l),()=>{(d||c&&l.contentWindow)&&c(),B(l)}}function Ee(t,n,a){t.classList[a?"add":"remove"](n)}function da(t){const n={};for(const a of t)n[a.name]=a.value;return n}let Kn;function Ht(t){Kn=t}function Ir(){if(!Kn)throw new Error("Function called outside component initialization");return Kn}function wo(t){Ir().$$.on_mount.push(t)}const $n=[],Nr=[],dr=[],ca=[],fa=Promise.resolve();let Mr=!1;function ma(){Mr||(Mr=!0,fa.then(de))}function To(){return ma(),fa}function cr(t){dr.push(t)}const Ar=new Set;let fr=0;function de(){const t=Kn;do{for(;fr<$n.length;){const n=$n[fr];fr++,Ht(n),So(n.$$)}for(Ht(null),$n.length=0,fr=0;Nr.length;)Nr.pop()();for(let n=0;n<dr.length;n+=1){const a=dr[n];Ar.has(a)||(Ar.add(a),a())}dr.length=0}while($n.length);for(;ca.length;)ca.pop()();Mr=!1,Ar.clear(),Ht(t)}function So(t){if(t.fragment!==null){t.update(),wt(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(cr)}}const mr=new Set;let cn;function Oo(){cn={r:0,c:[],p:cn}}function ko(){cn.r||wt(cn.c),cn=cn.p}function ha(t,n){t&&t.i&&(mr.delete(t),t.i(n))}function Eo(t,n,a,l){if(t&&t.o){if(mr.has(t))return;mr.add(t),cn.c.push(()=>{mr.delete(t),l&&(a&&t.d(1),l())}),t.o(n)}}function va(t,n){const a=n.token={};function l(d,c,f,v){if(n.token!==a)return;n.resolved=v;let p=n.ctx;f!==void 0&&(p=p.slice(),p[f]=v);const w=d&&(n.current=d)(p);let O=!1;n.block&&(n.blocks?n.blocks.forEach((b,k)=>{k!==c&&b&&(Oo(),Eo(b,1,1,()=>{n.blocks[k]===b&&(n.blocks[k]=null)}),ko())}):n.block.d(1),w.c(),ha(w,1),w.m(n.mount(),n.anchor),O=!0),n.block=w,n.blocks&&(n.blocks[c]=w),O&&de()}if(ho(t)){const d=Ir();if(t.then(c=>{Ht(d),l(n.then,1,n.value,c),Ht(null)},c=>{if(Ht(d),l(n.catch,2,n.error,c),Ht(null),!n.hasCatch)throw c}),n.current!==n.pending)return l(n.pending,0),!0}else{if(n.current!==n.then)return l(n.then,1,n.value,t),!0;n.resolved=t}}function Do(t,n,a){const l=n.slice(),{resolved:d}=t;t.current===t.then&&(l[t.value]=d),t.current===t.catch&&(l[t.error]=d),t.block.p(l,a)}function Io(t,n,a,l){const{fragment:d,on_mount:c,on_destroy:f,after_update:v}=t.$$;d&&d.m(n,a),l||cr(()=>{const p=c.map(Dr).filter(lr);f?f.push(...p):wt(p),t.$$.on_mount=[]}),v.forEach(cr)}function No(t,n){const a=t.$$;a.fragment!==null&&(wt(a.on_destroy),a.fragment&&a.fragment.d(n),a.on_destroy=a.fragment=null,a.ctx=[])}function Mo(t,n){t.$$.dirty[0]===-1&&($n.push(t),ma(),t.$$.dirty.fill(0)),t.$$.dirty[n/31|0]|=1<<n%31}function ya(t,n,a,l,d,c,f,v=[-1]){const p=Kn;Ht(t);const w=t.$$={fragment:null,ctx:null,props:c,update:be,not_equal:d,bound:ta(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(n.context||(p?p.$$.context:[])),callbacks:ta(),dirty:v,skip_bound:!1,root:n.target||p.$$.root};f&&f(w.root);let O=!1;if(w.ctx=a?a(t,n.props||{},(b,k,...L)=>{const Q=L.length?L[0]:k;return w.ctx&&d(w.ctx[b],w.ctx[b]=Q)&&(!w.skip_bound&&w.bound[b]&&w.bound[b](Q),O&&Mo(t,b)),k}):[],w.update(),O=!0,wt(w.before_update),w.fragment=l?l(w.ctx):!1,n.target){if(n.hydrate){const b=po(n.target);w.fragment&&w.fragment.l(b),b.forEach(B)}else w.fragment&&w.fragment.c();n.intro&&ha(t.$$.fragment),Io(t,n.target,n.anchor,n.customElement),de()}Ht(p)}let Cr;typeof HTMLElement=="function"&&(Cr=class extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(Dr).filter(lr);for(const n in this.$$.slotted)this.appendChild(this.$$.slotted[n])}attributeChangedCallback(t,n,a){this[t]=a}disconnectedCallback(){wt(this.$$.on_disconnect)}$destroy(){No(this,1),this.$destroy=be}$on(t,n){const a=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return a.push(n),()=>{const l=a.indexOf(n);l!==-1&&a.splice(l,1)}}$set(t){this.$$set&&!yo(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});const Hn=[];function Ao(t,n){return{subscribe:Lt(t,n).subscribe}}function Lt(t,n=be){let a;const l=new Set;function d(v){if(vo(t,v)&&(t=v,a)){const p=!Hn.length;for(const w of l)w[1](),Hn.push(w,t);if(p){for(let w=0;w<Hn.length;w+=2)Hn[w][0](Hn[w+1]);Hn.length=0}}}function c(v){d(v(t))}function f(v,p=be){const w=[v,p];return l.add(w),l.size===1&&(a=n(d)||be),v(t),()=>{l.delete(w),l.size===0&&(a(),a=null)}}return{set:d,update:c,subscribe:f}}function Co(t,n,a){const l=!Array.isArray(t),d=l?[t]:t,c=n.length<2;return Ao(a,f=>{let v=!1;const p=[];let w=0,O=be;const b=()=>{if(w)return;O();const L=n(l?p[0]:p,f);c?f(L):O=lr(L)?L:be},k=d.map((L,Q)=>ra(L,H=>{p[Q]=H,w&=~(1<<Q),v&&b()},()=>{w|=1<<Q}));return v=!0,b(),function(){wt(k),O()}})}function ga(t){return Object.prototype.toString.call(t)==="[object Date]"}function Lr(t,n,a,l){if(typeof a=="number"||ga(a)){const d=l-a,c=(a-n)/(t.dt||1/60),f=t.opts.stiffness*d,v=t.opts.damping*c,p=(f-v)*t.inv_mass,w=(c+p)*t.dt;return Math.abs(w)<t.opts.precision&&Math.abs(d)<t.opts.precision?l:(t.settled=!1,ga(a)?new Date(a.getTime()+w):a+w)}else{if(Array.isArray(a))return a.map((d,c)=>Lr(t,n[c],a[c],l[c]));if(typeof a=="object"){const d={};for(const c in a)d[c]=Lr(t,n[c],a[c],l[c]);return d}else throw new Error(`Cannot spring ${typeof a} values`)}}function Lo(t,n={}){const a=Lt(t),{stiffness:l=.15,damping:d=.8,precision:c=.01}=n;let f,v,p,w=t,O=t,b=1,k=0,L=!1;function Q(C,F={}){O=C;const fe=p={};if(t==null||F.hard||H.stiffness>=1&&H.damping>=1)return L=!0,f=oa(),w=C,a.set(t=O),Promise.resolve();if(F.soft){const pe=F.soft===!0?.5:+F.soft;k=1/(pe*60),b=0}return v||(f=oa(),L=!1,v=go(pe=>{if(L)return L=!1,v=null,!1;b=Math.min(b+k,1);const q={inv_mass:b,opts:H,settled:!0,dt:(pe-f)*60/1e3},oe=Lr(q,w,t,O);return f=pe,w=t,a.set(t=oe),q.settled&&(v=null),!q.settled})),new Promise(pe=>{v.promise.then(()=>{fe===p&&pe()})})}const H={set:Q,update:(C,F)=>Q(C(O,t),F),subscribe:a.subscribe,stiffness:l,damping:d,precision:c};return H}function Ro(){return Lt({})}const Rr=Ro();var Fo=Object.defineProperty,xo=Object.defineProperties,Po=Object.getOwnPropertyDescriptors,pa=Object.getOwnPropertySymbols,zo=Object.prototype.hasOwnProperty,Ho=Object.prototype.propertyIsEnumerable,_a=(t,n,a)=>n in t?Fo(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a,Vo=(t,n)=>{for(var a in n||(n={}))zo.call(n,a)&&_a(t,a,n[a]);if(pa)for(var a of pa(n))Ho.call(n,a)&&_a(t,a,n[a]);return t},Uo=(t,n)=>xo(t,Po(n));async function lt(t){var n;if(!t.ok){const a=await t.json().then(c=>c),l=((n=a==null?void 0:a.response)==null?void 0:n.error)||(a==null?void 0:a.message),d=new Error(l);return d.name=a.name,Promise.reject({message:d,statusCode:t.status})}return t.json()}function ut(t={component_id:""}){return{method:t.method||"GET",headers:{Accept:"application/json","Content-Type":"application/json","X-Component-Id":t.component_id||"","X-Access-Token":t.access_token||""},body:t.body?JSON.stringify(t.body):void 0}}function Vt(t,n){throw console.error(n),Rr.update(a=>Uo(Vo({},a),{[t]:n})),n}const ba={"001":"","002":"ireland-","003":"canada-"};function dt(t){let n="";if(t.substring(3,4)==="-"){const l=t.substring(0,3);typeof ba[l]!="undefined"&&(n=ba[l])}return`https://${n}web-components.nylas.com/middleware`}function Vn(t){}const Wo=async t=>Promise.all(t.calendarIDs.map(n=>fetch(`${dt(t.component_id||"")}/agenda/events?calendar_id=${n}&starts_after=${t.starts_after-1}&ends_before=${t.ends_before}&expand_recurring=true`,ut({component_id:t.component_id,access_token:t.access_token})).then(a=>lt(a)).then(a=>a.response))).then(n=>n.flat()).catch(n=>Vt(t.component_id||"unknown",n)),jo=async t=>t.calendarIDs.length?Promise.allSettled(t.calendarIDs.map(n=>fetch(`${dt(t.component_id||"")}/calendars/${n}`,ut({component_id:t.component_id,access_token:t.access_token})).then(a=>lt(a)).then(a=>a.response))).then(n=>n.filter(l=>l.status==="fulfilled").map(l=>l.value).flat()).catch(n=>Vt(t.component_id||"unknown",n)):fetch(`${dt(t.component_id||"")}/calendars`,ut({component_id:t.component_id,access_token:t.access_token})).then(n=>lt(n)).then(n=>n.response);async function wa(t,n){return fetch(`${dt(n.component_id||"")}/agenda/events`,ut({method:"POST",component_id:n.component_id,access_token:n.access_token,body:t})).then(a=>lt(a)).then(a=>a.response)}var Zo=Object.defineProperty,Go=Object.defineProperties,Bo=Object.getOwnPropertyDescriptors,Ta=Object.getOwnPropertySymbols,Yo=Object.prototype.hasOwnProperty,Jo=Object.prototype.propertyIsEnumerable,Sa=(t,n,a)=>n in t?Zo(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a,Oa=(t,n)=>{for(var a in n||(n={}))Yo.call(n,a)&&Sa(t,a,n[a]);if(Ta)for(var a of Ta(n))Jo.call(n,a)&&Sa(t,a,n[a]);return t},ka=(t,n)=>Go(t,Bo(n));const Ea=(t,n,a)=>{if(t.thread_ids){const d=t.thread_ids.slice(a,a+n);return Promise.all(d.map(async c=>{const f=`${dt(t.component_id)}/threads/${c}?view=expanded`;return await fetch(f,ut(t)).then(v=>lt(v)).then(v=>v.response).then(v=>ka(Oa({},v),{messages:v.messages.filter(p=>p.from.length!==0||p.to.length!==0)})).catch(v=>Vt(t.component_id,v))}))}let l=`${dt(t.component_id)}/threads?view=expanded&not_in=trash&limit=${n}&offset=${a}`;return t.query&&Object.entries(t.query).forEach(d=>l=l.concat(`&${d[0]}=${d[1]}`)),fetch(l,ut(t)).then(d=>lt(d)).then(d=>d.response).then(d=>d.map(c=>ka(Oa({},c),{messages:c.messages.filter(f=>f.from.length!==0||f.to.length!==0)}))).catch(d=>Vt(t.component_id,d))};function Da(t){let n=`${dt(t.component_id)}/threads?view=expanded&not_in=trash&view=count`;return t.query&&Object.entries(t.query).forEach(a=>n=n.concat(`&${a[0]}=${a[1]}`)),t.keywordToSearch&&(n+=`&q=${t.keywordToSearch}`),fetch(n,ut(t)).then(a=>lt(a)).then(a=>a.response.count)}const qo=t=>{const n=`${dt(t.component_id)}/threads/search?q=${t.keywordToSearch}&view=expanded&limit=${t.query.limit}&offset=${t.query.offset}`;return fetch(n,ut(t)).then(async a=>lt(a)).then(a=>a.response).catch(a=>Vt(t.component_id,a))},Qo=(t,n)=>fetch(`${dt(t.component_id)}/threads/${n.id}`,ut({method:"PUT",component_id:t.component_id,access_token:t.access_token,body:{unread:n.unread,starred:n.starred,folder_id:n.folder_id,label_ids:n.label_ids}})).then(a=>lt(a)).then(a=>a.response).catch(a=>Vt(t.component_id,a)),Xo=async(t,n)=>await fetch(`${dt(t)}/manifest`,ut({access_token:n,component_id:t})).then(lt).then(a=>a.component.theming).catch(a=>Vt(t,a));var Ko=Object.defineProperty,Ia=Object.getOwnPropertySymbols,$o=Object.prototype.hasOwnProperty,es=Object.prototype.propertyIsEnumerable,Na=(t,n,a)=>n in t?Ko(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a,Ma=(t,n)=>{for(var a in n||(n={}))$o.call(n,a)&&Na(t,a,n[a]);if(Ia)for(var a of Ia(n))es.call(n,a)&&Na(t,a,n[a]);return t};const ts=async t=>fetch(`${dt(t.component_id)}/calendars/availability`,ut({method:"POST",component_id:t.component_id,access_token:t.access_token,body:t.body})).then(async n=>{const a=await lt(n);return a.response.time_slots=a.response.time_slots.map(l=>(l.start_time=l.start||0,l.end_time=l.end||0,delete l.start,delete l.end,l)),a.response}).catch(n=>Vt(t.component_id,n)),ns=async t=>fetch(`${dt(t.component_id)}/calendars/availability/consecutive`,ut({method:"POST",component_id:t.component_id,access_token:t.access_token,body:t.body})).then(async n=>{var a;const d=((a=(await lt(n)).response)==null?void 0:a.map(v=>(v=v.map(p=>(p.start_time=new Date(p.start_time*1e3),p.end_time=new Date(p.end_time*1e3),p)),v)))||[],c=rs(d,t.body.events);return as(c)}).catch(n=>Vt(t.component_id,n));function rs(t,n){return t.map(a=>a.map(l=>Ma(Ma({},l),n.find(d=>d.participantEmails.length===l.emails.length&&d.participantEmails.every(c=>l.emails.includes(c))))))}function as(t){const n=new Set;return t.filter(a=>{const l=`${a[0].start_time}_${a[a.length-1].end_time}`;return n.has(l)?!1:(n.add(l),!0)})}var is=Object.defineProperty,Aa=Object.getOwnPropertySymbols,os=Object.prototype.hasOwnProperty,ss=Object.prototype.propertyIsEnumerable,Ca=(t,n,a)=>n in t?is(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a,ls=(t,n)=>{for(var a in n||(n={}))os.call(n,a)&&Ca(t,a,n[a]);if(Aa)for(var a of Aa(n))ss.call(n,a)&&Ca(t,a,n[a]);return t};function us(){const t=(a,l)=>{var d,c;const f=JSON.parse(l),v=ls({},f);if(delete v.forceReload,l=JSON.stringify(v),!(!f.component_id||!((d=f==null?void 0:f.body)==null?void 0:d.start_time)||!((c=f==null?void 0:f.body)==null?void 0:c.end_time))){if(!a[l]||f.forceReload){const p=ts(f);n.update(w=>(w[l]=p,w)),a[l]=p}return a[l]}},n=Lt(new Proxy({},{get:t}));return n}us();function ds(){const t=(a,l)=>{var d,c;const f=JSON.parse(l);if(!(!f.component_id||!((d=f==null?void 0:f.body)==null?void 0:d.start_time)||!((c=f==null?void 0:f.body)==null?void 0:c.end_time))){if(!a[l]){const v=ns(f);n.update(p=>(p[l]=v,p)),a[l]=v}return a[l]}},n=Lt(new Proxy({},{get:t}));return n}ds();var cs=Object.defineProperty,La=Object.getOwnPropertySymbols,fs=Object.prototype.hasOwnProperty,ms=Object.prototype.propertyIsEnumerable,Ra=(t,n,a)=>n in t?cs(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a,hs=(t,n)=>{for(var a in n||(n={}))fs.call(n,a)&&Ra(t,a,n[a]);if(La)for(var a of La(n))ms.call(n,a)&&Ra(t,a,n[a]);return t};function vs(){const{subscribe:t,update:n,set:a}=Lt({});let l={};return{subscribe:t,getCalendars:async d=>{const c=JSON.stringify(d);return!l[c]&&(d.component_id||d.access_token)&&(l[c]=jo(d),n(f=>(f[c]=l[c],hs({},f)))),await l[c]},reset:()=>{l={},a({})}}}const ys=vs();var gs=Object.defineProperty,Fa=Object.getOwnPropertySymbols,ps=Object.prototype.hasOwnProperty,_s=Object.prototype.propertyIsEnumerable,xa=(t,n,a)=>n in t?gs(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a,Pa=(t,n)=>{for(var a in n||(n={}))ps.call(n,a)&&xa(t,a,n[a]);if(Fa)for(var a of Fa(n))_s.call(n,a)&&xa(t,a,n[a]);return t};function bs(){const{subscribe:t,update:n,set:a}=Lt({});let l={};const d=Lt(!0);return{loadingEvents:d,subscribe:t,getEvents:async c=>{if(Array.isArray(c.calendarIDs)&&c.calendarIDs.length>0){d.set(!0);const f=JSON.stringify(c);!l[f]&&(c.component_id||c.access_token)&&(l[f]=Wo(c),n(p=>(p[f]=l[f],Pa({},p))));const v=await l[f];return d.set(!1),v}},createEvent:async(c,f)=>{const v=JSON.stringify(f);await l[v]?l[v]=Promise.all([l[v],wa(c,f)]).then(w=>w.flat()):l[v]=wa(c,f).then(w=>[w]),n(w=>(w[v]=l[v],Pa({},w)))},reset:()=>{l={},a({})}}}const er=bs();var ws=Object.defineProperty,za=Object.getOwnPropertySymbols,Ts=Object.prototype.hasOwnProperty,Ss=Object.prototype.propertyIsEnumerable,Ha=(t,n,a)=>n in t?ws(t,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[n]=a,fn=(t,n)=>{for(var a in n||(n={}))Ts.call(n,a)&&Ha(t,a,n[a]);if(za)for(var a of za(n))Ss.call(n,a)&&Ha(t,a,n[a]);return t};async function Va(t){const n=[];for(let a=0;a<t;a++)n.push({isLoaded:!1,threads:[]});return n}function Os(){const{subscribe:t,set:n,update:a}=Lt({});let l={},d;return{subscribe:t,set:n,getThreads:async(c,f,v,p=!1)=>{const w=JSON.stringify(c);if(!c.component_id&&!c.access_token)return[];if(d===void 0||p){const O=c.thread_ids?c.thread_ids.length:await Da(c).catch(Vn);O&&(d=O)}if(!Array.isArray(l[w])||p){const O=Math.ceil(d/v);l[w]=await Va(O)}if(typeof l[w][f]=="undefined")return[];if(!l[w][f].isLoaded){const O=await Ea(c,v,f*v).catch(Vn);O&&(l[w][f].threads=O,l[w][f].isLoaded=!0)}return a(O=>(O[w]=l[w],fn({},O))),l[w][f].threads},getNumberOfItems:async c=>{if(!c.component_id&&!c.access_token)return 0;if(typeof d=="undefined"){const f=await Da(c).catch(Vn);f&&(d=f)}return d},getThreadsWithSearchKeyword:async(c,f=!1)=>{if(!c.component_id&&!c.access_token)return[];const v=JSON.stringify(c);if((!Array.isArray(l[v])||f)&&(l[v]=await Va(1)),!l[v][0].isLoaded||f){const p=await qo(c).catch(Vn);p&&(l[v][0].threads=p,l[v][0].isLoaded=!0)}return a(p=>(p[v]=l[v],fn({},p))),l[v][0].threads},updateThread:async(c,f,v,p,w)=>{const O=await Qo(c,v).catch(Vn);if(!l[f][p].isLoaded){const b=await Ea(JSON.parse(f),w,p*w).catch(Vn);b&&(l[f][p].threads=b,l[f][p].isLoaded=!0)}return l[f][p].threads=l[f][p].threads.map(b=>(O&&b.id===O.id&&(b=Object.assign(b,O)),b)),a(b=>(b[f]=l[f],fn({},b))),l[f][p].threads},updateThreadSelection:(c,f,v)=>{const p=l[c][f].threads;if(v){const w=p.find(O=>O.id===v);w&&(w.selected=!w.selected)}else{const w=p.some(O=>O.selected);for(const O of p)O.selected=!w}return a(w=>(w[c]=l[c],fn({},w))),l[c][f].threads},reset:()=>{l={},n({})},hydrateMessageInThread:(c,f,v)=>{var p,w,O;const b=JSON.stringify(f),k=(w=(p=l[b][v])==null?void 0:p.threads)==null?void 0:w.find(L=>L.id===c.thread_id);if(k){const L=(O=k.messages)==null?void 0:O.find(Q=>Q.id===c.id);L?(L.body=c.body,a(Q=>{if(c.thread_id){let H=Q[b][v].threads.find(C=>C.id===k.id);H&&(H=JSON.parse(JSON.stringify(k)))}return fn({},Q)})):a(Q=>{if(c.thread_id){let H=Q[b][v].threads.find(C=>C.id===k.id);if(H){const C=k.messages;C.push(c),k.messages=C,k.snippet=c.snippet,k.drafts=k.drafts.filter(F=>F.id!==c.id),H=JSON.parse(JSON.stringify(k))}}return fn({},Q)})}return l[b][v].threads},hydrateDraftInThread:(c,f,v)=>{var p,w,O;const b=JSON.stringify(f),k=(w=(p=l[b][v])==null?void 0:p.threads)==null?void 0:w.find(L=>L.id===c.thread_id);if(k){const L=(O=k.drafts)==null?void 0:O.find(Q=>Q.id===c.id);if(c.thread_id){if(L)Object.assign(L,c);else{const Q=k.drafts;Q.push(c),k.drafts=Q}a(Q=>{let H=Q[b][v].threads.find(C=>C.id===k.id);return H&&(H=JSON.parse(JSON.stringify(k))),fn({},Q)})}}return l[b][v].threads}}}const ks=Os();Co(ks,t=>{const n={};return Object.entries(t).forEach(([a,l])=>n[a]=l.map(d=>d.threads).flat()),n});function Es(){const t=(a,l)=>{const d=JSON.parse(l);if(!!d.component_id){if(!a[l]){const c=Xo(d.component_id,d.access_token);n.update(f=>(f[l]=c,f)),a[l]=c}return a[l]}},n=Lt(new Proxy({},{get:t}));return n}const Ds=Es();function Is(t){return(n,a)=>{t.dispatchEvent&&t.dispatchEvent(new CustomEvent(n,{detail:a,composed:!0}))}}function Fr(t,n,a){return new Proxy(t,{get:(l,d)=>d==="toString"||d==="toJSON"?()=>JSON.stringify(l):Reflect.get(l,d)!==void 0?Ua(Reflect.get(l,d),a[d]):n&&d in n?Ua(n[d],a[d]):a[d],ownKeys:l=>{const d=new Set([...Reflect.ownKeys(l),...Object.keys(n),...Object.keys(a)]);return Array.from(d)},getOwnPropertyDescriptor:(l,d)=>{var c,f;let v=Reflect.getOwnPropertyDescriptor(l,d);return v||(v=(f=(c=n&&Object.getOwnPropertyDescriptor(n,d))!=null?c:a&&Object.getOwnPropertyDescriptor(a,d))!=null?f:{configurable:!0,enumerable:!0,writable:!0},Reflect.defineProperty(l,d,v)),v}})}function Ua(t,n){if(t){if(typeof n=="boolean")return Ns(t);if(typeof n=="number")return Number(t);if(n instanceof Date)return new Date(t)}return t===void 0?n!=null?n:null:t}function Ns(t){return[!0,"true","1"].includes(t)}function Wa(t){let n,a,l,d,c,f;function v(O,b){if(O[2]==="HostDomainNotAllowedError")return As;if(O[2]==="IncompatibleProperties")return Ms}let p=v(t),w=p&&p(t);return{c(){var O,b;n=J("div"),w&&w.c(),a=we(),l=J("span"),l.textContent="Debug info:",d=we(),c=J("textarea"),z(l,"class","details"),z(c,"class","details"),c.readOnly=!0,c.value=f=`
      `+t[2]+": "+t[0]+`
      `+((b=(O=t[1].message)==null?void 0:O.message)!=null?b:"")+`
    `,z(n,"class","message-container")},m(O,b){G(O,n,b),w&&w.m(n,null),j(n,a),j(n,l),j(n,d),j(n,c)},p(O,b){var k,L;p===(p=v(O))&&w?w.p(O,b):(w&&w.d(1),w=p&&p(O),w&&(w.c(),w.m(n,a))),b&7&&f!==(f=`
      `+O[2]+": "+O[0]+`
      `+((L=(k=O[1].message)==null?void 0:k.message)!=null?L:"")+`
    `)&&(c.value=f)},d(O){O&&B(n),w&&w.d()}}}function Ms(t){let n;return{c(){n=J("h3"),n.textContent="Your component properties do not work with each other."},m(a,l){G(a,n,l)},p:be,d(a){a&&B(n)}}}function As(t){let n,a,l,d,c,f;return{c(){n=J("h3"),a=Se(`You are trying to access this component from\xA0
        `),l=J("code"),l.textContent=`${window.location.hostname}`,d=Se(`. The component's settings do not
        allow access from this domain.`),c=we(),f=J("h4"),f.innerHTML=`The list of allowed domains can be modified in your\xA0
        <a href="https://dashboard.nylas.com">Dashboard</a>.`},m(v,p){G(v,n,p),j(n,a),j(n,l),j(n,d),G(v,c,p),G(v,f,p)},p:be,d(v){v&&B(n),v&&B(c),v&&B(f)}}}function Cs(t){let n,a=t[2]&&t[3]&&Wa(t);return{c(){a&&a.c(),n=zn(),this.c=be},m(l,d){a&&a.m(l,d),G(l,n,d)},p(l,[d]){l[2]&&l[3]?a?a.p(l,d):(a=Wa(l),a.c(),a.m(n.parentNode,n)):a&&(a.d(1),a=null)},i:be,o:be,d(l){a&&a.d(l),l&&B(n)}}}function Ls(t,n,a){let l;Rn(t,Rr,k=>a(8,l=k));var d,c,f,v;let{id:p}=n,w,O;const b=window.location.href.includes("localhost")||window.location.href.includes("127.0.0.1");return t.$$set=k=>{"id"in k&&a(0,p=k.id)},t.$$.update=()=>{t.$$.dirty&499&&(a(1,w=a(4,d=l[p])!==null&&d!==void 0?d:{name:""}),a(2,O=a(7,v=a(5,c=w.name)!==null&&c!==void 0?c:a(6,f=w.message)===null||f===void 0?void 0:f.name)!==null&&v!==void 0?v:""))},[p,w,O,b,d,c,f,v,l]}class Rs extends Cr{constructor(n){super();this.shadowRoot.innerHTML=`<style>.message-container{background:#fff6f6;border-radius:5px;box-shadow:0 0 0 1px #aa92a0 inset, 0 0 0 0 transparent;color:#9f3a38;font-size:1.25rem;padding:10px;margin:0 auto;transition:opacity 500ms ease, color 500ms ease,
      background-color 500ms ease, box-shadow 500ms ease,
      -webkit-box-shadow 500ms ease}.message-container *:focus{outline:5px auto Highlight;outline:5px auto -webkit-focus-ring-color}.details{color:#494949;font-size:0.75rem;width:100%}</style>`,ya(this,{target:this.shadowRoot,props:da(this.attributes),customElement:!0},Ls,Cs,na,{id:0},null),n&&(n.target&&G(n.target,this,n.anchor),n.props&&(this.$set(n.props),de()))}static get observedAttributes(){return["id"]}get id(){return this.$$.ctx[0]}set id(n){this.$$set({id:n}),de()}}customElements.define("nylas-error",Rs);var Fs=typeof globalThis!="undefined"?globalThis:typeof window!="undefined"?window:typeof global!="undefined"?global:typeof self!="undefined"?self:{};function ja(t,n,a){return a={path:n,exports:{},require:function(l,d){return xs(l,d==null?a.path:d)}},t(a,a.exports),a.exports}function xs(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}var Ut=ja(function(t,n){Object.defineProperty(n,"__esModule",{value:!0});function a(r,s){for(var i=0;i<s.length;i++){var e=s[i];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(r,e.key,e)}}function l(r,s,i){return s&&a(r.prototype,s),i&&a(r,i),r}function d(){return d=Object.assign||function(r){for(var s=1;s<arguments.length;s++){var i=arguments[s];for(var e in i)Object.prototype.hasOwnProperty.call(i,e)&&(r[e]=i[e])}return r},d.apply(this,arguments)}function c(r,s){r.prototype=Object.create(s.prototype),r.prototype.constructor=r,v(r,s)}function f(r){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(i){return i.__proto__||Object.getPrototypeOf(i)},f(r)}function v(r,s){return v=Object.setPrototypeOf||function(e,o){return e.__proto__=o,e},v(r,s)}function p(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(r){return!1}}function w(r,s,i){return p()?w=Reflect.construct:w=function(o,u,m){var h=[null];h.push.apply(h,u);var g=Function.bind.apply(o,h),T=new g;return m&&v(T,m.prototype),T},w.apply(null,arguments)}function O(r){return Function.toString.call(r).indexOf("[native code]")!==-1}function b(r){var s=typeof Map=="function"?new Map:void 0;return b=function(e){if(e===null||!O(e))return e;if(typeof e!="function")throw new TypeError("Super expression must either be null or a function");if(typeof s!="undefined"){if(s.has(e))return s.get(e);s.set(e,o)}function o(){return w(e,arguments,f(this).constructor)}return o.prototype=Object.create(e.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),v(o,e)},b(r)}function k(r,s){if(r==null)return{};var i={},e=Object.keys(r),o,u;for(u=0;u<e.length;u++)o=e[u],!(s.indexOf(o)>=0)&&(i[o]=r[o]);return i}function L(r,s){if(!!r){if(typeof r=="string")return Q(r,s);var i=Object.prototype.toString.call(r).slice(8,-1);if(i==="Object"&&r.constructor&&(i=r.constructor.name),i==="Map"||i==="Set")return Array.from(r);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Q(r,s)}}function Q(r,s){(s==null||s>r.length)&&(s=r.length);for(var i=0,e=new Array(s);i<s;i++)e[i]=r[i];return e}function H(r,s){var i=typeof Symbol!="undefined"&&r[Symbol.iterator]||r["@@iterator"];if(i)return(i=i.call(r)).next.bind(i);if(Array.isArray(r)||(i=L(r))||s&&r&&typeof r.length=="number"){i&&(r=i);var e=0;return function(){return e>=r.length?{done:!0}:{done:!1,value:r[e++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var C=function(r){c(s,r);function s(){return r.apply(this,arguments)||this}return s}(b(Error)),F=function(r){c(s,r);function s(i){return r.call(this,"Invalid DateTime: "+i.toMessage())||this}return s}(C),fe=function(r){c(s,r);function s(i){return r.call(this,"Invalid Interval: "+i.toMessage())||this}return s}(C),pe=function(r){c(s,r);function s(i){return r.call(this,"Invalid Duration: "+i.toMessage())||this}return s}(C),q=function(r){c(s,r);function s(){return r.apply(this,arguments)||this}return s}(C),oe=function(r){c(s,r);function s(i){return r.call(this,"Invalid unit "+i)||this}return s}(C),ae=function(r){c(s,r);function s(){return r.apply(this,arguments)||this}return s}(C),Oe=function(r){c(s,r);function s(){return r.call(this,"Zone is an abstract class")||this}return s}(C),E="numeric",ee="short",A="long",me={year:E,month:E,day:E},$e={year:E,month:ee,day:E},Wt={year:E,month:ee,day:E,weekday:ee},jt={year:E,month:A,day:E},ct={year:E,month:A,day:E,weekday:A},mn={hour:E,minute:E},Zt={hour:E,minute:E,second:E},hn={hour:E,minute:E,second:E,timeZoneName:ee},en={hour:E,minute:E,second:E,timeZoneName:A},Rt={hour:E,minute:E,hourCycle:"h23"},Gt={hour:E,minute:E,second:E,hourCycle:"h23"},tn={hour:E,minute:E,second:E,hourCycle:"h23",timeZoneName:ee},Ft={hour:E,minute:E,second:E,hourCycle:"h23",timeZoneName:A},vn={year:E,month:E,day:E,hour:E,minute:E},yn={year:E,month:E,day:E,hour:E,minute:E,second:E},gn={year:E,month:ee,day:E,hour:E,minute:E},pn={year:E,month:ee,day:E,hour:E,minute:E,second:E},Un={year:E,month:ee,day:E,weekday:ee,hour:E,minute:E},_n={year:E,month:A,day:E,hour:E,minute:E,timeZoneName:ee},bn={year:E,month:A,day:E,hour:E,minute:E,second:E,timeZoneName:ee},Tt={year:E,month:A,day:E,weekday:A,hour:E,minute:E,timeZoneName:A},Ye={year:E,month:A,day:E,weekday:A,hour:E,minute:E,second:E,timeZoneName:A};function ie(r){return typeof r=="undefined"}function V(r){return typeof r=="number"}function St(r){return typeof r=="number"&&r%1==0}function Wn(r){return typeof r=="string"}function R(r){return Object.prototype.toString.call(r)==="[object Date]"}function P(){try{return typeof Intl!="undefined"&&!!Intl.RelativeTimeFormat}catch(r){return!1}}function te(r){return Array.isArray(r)?r:[r]}function U(r,s,i){if(r.length!==0)return r.reduce(function(e,o){var u=[s(o),o];return e&&i(e[0],u[0])===e[0]?e:u},null)[1]}function X(r,s){return s.reduce(function(i,e){return i[e]=r[e],i},{})}function he(r,s){return Object.prototype.hasOwnProperty.call(r,s)}function ge(r,s,i){return St(r)&&r>=s&&r<=i}function Fe(r,s){return r-s*Math.floor(r/s)}function Te(r,s){s===void 0&&(s=2);var i=r<0,e;return i?e="-"+(""+-r).padStart(s,"0"):e=(""+r).padStart(s,"0"),e}function _e(r){if(!(ie(r)||r===null||r===""))return parseInt(r,10)}function ft(r){if(!(ie(r)||r===null||r===""))return parseFloat(r)}function wn(r){if(!(ie(r)||r===null||r==="")){var s=parseFloat("0."+r)*1e3;return Math.floor(s)}}function Ot(r,s,i){i===void 0&&(i=!1);var e=Math.pow(10,s),o=i?Math.trunc:Math.round;return o(r*e)/e}function mt(r){return r%4==0&&(r%100!=0||r%400==0)}function De(r){return mt(r)?366:365}function xt(r,s){var i=Fe(s-1,12)+1,e=r+(s-i)/12;return i===2?mt(e)?29:28:[31,null,31,30,31,30,31,31,30,31,30,31][i-1]}function Bt(r){var s=Date.UTC(r.year,r.month-1,r.day,r.hour,r.minute,r.second,r.millisecond);return r.year<100&&r.year>=0&&(s=new Date(s),s.setUTCFullYear(s.getUTCFullYear()-1900)),+s}function nn(r){var s=(r+Math.floor(r/4)-Math.floor(r/100)+Math.floor(r/400))%7,i=r-1,e=(i+Math.floor(i/4)-Math.floor(i/100)+Math.floor(i/400))%7;return s===4||e===3?53:52}function et(r){return r>99?r:r>60?1900+r:2e3+r}function ot(r,s,i,e){e===void 0&&(e=null);var o=new Date(r),u={hourCycle:"h23",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"};e&&(u.timeZone=e);var m=d({timeZoneName:s},u),h=new Intl.DateTimeFormat(i,m).formatToParts(o).find(function(g){return g.type.toLowerCase()==="timezonename"});return h?h.value:null}function je(r,s){var i=parseInt(r,10);Number.isNaN(i)&&(i=0);var e=parseInt(s,10)||0,o=i<0||Object.is(i,-0)?-e:e;return i*60+o}function ht(r){var s=Number(r);if(typeof r=="boolean"||r===""||Number.isNaN(s))throw new ae("Invalid unit value "+r);return s}function vt(r,s){var i={};for(var e in r)if(he(r,e)){var o=r[e];if(o==null)continue;i[s(e)]=ht(o)}return i}function xe(r,s){var i=Math.trunc(Math.abs(r/60)),e=Math.trunc(Math.abs(r%60)),o=r>=0?"+":"-";switch(s){case"short":return""+o+Te(i,2)+":"+Te(e,2);case"narrow":return""+o+i+(e>0?":"+e:"");case"techie":return""+o+Te(i,2)+Te(e,2);default:throw new RangeError("Value format "+s+" is out of range for property format")}}function yt(r){return X(r,["hour","minute","second","millisecond"])}var kt=/[A-Za-z_+-]{1,256}(:?\/[A-Za-z0-9_+-]{1,256}(\/[A-Za-z0-9_+-]{1,256})?)?/,Tn=["January","February","March","April","May","June","July","August","September","October","November","December"],Ie=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],Et=["J","F","M","A","M","J","J","A","S","O","N","D"];function Je(r){switch(r){case"narrow":return[].concat(Et);case"short":return[].concat(Ie);case"long":return[].concat(Tn);case"numeric":return["1","2","3","4","5","6","7","8","9","10","11","12"];case"2-digit":return["01","02","03","04","05","06","07","08","09","10","11","12"];default:return null}}var Yt=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],Jt=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"],jn=["M","T","W","T","F","S","S"];function Ve(r){switch(r){case"narrow":return[].concat(jn);case"short":return[].concat(Jt);case"long":return[].concat(Yt);case"numeric":return["1","2","3","4","5","6","7"];default:return null}}var tt=["AM","PM"],rn=["Before Christ","Anno Domini"],Sn=["BC","AD"],ke=["B","A"];function an(r){switch(r){case"narrow":return[].concat(ke);case"short":return[].concat(Sn);case"long":return[].concat(rn);default:return null}}function Ne(r){return tt[r.hour<12?0:1]}function Pt(r,s){return Ve(s)[r.weekday-1]}function se(r,s){return Je(s)[r.month-1]}function Me(r,s){return an(s)[r.year<0?0:1]}function On(r,s,i,e){i===void 0&&(i="always"),e===void 0&&(e=!1);var o={years:["year","yr."],quarters:["quarter","qtr."],months:["month","mo."],weeks:["week","wk."],days:["day","day","days"],hours:["hour","hr."],minutes:["minute","min."],seconds:["second","sec."]},u=["hours","minutes","seconds"].indexOf(r)===-1;if(i==="auto"&&u){var m=r==="days";switch(s){case 1:return m?"tomorrow":"next "+o[r][0];case-1:return m?"yesterday":"last "+o[r][0];case 0:return m?"today":"this "+o[r][0]}}var h=Object.is(s,-0)||s<0,g=Math.abs(s),T=g===1,N=o[r],D=e?T?N[1]:N[2]||N[1]:T?o[r][0]:r;return h?g+" "+D+" ago":"in "+g+" "+D}function kn(r,s){for(var i="",e=H(r),o;!(o=e()).done;){var u=o.value;u.literal?i+=u.val:i+=s(u.val)}return i}var En={D:me,DD:$e,DDD:jt,DDDD:ct,t:mn,tt:Zt,ttt:hn,tttt:en,T:Rt,TT:Gt,TTT:tn,TTTT:Ft,f:vn,ff:gn,fff:_n,ffff:Tt,F:yn,FF:pn,FFF:bn,FFFF:Ye},Ke=function(){r.create=function(e,o){return o===void 0&&(o={}),new r(e,o)},r.parseFormat=function(e){for(var o=null,u="",m=!1,h=[],g=0;g<e.length;g++){var T=e.charAt(g);T==="'"?(u.length>0&&h.push({literal:m,val:u}),o=null,u="",m=!m):m||T===o?u+=T:(u.length>0&&h.push({literal:!1,val:u}),u=T,o=T)}return u.length>0&&h.push({literal:m,val:u}),h},r.macroTokenToFormatOpts=function(e){return En[e]};function r(i,e){this.opts=e,this.loc=i,this.systemLoc=null}var s=r.prototype;return s.formatWithSystemDefault=function(e,o){this.systemLoc===null&&(this.systemLoc=this.loc.redefaultToSystem());var u=this.systemLoc.dtFormatter(e,d({},this.opts,o));return u.format()},s.formatDateTime=function(e,o){o===void 0&&(o={});var u=this.loc.dtFormatter(e,d({},this.opts,o));return u.format()},s.formatDateTimeParts=function(e,o){o===void 0&&(o={});var u=this.loc.dtFormatter(e,d({},this.opts,o));return u.formatToParts()},s.resolvedOptions=function(e,o){o===void 0&&(o={});var u=this.loc.dtFormatter(e,d({},this.opts,o));return u.resolvedOptions()},s.num=function(e,o){if(o===void 0&&(o=0),this.opts.forceSimple)return Te(e,o);var u=d({},this.opts);return o>0&&(u.padTo=o),this.loc.numberFormatter(u).format(e)},s.formatDateTimeFromString=function(e,o){var u=this,m=this.loc.listingMode()==="en",h=this.loc.outputCalendar&&this.loc.outputCalendar!=="gregory",g=function(K,Ge){return u.loc.extract(e,K,Ge)},T=function(K){return e.isOffsetFixed&&e.offset===0&&K.allowZ?"Z":e.isValid?e.zone.formatOffset(e.ts,K.format):""},N=function(){return m?Ne(e):g({hour:"numeric",hourCycle:"h12"},"dayperiod")},D=function(K,Ge){return m?se(e,K):g(Ge?{month:K}:{month:K,day:"numeric"},"month")},I=function(K,Ge){return m?Pt(e,K):g(Ge?{weekday:K}:{weekday:K,month:"long",day:"numeric"},"weekday")},Z=function(K){var Ge=r.macroTokenToFormatOpts(K);return Ge?u.formatWithSystemDefault(e,Ge):K},$=function(K){return m?Me(e,K):g({era:K},"era")},ce=function(K){switch(K){case"S":return u.num(e.millisecond);case"u":case"SSS":return u.num(e.millisecond,3);case"s":return u.num(e.second);case"ss":return u.num(e.second,2);case"uu":return u.num(Math.floor(e.millisecond/10),2);case"uuu":return u.num(Math.floor(e.millisecond/100));case"m":return u.num(e.minute);case"mm":return u.num(e.minute,2);case"h":return u.num(e.hour%12==0?12:e.hour%12);case"hh":return u.num(e.hour%12==0?12:e.hour%12,2);case"H":return u.num(e.hour);case"HH":return u.num(e.hour,2);case"Z":return T({format:"narrow",allowZ:u.opts.allowZ});case"ZZ":return T({format:"short",allowZ:u.opts.allowZ});case"ZZZ":return T({format:"techie",allowZ:u.opts.allowZ});case"ZZZZ":return e.zone.offsetName(e.ts,{format:"short",locale:u.loc.locale});case"ZZZZZ":return e.zone.offsetName(e.ts,{format:"long",locale:u.loc.locale});case"z":return e.zoneName;case"a":return N();case"d":return h?g({day:"numeric"},"day"):u.num(e.day);case"dd":return h?g({day:"2-digit"},"day"):u.num(e.day,2);case"c":return u.num(e.weekday);case"ccc":return I("short",!0);case"cccc":return I("long",!0);case"ccccc":return I("narrow",!0);case"E":return u.num(e.weekday);case"EEE":return I("short",!1);case"EEEE":return I("long",!1);case"EEEEE":return I("narrow",!1);case"L":return h?g({month:"numeric",day:"numeric"},"month"):u.num(e.month);case"LL":return h?g({month:"2-digit",day:"numeric"},"month"):u.num(e.month,2);case"LLL":return D("short",!0);case"LLLL":return D("long",!0);case"LLLLL":return D("narrow",!0);case"M":return h?g({month:"numeric"},"month"):u.num(e.month);case"MM":return h?g({month:"2-digit"},"month"):u.num(e.month,2);case"MMM":return D("short",!1);case"MMMM":return D("long",!1);case"MMMMM":return D("narrow",!1);case"y":return h?g({year:"numeric"},"year"):u.num(e.year);case"yy":return h?g({year:"2-digit"},"year"):u.num(e.year.toString().slice(-2),2);case"yyyy":return h?g({year:"numeric"},"year"):u.num(e.year,4);case"yyyyyy":return h?g({year:"numeric"},"year"):u.num(e.year,6);case"G":return $("short");case"GG":return $("long");case"GGGGG":return $("narrow");case"kk":return u.num(e.weekYear.toString().slice(-2),2);case"kkkk":return u.num(e.weekYear,4);case"W":return u.num(e.weekNumber);case"WW":return u.num(e.weekNumber,2);case"o":return u.num(e.ordinal);case"ooo":return u.num(e.ordinal,3);case"q":return u.num(e.quarter);case"qq":return u.num(e.quarter,2);case"X":return u.num(Math.floor(e.ts/1e3));case"x":return u.num(e.ts);default:return Z(K)}};return kn(r.parseFormat(o),ce)},s.formatDurationFromString=function(e,o){var u=this,m=function(I){switch(I[0]){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":return"hour";case"d":return"day";case"M":return"month";case"y":return"year";default:return null}},h=function(I){return function(Z){var $=m(Z);return $?u.num(I.get($),Z.length):Z}},g=r.parseFormat(o),T=g.reduce(function(D,I){var Z=I.literal,$=I.val;return Z?D:D.concat($)},[]),N=e.shiftTo.apply(e,T.map(m).filter(function(D){return D}));return kn(g,h(N))},r}(),Ce=function(){function r(i,e){this.reason=i,this.explanation=e}var s=r.prototype;return s.toMessage=function(){return this.explanation?this.reason+": "+this.explanation:this.reason},r}(),ne=function(){function r(){}var s=r.prototype;return s.offsetName=function(e,o){throw new Oe},s.formatOffset=function(e,o){throw new Oe},s.offset=function(e){throw new Oe},s.equals=function(e){throw new Oe},l(r,[{key:"type",get:function(){throw new Oe}},{key:"name",get:function(){throw new Oe}},{key:"isUniversal",get:function(){throw new Oe}},{key:"isValid",get:function(){throw new Oe}}]),r}(),qe=null,on=function(r){c(s,r);function s(){return r.apply(this,arguments)||this}var i=s.prototype;return i.offsetName=function(o,u){var m=u.format,h=u.locale;return ot(o,m,h)},i.formatOffset=function(o,u){return xe(this.offset(o),u)},i.offset=function(o){return-new Date(o).getTimezoneOffset()},i.equals=function(o){return o.type==="system"},l(s,[{key:"type",get:function(){return"system"}},{key:"name",get:function(){return new Intl.DateTimeFormat().resolvedOptions().timeZone}},{key:"isUniversal",get:function(){return!1}},{key:"isValid",get:function(){return!0}}],[{key:"instance",get:function(){return qe===null&&(qe=new s),qe}}]),s}(ne),Qe=RegExp("^"+kt.source+"$"),Dt={};function sn(r){return Dt[r]||(Dt[r]=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:r,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})),Dt[r]}var Dn={year:0,month:1,day:2,hour:3,minute:4,second:5};function In(r,s){var i=r.format(s).replace(/\u200E/g,""),e=/(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(i),o=e[1],u=e[2],m=e[3],h=e[4],g=e[5],T=e[6];return[m,o,u,h,g,T]}function qt(r,s){for(var i=r.formatToParts(s),e=[],o=0;o<i.length;o++){var u=i[o],m=u.type,h=u.value,g=Dn[m];ie(g)||(e[g]=parseInt(h,10))}return e}var st={},Ue=function(r){c(s,r),s.create=function(o){return st[o]||(st[o]=new s(o)),st[o]},s.resetCache=function(){st={},Dt={}},s.isValidSpecifier=function(o){return!!(o&&o.match(Qe))},s.isValidZone=function(o){if(!o)return!1;try{return new Intl.DateTimeFormat("en-US",{timeZone:o}).format(),!0}catch(u){return!1}};function s(e){var o;return o=r.call(this)||this,o.zoneName=e,o.valid=s.isValidZone(e),o}var i=s.prototype;return i.offsetName=function(o,u){var m=u.format,h=u.locale;return ot(o,m,h,this.name)},i.formatOffset=function(o,u){return xe(this.offset(o),u)},i.offset=function(o){var u=new Date(o);if(isNaN(u))return NaN;var m=sn(this.name),h=m.formatToParts?qt(m,u):In(m,u),g=h[0],T=h[1],N=h[2],D=h[3],I=h[4],Z=h[5],$=D===24?0:D,ce=Bt({year:g,month:T,day:N,hour:$,minute:I,second:Z,millisecond:0}),ue=+u,K=ue%1e3;return ue-=K>=0?K:1e3+K,(ce-ue)/(60*1e3)},i.equals=function(o){return o.type==="iana"&&o.name===this.name},l(s,[{key:"type",get:function(){return"iana"}},{key:"name",get:function(){return this.zoneName}},{key:"isUniversal",get:function(){return!1}},{key:"isValid",get:function(){return this.valid}}]),s}(ne),ln=null,Xe=function(r){c(s,r),s.instance=function(o){return o===0?s.utcInstance:new s(o)},s.parseSpecifier=function(o){if(o){var u=o.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);if(u)return new s(je(u[1],u[2]))}return null};function s(e){var o;return o=r.call(this)||this,o.fixed=e,o}var i=s.prototype;return i.offsetName=function(){return this.name},i.formatOffset=function(o,u){return xe(this.fixed,u)},i.offset=function(){return this.fixed},i.equals=function(o){return o.type==="fixed"&&o.fixed===this.fixed},l(s,[{key:"type",get:function(){return"fixed"}},{key:"name",get:function(){return this.fixed===0?"UTC":"UTC"+xe(this.fixed,"narrow")}},{key:"isUniversal",get:function(){return!0}},{key:"isValid",get:function(){return!0}}],[{key:"utcInstance",get:function(){return ln===null&&(ln=new s(0)),ln}}]),s}(ne),un=function(r){c(s,r);function s(e){var o;return o=r.call(this)||this,o.zoneName=e,o}var i=s.prototype;return i.offsetName=function(){return null},i.formatOffset=function(){return""},i.offset=function(){return NaN},i.equals=function(){return!1},l(s,[{key:"type",get:function(){return"invalid"}},{key:"name",get:function(){return this.zoneName}},{key:"isUniversal",get:function(){return!1}},{key:"isValid",get:function(){return!1}}]),s}(ne);function nt(r,s){if(ie(r)||r===null)return s;if(r instanceof ne)return r;if(Wn(r)){var i=r.toLowerCase();return i==="local"||i==="system"?s:i==="utc"||i==="gmt"?Xe.utcInstance:Ue.isValidSpecifier(i)?Ue.create(r):Xe.parseSpecifier(i)||new un(r)}else return V(r)?Xe.instance(r):typeof r=="object"&&r.offset&&typeof r.offset=="number"?r:new un(r)}var Nn=function(){return Date.now()},dn="system",y=null,S=null,Y=null,le,re=function(){function r(){}return r.resetCaches=function(){Ae.resetCache(),Ue.resetCache()},l(r,null,[{key:"now",get:function(){return Nn},set:function(i){Nn=i}},{key:"defaultZone",get:function(){return nt(dn,on.instance)},set:function(i){dn=i}},{key:"defaultLocale",get:function(){return y},set:function(i){y=i}},{key:"defaultNumberingSystem",get:function(){return S},set:function(i){S=i}},{key:"defaultOutputCalendar",get:function(){return Y},set:function(i){Y=i}},{key:"throwOnInvalid",get:function(){return le},set:function(i){le=i}}]),r}(),rt=["base"],gt=["padTo","floor"],pt={};function zt(r,s){s===void 0&&(s={});var i=JSON.stringify([r,s]),e=pt[i];return e||(e=new Intl.ListFormat(r,s),pt[i]=e),e}var Qt={};function at(r,s){s===void 0&&(s={});var i=JSON.stringify([r,s]),e=Qt[i];return e||(e=new Intl.DateTimeFormat(r,s),Qt[i]=e),e}var It={};function yr(r,s){s===void 0&&(s={});var i=JSON.stringify([r,s]),e=It[i];return e||(e=new Intl.NumberFormat(r,s),It[i]=e),e}var Zn={};function Gn(r,s){s===void 0&&(s={});var i=s;i.base;var e=k(i,rt),o=JSON.stringify([r,e]),u=Zn[o];return u||(u=new Intl.RelativeTimeFormat(r,s),Zn[o]=u),u}var Xt=null;function Vr(){return Xt||(Xt=new Intl.DateTimeFormat().resolvedOptions().locale,Xt)}function Nt(r){var s=r.indexOf("-u-");if(s===-1)return[r];var i,e=r.substring(0,s);try{i=at(r).resolvedOptions()}catch(h){i=at(e).resolvedOptions()}var o=i,u=o.numberingSystem,m=o.calendar;return[e,u,m]}function gr(r,s,i){return(i||s)&&(r+="-u",i&&(r+="-ca-"+i),s&&(r+="-nu-"+s)),r}function pr(r){for(var s=[],i=1;i<=12;i++){var e=Re.utc(2016,i,1);s.push(r(e))}return s}function _r(r){for(var s=[],i=1;i<=7;i++){var e=Re.utc(2016,11,13+i);s.push(r(e))}return s}function Bn(r,s,i,e,o){var u=r.listingMode(i);return u==="error"?null:u==="en"?e(s):o(s)}function Mn(r){return r.numberingSystem&&r.numberingSystem!=="latn"?!1:r.numberingSystem==="latn"||!r.locale||r.locale.startsWith("en")||new Intl.DateTimeFormat(r.intl).resolvedOptions().numberingSystem==="latn"}var Mt=function(){function r(i,e,o){this.padTo=o.padTo||0,this.floor=o.floor||!1,o.padTo,o.floor;var u=k(o,gt);if(!e||Object.keys(u).length>0){var m=d({useGrouping:!1},o);o.padTo>0&&(m.minimumIntegerDigits=o.padTo),this.inf=yr(i,m)}}var s=r.prototype;return s.format=function(e){if(this.inf){var o=this.floor?Math.floor(e):e;return this.inf.format(o)}else{var u=this.floor?Math.floor(e):Ot(e,3);return Te(u,this.padTo)}},r}(),br=function(){function r(i,e,o){this.opts=o;var u;if(i.zone.isUniversal){var m=-1*(i.offset/60),h=m>=0?"Etc/GMT+"+m:"Etc/GMT"+m;i.offset!==0&&Ue.create(h).valid?(u=h,this.dt=i):(u="UTC",o.timeZoneName?this.dt=i:this.dt=i.offset===0?i:Re.fromMillis(i.ts+i.offset*60*1e3))}else i.zone.type==="system"?this.dt=i:(this.dt=i,u=i.zone.name);var g=d({},this.opts);u&&(g.timeZone=u),this.dtf=at(e,g)}var s=r.prototype;return s.format=function(){return this.dtf.format(this.dt.toJSDate())},s.formatToParts=function(){return this.dtf.formatToParts(this.dt.toJSDate())},s.resolvedOptions=function(){return this.dtf.resolvedOptions()},r}(),wr=function(){function r(i,e,o){this.opts=d({style:"long"},o),!e&&P()&&(this.rtf=Gn(i,o))}var s=r.prototype;return s.format=function(e,o){return this.rtf?this.rtf.format(e,o):On(o,e,this.opts.numeric,this.opts.style!=="long")},s.formatToParts=function(e,o){return this.rtf?this.rtf.formatToParts(e,o):[]},r}(),Ae=function(){r.fromOpts=function(e){return r.create(e.locale,e.numberingSystem,e.outputCalendar,e.defaultToEN)},r.create=function(e,o,u,m){m===void 0&&(m=!1);var h=e||re.defaultLocale,g=h||(m?"en-US":Vr()),T=o||re.defaultNumberingSystem,N=u||re.defaultOutputCalendar;return new r(g,T,N,h)},r.resetCache=function(){Xt=null,Qt={},It={},Zn={}},r.fromObject=function(e){var o=e===void 0?{}:e,u=o.locale,m=o.numberingSystem,h=o.outputCalendar;return r.create(u,m,h)};function r(i,e,o,u){var m=Nt(i),h=m[0],g=m[1],T=m[2];this.locale=h,this.numberingSystem=e||g||null,this.outputCalendar=o||T||null,this.intl=gr(this.locale,this.numberingSystem,this.outputCalendar),this.weekdaysCache={format:{},standalone:{}},this.monthsCache={format:{},standalone:{}},this.meridiemCache=null,this.eraCache={},this.specifiedLocale=u,this.fastNumbersCached=null}var s=r.prototype;return s.listingMode=function(){var e=this.isEnglish(),o=(this.numberingSystem===null||this.numberingSystem==="latn")&&(this.outputCalendar===null||this.outputCalendar==="gregory");return e&&o?"en":"intl"},s.clone=function(e){return!e||Object.getOwnPropertyNames(e).length===0?this:r.create(e.locale||this.specifiedLocale,e.numberingSystem||this.numberingSystem,e.outputCalendar||this.outputCalendar,e.defaultToEN||!1)},s.redefaultToEN=function(e){return e===void 0&&(e={}),this.clone(d({},e,{defaultToEN:!0}))},s.redefaultToSystem=function(e){return e===void 0&&(e={}),this.clone(d({},e,{defaultToEN:!1}))},s.months=function(e,o,u){var m=this;return o===void 0&&(o=!1),u===void 0&&(u=!0),Bn(this,e,u,Je,function(){var h=o?{month:e,day:"numeric"}:{month:e},g=o?"format":"standalone";return m.monthsCache[g][e]||(m.monthsCache[g][e]=pr(function(T){return m.extract(T,h,"month")})),m.monthsCache[g][e]})},s.weekdays=function(e,o,u){var m=this;return o===void 0&&(o=!1),u===void 0&&(u=!0),Bn(this,e,u,Ve,function(){var h=o?{weekday:e,year:"numeric",month:"long",day:"numeric"}:{weekday:e},g=o?"format":"standalone";return m.weekdaysCache[g][e]||(m.weekdaysCache[g][e]=_r(function(T){return m.extract(T,h,"weekday")})),m.weekdaysCache[g][e]})},s.meridiems=function(e){var o=this;return e===void 0&&(e=!0),Bn(this,void 0,e,function(){return tt},function(){if(!o.meridiemCache){var u={hour:"numeric",hourCycle:"h12"};o.meridiemCache=[Re.utc(2016,11,13,9),Re.utc(2016,11,13,19)].map(function(m){return o.extract(m,u,"dayperiod")})}return o.meridiemCache})},s.eras=function(e,o){var u=this;return o===void 0&&(o=!0),Bn(this,e,o,an,function(){var m={era:e};return u.eraCache[e]||(u.eraCache[e]=[Re.utc(-40,1,1),Re.utc(2017,1,1)].map(function(h){return u.extract(h,m,"era")})),u.eraCache[e]})},s.extract=function(e,o,u){var m=this.dtFormatter(e,o),h=m.formatToParts(),g=h.find(function(T){return T.type.toLowerCase()===u});return g?g.value:null},s.numberFormatter=function(e){return e===void 0&&(e={}),new Mt(this.intl,e.forceSimple||this.fastNumbers,e)},s.dtFormatter=function(e,o){return o===void 0&&(o={}),new br(e,this.intl,o)},s.relFormatter=function(e){return e===void 0&&(e={}),new wr(this.intl,this.isEnglish(),e)},s.listFormatter=function(e){return e===void 0&&(e={}),zt(this.intl,e)},s.isEnglish=function(){return this.locale==="en"||this.locale.toLowerCase()==="en-us"||new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us")},s.equals=function(e){return this.locale===e.locale&&this.numberingSystem===e.numberingSystem&&this.outputCalendar===e.outputCalendar},l(r,[{key:"fastNumbers",get:function(){return this.fastNumbersCached==null&&(this.fastNumbersCached=Mn(this)),this.fastNumbersCached}}]),r}();function Kt(){for(var r=arguments.length,s=new Array(r),i=0;i<r;i++)s[i]=arguments[i];var e=s.reduce(function(o,u){return o+u.source},"");return RegExp("^"+e+"$")}function $t(){for(var r=arguments.length,s=new Array(r),i=0;i<r;i++)s[i]=arguments[i];return function(e){return s.reduce(function(o,u){var m=o[0],h=o[1],g=o[2],T=u(e,g),N=T[0],D=T[1],I=T[2];return[d({},m,N),h||D,I]},[{},null,1]).slice(0,2)}}function W(r){if(r==null)return[null,null];for(var s=arguments.length,i=new Array(s>1?s-1:0),e=1;e<s;e++)i[e-1]=arguments[e];for(var o=0,u=i;o<u.length;o++){var m=u[o],h=m[0],g=m[1],T=h.exec(r);if(T)return g(T)}return[null,null]}function _(){for(var r=arguments.length,s=new Array(r),i=0;i<r;i++)s[i]=arguments[i];return function(e,o){var u={},m;for(m=0;m<s.length;m++)u[s[m]]=_e(e[o+m]);return[u,null,o+m]}}var M=/(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,x=/(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/,ve=RegExp(""+x.source+M.source+"?"),Le=RegExp("(?:T"+ve.source+")?"),We=/([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,Pe=/(\d{4})-?W(\d\d)(?:-?(\d))?/,Yn=/(\d{4})-?(\d{3})/,it=_("weekYear","weekNumber","weekDay"),Tr=_("year","ordinal"),Ur=/(\d{4})-(\d\d)-(\d\d)/,Wr=RegExp(x.source+" ?(?:"+M.source+"|("+kt.source+"))?"),il=RegExp("(?: "+Wr.source+")?");function Jn(r,s,i){var e=r[s];return ie(e)?i:_e(e)}function Ci(r,s){var i={year:Jn(r,s),month:Jn(r,s+1,1),day:Jn(r,s+2,1)};return[i,null,s+3]}function An(r,s){var i={hours:Jn(r,s,0),minutes:Jn(r,s+1,0),seconds:Jn(r,s+2,0),milliseconds:wn(r[s+3])};return[i,null,s+4]}function qn(r,s){var i=!r[s]&&!r[s+1],e=je(r[s+1],r[s+2]),o=i?null:Xe.instance(e);return[{},o,s+3]}function Li(r,s){var i=r[s]?Ue.create(r[s]):null;return[{},i,s+1]}var ol=RegExp("^T?"+x.source+"$"),sl=/^-?P(?:(?:(-?\d{1,9}(?:\.\d{1,9})?)Y)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,9}(?:\.\d{1,9})?)W)?(?:(-?\d{1,9}(?:\.\d{1,9})?)D)?(?:T(?:(-?\d{1,9}(?:\.\d{1,9})?)H)?(?:(-?\d{1,9}(?:\.\d{1,9})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,9}))?S)?)?)$/;function ll(r){var s=r[0],i=r[1],e=r[2],o=r[3],u=r[4],m=r[5],h=r[6],g=r[7],T=r[8],N=s[0]==="-",D=g&&g[0]==="-",I=function($,ce){return ce===void 0&&(ce=!1),$!==void 0&&(ce||$&&N)?-$:$};return[{years:I(ft(i)),months:I(ft(e)),weeks:I(ft(o)),days:I(ft(u)),hours:I(ft(m)),minutes:I(ft(h)),seconds:I(ft(g),g==="-0"),milliseconds:I(wn(T),D)}]}var ul={GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function jr(r,s,i,e,o,u,m){var h={year:s.length===2?et(_e(s)):_e(s),month:Ie.indexOf(i)+1,day:_e(e),hour:_e(o),minute:_e(u)};return m&&(h.second=_e(m)),r&&(h.weekday=r.length>3?Yt.indexOf(r)+1:Jt.indexOf(r)+1),h}var dl=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;function cl(r){var s=r[1],i=r[2],e=r[3],o=r[4],u=r[5],m=r[6],h=r[7],g=r[8],T=r[9],N=r[10],D=r[11],I=jr(s,o,e,i,u,m,h),Z;return g?Z=ul[g]:T?Z=0:Z=je(N,D),[I,new Xe(Z)]}function fl(r){return r.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}var ml=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,hl=/^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,vl=/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;function Ri(r){var s=r[1],i=r[2],e=r[3],o=r[4],u=r[5],m=r[6],h=r[7],g=jr(s,o,e,i,u,m,h);return[g,Xe.utcInstance]}function yl(r){var s=r[1],i=r[2],e=r[3],o=r[4],u=r[5],m=r[6],h=r[7],g=jr(s,h,i,e,o,u,m);return[g,Xe.utcInstance]}var gl=Kt(We,Le),pl=Kt(Pe,Le),_l=Kt(Yn,Le),bl=Kt(ve),wl=$t(Ci,An,qn),Tl=$t(it,An,qn),Sl=$t(Tr,An,qn),Ol=$t(An,qn);function kl(r){return W(r,[gl,wl],[pl,Tl],[_l,Sl],[bl,Ol])}function El(r){return W(fl(r),[dl,cl])}function Dl(r){return W(r,[ml,Ri],[hl,Ri],[vl,yl])}function Il(r){return W(r,[sl,ll])}var Nl=$t(An);function Ml(r){return W(r,[ol,Nl])}var Al=Kt(Ur,il),Cl=Kt(Wr),Ll=$t(Ci,An,qn,Li),Rl=$t(An,qn,Li);function Fl(r){return W(r,[Al,Ll],[Cl,Rl])}var xl="Invalid Duration",Fi={weeks:{days:7,hours:7*24,minutes:7*24*60,seconds:7*24*60*60,milliseconds:7*24*60*60*1e3},days:{hours:24,minutes:24*60,seconds:24*60*60,milliseconds:24*60*60*1e3},hours:{minutes:60,seconds:60*60,milliseconds:60*60*1e3},minutes:{seconds:60,milliseconds:60*1e3},seconds:{milliseconds:1e3}},Pl=d({years:{quarters:4,months:12,weeks:52,days:365,hours:365*24,minutes:365*24*60,seconds:365*24*60*60,milliseconds:365*24*60*60*1e3},quarters:{months:3,weeks:13,days:91,hours:91*24,minutes:91*24*60,seconds:91*24*60*60,milliseconds:91*24*60*60*1e3},months:{weeks:4,days:30,hours:30*24,minutes:30*24*60,seconds:30*24*60*60,milliseconds:30*24*60*60*1e3}},Fi),_t=146097/400,Qn=146097/4800,zl=d({years:{quarters:4,months:12,weeks:_t/7,days:_t,hours:_t*24,minutes:_t*24*60,seconds:_t*24*60*60,milliseconds:_t*24*60*60*1e3},quarters:{months:3,weeks:_t/28,days:_t/4,hours:_t*24/4,minutes:_t*24*60/4,seconds:_t*24*60*60/4,milliseconds:_t*24*60*60*1e3/4},months:{weeks:Qn/7,days:Qn,hours:Qn*24,minutes:Qn*24*60,seconds:Qn*24*60*60,milliseconds:Qn*24*60*60*1e3}},Fi),Cn=["years","quarters","months","weeks","days","hours","minutes","seconds","milliseconds"],Hl=Cn.slice(0).reverse();function Ln(r,s,i){i===void 0&&(i=!1);var e={values:i?s.values:d({},r.values,s.values||{}),loc:r.loc.clone(s.loc),conversionAccuracy:s.conversionAccuracy||r.conversionAccuracy};return new Ze(e)}function Vl(r){return r<0?Math.floor(r):Math.ceil(r)}function xi(r,s,i,e,o){var u=r[o][i],m=s[i]/u,h=Math.sign(m)===Math.sign(e[o]),g=!h&&e[o]!==0&&Math.abs(m)<=1?Vl(m):Math.trunc(m);e[o]+=g,s[i]-=g*u}function Ul(r,s){Hl.reduce(function(i,e){return ie(s[e])?i:(i&&xi(r,s,i,s,e),e)},null)}var Ze=function(){function r(i){var e=i.conversionAccuracy==="longterm"||!1;this.values=i.values,this.loc=i.loc||Ae.create(),this.conversionAccuracy=e?"longterm":"casual",this.invalid=i.invalid||null,this.matrix=e?zl:Pl,this.isLuxonDuration=!0}r.fromMillis=function(e,o){return r.fromObject({milliseconds:e},o)},r.fromObject=function(e,o){if(o===void 0&&(o={}),e==null||typeof e!="object")throw new ae("Duration.fromObject: argument expected to be an object, got "+(e===null?"null":typeof e));return new r({values:vt(e,r.normalizeUnit),loc:Ae.fromObject(o),conversionAccuracy:o.conversionAccuracy})},r.fromDurationLike=function(e){if(V(e))return r.fromMillis(e);if(r.isDuration(e))return e;if(typeof e=="object")return r.fromObject(e);throw new ae("Unknown duration argument "+e+" of type "+typeof e)},r.fromISO=function(e,o){var u=Il(e),m=u[0];return m?r.fromObject(m,o):r.invalid("unparsable",'the input "'+e+`" can't be parsed as ISO 8601`)},r.fromISOTime=function(e,o){var u=Ml(e),m=u[0];return m?r.fromObject(m,o):r.invalid("unparsable",'the input "'+e+`" can't be parsed as ISO 8601`)},r.invalid=function(e,o){if(o===void 0&&(o=null),!e)throw new ae("need to specify a reason the Duration is invalid");var u=e instanceof Ce?e:new Ce(e,o);if(re.throwOnInvalid)throw new pe(u);return new r({invalid:u})},r.normalizeUnit=function(e){var o={year:"years",years:"years",quarter:"quarters",quarters:"quarters",month:"months",months:"months",week:"weeks",weeks:"weeks",day:"days",days:"days",hour:"hours",hours:"hours",minute:"minutes",minutes:"minutes",second:"seconds",seconds:"seconds",millisecond:"milliseconds",milliseconds:"milliseconds"}[e&&e.toLowerCase()];if(!o)throw new oe(e);return o},r.isDuration=function(e){return e&&e.isLuxonDuration||!1};var s=r.prototype;return s.toFormat=function(e,o){o===void 0&&(o={});var u=d({},o,{floor:o.round!==!1&&o.floor!==!1});return this.isValid?Ke.create(this.loc,u).formatDurationFromString(this,e):xl},s.toHuman=function(e){var o=this;e===void 0&&(e={});var u=Cn.map(function(m){var h=o.values[m];return ie(h)?null:o.loc.numberFormatter(d({style:"unit",unitDisplay:"long"},e,{unit:m.slice(0,-1)})).format(h)}).filter(function(m){return m});return this.loc.listFormatter(d({type:"conjunction",style:e.listStyle||"narrow"},e)).format(u)},s.toObject=function(){return this.isValid?d({},this.values):{}},s.toISO=function(){if(!this.isValid)return null;var e="P";return this.years!==0&&(e+=this.years+"Y"),(this.months!==0||this.quarters!==0)&&(e+=this.months+this.quarters*3+"M"),this.weeks!==0&&(e+=this.weeks+"W"),this.days!==0&&(e+=this.days+"D"),(this.hours!==0||this.minutes!==0||this.seconds!==0||this.milliseconds!==0)&&(e+="T"),this.hours!==0&&(e+=this.hours+"H"),this.minutes!==0&&(e+=this.minutes+"M"),(this.seconds!==0||this.milliseconds!==0)&&(e+=Ot(this.seconds+this.milliseconds/1e3,3)+"S"),e==="P"&&(e+="T0S"),e},s.toISOTime=function(e){if(e===void 0&&(e={}),!this.isValid)return null;var o=this.toMillis();if(o<0||o>=864e5)return null;e=d({suppressMilliseconds:!1,suppressSeconds:!1,includePrefix:!1,format:"extended"},e);var u=this.shiftTo("hours","minutes","seconds","milliseconds"),m=e.format==="basic"?"hhmm":"hh:mm";(!e.suppressSeconds||u.seconds!==0||u.milliseconds!==0)&&(m+=e.format==="basic"?"ss":":ss",(!e.suppressMilliseconds||u.milliseconds!==0)&&(m+=".SSS"));var h=u.toFormat(m);return e.includePrefix&&(h="T"+h),h},s.toJSON=function(){return this.toISO()},s.toString=function(){return this.toISO()},s.toMillis=function(){return this.as("milliseconds")},s.valueOf=function(){return this.toMillis()},s.plus=function(e){if(!this.isValid)return this;for(var o=r.fromDurationLike(e),u={},m=H(Cn),h;!(h=m()).done;){var g=h.value;(he(o.values,g)||he(this.values,g))&&(u[g]=o.get(g)+this.get(g))}return Ln(this,{values:u},!0)},s.minus=function(e){if(!this.isValid)return this;var o=r.fromDurationLike(e);return this.plus(o.negate())},s.mapUnits=function(e){if(!this.isValid)return this;for(var o={},u=0,m=Object.keys(this.values);u<m.length;u++){var h=m[u];o[h]=ht(e(this.values[h],h))}return Ln(this,{values:o},!0)},s.get=function(e){return this[r.normalizeUnit(e)]},s.set=function(e){if(!this.isValid)return this;var o=d({},this.values,vt(e,r.normalizeUnit));return Ln(this,{values:o})},s.reconfigure=function(e){var o=e===void 0?{}:e,u=o.locale,m=o.numberingSystem,h=o.conversionAccuracy,g=this.loc.clone({locale:u,numberingSystem:m}),T={loc:g};return h&&(T.conversionAccuracy=h),Ln(this,T)},s.as=function(e){return this.isValid?this.shiftTo(e).get(e):NaN},s.normalize=function(){if(!this.isValid)return this;var e=this.toObject();return Ul(this.matrix,e),Ln(this,{values:e},!0)},s.shiftTo=function(){for(var e=arguments.length,o=new Array(e),u=0;u<e;u++)o[u]=arguments[u];if(!this.isValid)return this;if(o.length===0)return this;o=o.map(function(Ge){return r.normalizeUnit(Ge)});for(var m={},h={},g=this.toObject(),T,N=H(Cn),D;!(D=N()).done;){var I=D.value;if(o.indexOf(I)>=0){T=I;var Z=0;for(var $ in h)Z+=this.matrix[$][I]*h[$],h[$]=0;V(g[I])&&(Z+=g[I]);var ce=Math.trunc(Z);m[I]=ce,h[I]=(Z*1e3-ce*1e3)/1e3;for(var ue in g)Cn.indexOf(ue)>Cn.indexOf(I)&&xi(this.matrix,g,ue,m,I)}else V(g[I])&&(h[I]=g[I])}for(var K in h)h[K]!==0&&(m[T]+=K===T?h[K]:h[K]/this.matrix[T][K]);return Ln(this,{values:m},!0).normalize()},s.negate=function(){if(!this.isValid)return this;for(var e={},o=0,u=Object.keys(this.values);o<u.length;o++){var m=u[o];e[m]=-this.values[m]}return Ln(this,{values:e},!0)},s.equals=function(e){if(!this.isValid||!e.isValid||!this.loc.equals(e.loc))return!1;function o(g,T){return g===void 0||g===0?T===void 0||T===0:g===T}for(var u=H(Cn),m;!(m=u()).done;){var h=m.value;if(!o(this.values[h],e.values[h]))return!1}return!0},l(r,[{key:"locale",get:function(){return this.isValid?this.loc.locale:null}},{key:"numberingSystem",get:function(){return this.isValid?this.loc.numberingSystem:null}},{key:"years",get:function(){return this.isValid?this.values.years||0:NaN}},{key:"quarters",get:function(){return this.isValid?this.values.quarters||0:NaN}},{key:"months",get:function(){return this.isValid?this.values.months||0:NaN}},{key:"weeks",get:function(){return this.isValid?this.values.weeks||0:NaN}},{key:"days",get:function(){return this.isValid?this.values.days||0:NaN}},{key:"hours",get:function(){return this.isValid?this.values.hours||0:NaN}},{key:"minutes",get:function(){return this.isValid?this.values.minutes||0:NaN}},{key:"seconds",get:function(){return this.isValid?this.values.seconds||0:NaN}},{key:"milliseconds",get:function(){return this.isValid?this.values.milliseconds||0:NaN}},{key:"isValid",get:function(){return this.invalid===null}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}}]),r}(),tr="Invalid Interval";function Wl(r,s){return!r||!r.isValid?nr.invalid("missing or invalid start"):!s||!s.isValid?nr.invalid("missing or invalid end"):s<r?nr.invalid("end before start","The end of an interval must be after its start, but you had start="+r.toISO()+" and end="+s.toISO()):null}var nr=function(){function r(i){this.s=i.start,this.e=i.end,this.invalid=i.invalid||null,this.isLuxonInterval=!0}r.invalid=function(e,o){if(o===void 0&&(o=null),!e)throw new ae("need to specify a reason the Interval is invalid");var u=e instanceof Ce?e:new Ce(e,o);if(re.throwOnInvalid)throw new fe(u);return new r({invalid:u})},r.fromDateTimes=function(e,o){var u=or(e),m=or(o),h=Wl(u,m);return h==null?new r({start:u,end:m}):h},r.after=function(e,o){var u=Ze.fromDurationLike(o),m=or(e);return r.fromDateTimes(m,m.plus(u))},r.before=function(e,o){var u=Ze.fromDurationLike(o),m=or(e);return r.fromDateTimes(m.minus(u),m)},r.fromISO=function(e,o){var u=(e||"").split("/",2),m=u[0],h=u[1];if(m&&h){var g,T;try{g=Re.fromISO(m,o),T=g.isValid}catch($){T=!1}var N,D;try{N=Re.fromISO(h,o),D=N.isValid}catch($){D=!1}if(T&&D)return r.fromDateTimes(g,N);if(T){var I=Ze.fromISO(h,o);if(I.isValid)return r.after(g,I)}else if(D){var Z=Ze.fromISO(m,o);if(Z.isValid)return r.before(N,Z)}}return r.invalid("unparsable",'the input "'+e+`" can't be parsed as ISO 8601`)},r.isInterval=function(e){return e&&e.isLuxonInterval||!1};var s=r.prototype;return s.length=function(e){return e===void 0&&(e="milliseconds"),this.isValid?this.toDuration.apply(this,[e]).get(e):NaN},s.count=function(e){if(e===void 0&&(e="milliseconds"),!this.isValid)return NaN;var o=this.start.startOf(e),u=this.end.startOf(e);return Math.floor(u.diff(o,e).get(e))+1},s.hasSame=function(e){return this.isValid?this.isEmpty()||this.e.minus(1).hasSame(this.s,e):!1},s.isEmpty=function(){return this.s.valueOf()===this.e.valueOf()},s.isAfter=function(e){return this.isValid?this.s>e:!1},s.isBefore=function(e){return this.isValid?this.e<=e:!1},s.contains=function(e){return this.isValid?this.s<=e&&this.e>e:!1},s.set=function(e){var o=e===void 0?{}:e,u=o.start,m=o.end;return this.isValid?r.fromDateTimes(u||this.s,m||this.e):this},s.splitAt=function(){var e=this;if(!this.isValid)return[];for(var o=arguments.length,u=new Array(o),m=0;m<o;m++)u[m]=arguments[m];for(var h=u.map(or).filter(function(Z){return e.contains(Z)}).sort(),g=[],T=this.s,N=0;T<this.e;){var D=h[N]||this.e,I=+D>+this.e?this.e:D;g.push(r.fromDateTimes(T,I)),T=I,N+=1}return g},s.splitBy=function(e){var o=Ze.fromDurationLike(e);if(!this.isValid||!o.isValid||o.as("milliseconds")===0)return[];for(var u=this.s,m=1,h,g=[];u<this.e;){var T=this.start.plus(o.mapUnits(function(N){return N*m}));h=+T>+this.e?this.e:T,g.push(r.fromDateTimes(u,h)),u=h,m+=1}return g},s.divideEqually=function(e){return this.isValid?this.splitBy(this.length()/e).slice(0,e):[]},s.overlaps=function(e){return this.e>e.s&&this.s<e.e},s.abutsStart=function(e){return this.isValid?+this.e==+e.s:!1},s.abutsEnd=function(e){return this.isValid?+e.e==+this.s:!1},s.engulfs=function(e){return this.isValid?this.s<=e.s&&this.e>=e.e:!1},s.equals=function(e){return!this.isValid||!e.isValid?!1:this.s.equals(e.s)&&this.e.equals(e.e)},s.intersection=function(e){if(!this.isValid)return this;var o=this.s>e.s?this.s:e.s,u=this.e<e.e?this.e:e.e;return o>=u?null:r.fromDateTimes(o,u)},s.union=function(e){if(!this.isValid)return this;var o=this.s<e.s?this.s:e.s,u=this.e>e.e?this.e:e.e;return r.fromDateTimes(o,u)},r.merge=function(e){var o=e.sort(function(h,g){return h.s-g.s}).reduce(function(h,g){var T=h[0],N=h[1];return N?N.overlaps(g)||N.abutsStart(g)?[T,N.union(g)]:[T.concat([N]),g]:[T,g]},[[],null]),u=o[0],m=o[1];return m&&u.push(m),u},r.xor=function(e){for(var o,u=null,m=0,h=[],g=e.map(function($){return[{time:$.s,type:"s"},{time:$.e,type:"e"}]}),T=(o=Array.prototype).concat.apply(o,g),N=T.sort(function($,ce){return $.time-ce.time}),D=H(N),I;!(I=D()).done;){var Z=I.value;m+=Z.type==="s"?1:-1,m===1?u=Z.time:(u&&+u!=+Z.time&&h.push(r.fromDateTimes(u,Z.time)),u=null)}return r.merge(h)},s.difference=function(){for(var e=this,o=arguments.length,u=new Array(o),m=0;m<o;m++)u[m]=arguments[m];return r.xor([this].concat(u)).map(function(h){return e.intersection(h)}).filter(function(h){return h&&!h.isEmpty()})},s.toString=function(){return this.isValid?"["+this.s.toISO()+" \u2013 "+this.e.toISO()+")":tr},s.toISO=function(e){return this.isValid?this.s.toISO(e)+"/"+this.e.toISO(e):tr},s.toISODate=function(){return this.isValid?this.s.toISODate()+"/"+this.e.toISODate():tr},s.toISOTime=function(e){return this.isValid?this.s.toISOTime(e)+"/"+this.e.toISOTime(e):tr},s.toFormat=function(e,o){var u=o===void 0?{}:o,m=u.separator,h=m===void 0?" \u2013 ":m;return this.isValid?""+this.s.toFormat(e)+h+this.e.toFormat(e):tr},s.toDuration=function(e,o){return this.isValid?this.e.diff(this.s,e,o):Ze.invalid(this.invalidReason)},s.mapEndpoints=function(e){return r.fromDateTimes(e(this.s),e(this.e))},l(r,[{key:"start",get:function(){return this.isValid?this.s:null}},{key:"end",get:function(){return this.isValid?this.e:null}},{key:"isValid",get:function(){return this.invalidReason===null}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}}]),r}(),rr=function(){function r(){}return r.hasDST=function(i){i===void 0&&(i=re.defaultZone);var e=Re.now().setZone(i).set({month:12});return!i.isUniversal&&e.offset!==e.set({month:6}).offset},r.isValidIANAZone=function(i){return Ue.isValidSpecifier(i)&&Ue.isValidZone(i)},r.normalizeZone=function(i){return nt(i,re.defaultZone)},r.months=function(i,e){i===void 0&&(i="long");var o=e===void 0?{}:e,u=o.locale,m=u===void 0?null:u,h=o.numberingSystem,g=h===void 0?null:h,T=o.locObj,N=T===void 0?null:T,D=o.outputCalendar,I=D===void 0?"gregory":D;return(N||Ae.create(m,g,I)).months(i)},r.monthsFormat=function(i,e){i===void 0&&(i="long");var o=e===void 0?{}:e,u=o.locale,m=u===void 0?null:u,h=o.numberingSystem,g=h===void 0?null:h,T=o.locObj,N=T===void 0?null:T,D=o.outputCalendar,I=D===void 0?"gregory":D;return(N||Ae.create(m,g,I)).months(i,!0)},r.weekdays=function(i,e){i===void 0&&(i="long");var o=e===void 0?{}:e,u=o.locale,m=u===void 0?null:u,h=o.numberingSystem,g=h===void 0?null:h,T=o.locObj,N=T===void 0?null:T;return(N||Ae.create(m,g,null)).weekdays(i)},r.weekdaysFormat=function(i,e){i===void 0&&(i="long");var o=e===void 0?{}:e,u=o.locale,m=u===void 0?null:u,h=o.numberingSystem,g=h===void 0?null:h,T=o.locObj,N=T===void 0?null:T;return(N||Ae.create(m,g,null)).weekdays(i,!0)},r.meridiems=function(i){var e=i===void 0?{}:i,o=e.locale,u=o===void 0?null:o;return Ae.create(u).meridiems()},r.eras=function(i,e){i===void 0&&(i="short");var o=e===void 0?{}:e,u=o.locale,m=u===void 0?null:u;return Ae.create(m,null,"gregory").eras(i)},r.features=function(){return{relative:P()}},r}();function Pi(r,s){var i=function(u){return u.toUTC(0,{keepLocalTime:!0}).startOf("day").valueOf()},e=i(s)-i(r);return Math.floor(Ze.fromMillis(e).as("days"))}function jl(r,s,i){for(var e=[["years",function(ce,ue){return ue.year-ce.year}],["quarters",function(ce,ue){return ue.quarter-ce.quarter}],["months",function(ce,ue){return ue.month-ce.month+(ue.year-ce.year)*12}],["weeks",function(ce,ue){var K=Pi(ce,ue);return(K-K%7)/7}],["days",Pi]],o={},u,m,h=0,g=e;h<g.length;h++){var T=g[h],N=T[0],D=T[1];if(i.indexOf(N)>=0){var I;u=N;var Z=D(r,s);if(m=r.plus((I={},I[N]=Z,I)),m>s){var $;r=r.plus(($={},$[N]=Z-1,$)),Z-=1}else r=m;o[N]=Z}}return[r,o,m,u]}function Zl(r,s,i,e){var o=jl(r,s,i),u=o[0],m=o[1],h=o[2],g=o[3],T=s-u,N=i.filter(function($){return["hours","minutes","seconds","milliseconds"].indexOf($)>=0});if(N.length===0){if(h<s){var D;h=u.plus((D={},D[g]=1,D))}h!==u&&(m[g]=(m[g]||0)+T/(h-u))}var I=Ze.fromObject(m,e);if(N.length>0){var Z;return(Z=Ze.fromMillis(T,e)).shiftTo.apply(Z,N).plus(I)}else return I}var Zr={arab:"[\u0660-\u0669]",arabext:"[\u06F0-\u06F9]",bali:"[\u1B50-\u1B59]",beng:"[\u09E6-\u09EF]",deva:"[\u0966-\u096F]",fullwide:"[\uFF10-\uFF19]",gujr:"[\u0AE6-\u0AEF]",hanidec:"[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",khmr:"[\u17E0-\u17E9]",knda:"[\u0CE6-\u0CEF]",laoo:"[\u0ED0-\u0ED9]",limb:"[\u1946-\u194F]",mlym:"[\u0D66-\u0D6F]",mong:"[\u1810-\u1819]",mymr:"[\u1040-\u1049]",orya:"[\u0B66-\u0B6F]",tamldec:"[\u0BE6-\u0BEF]",telu:"[\u0C66-\u0C6F]",thai:"[\u0E50-\u0E59]",tibt:"[\u0F20-\u0F29]",latn:"\\d"},zi={arab:[1632,1641],arabext:[1776,1785],bali:[6992,7001],beng:[2534,2543],deva:[2406,2415],fullwide:[65296,65303],gujr:[2790,2799],khmr:[6112,6121],knda:[3302,3311],laoo:[3792,3801],limb:[6470,6479],mlym:[3430,3439],mong:[6160,6169],mymr:[4160,4169],orya:[2918,2927],tamldec:[3046,3055],telu:[3174,3183],thai:[3664,3673],tibt:[3872,3881]},Gl=Zr.hanidec.replace(/[\[|\]]/g,"").split("");function Bl(r){var s=parseInt(r,10);if(isNaN(s)){s="";for(var i=0;i<r.length;i++){var e=r.charCodeAt(i);if(r[i].search(Zr.hanidec)!==-1)s+=Gl.indexOf(r[i]);else for(var o in zi){var u=zi[o],m=u[0],h=u[1];e>=m&&e<=h&&(s+=e-m)}}return parseInt(s,10)}else return s}function At(r,s){var i=r.numberingSystem;return s===void 0&&(s=""),new RegExp(""+Zr[i||"latn"]+s)}var Yl="missing Intl.DateTimeFormat.formatToParts support";function ye(r,s){return s===void 0&&(s=function(e){return e}),{regex:r,deser:function(e){var o=e[0];return s(Bl(o))}}}var Jl=String.fromCharCode(160),Hi="( |"+Jl+")",Vi=new RegExp(Hi,"g");function ql(r){return r.replace(/\./g,"\\.?").replace(Vi,Hi)}function Ui(r){return r.replace(/\./g,"").replace(Vi," ").toLowerCase()}function Ct(r,s){return r===null?null:{regex:RegExp(r.map(ql).join("|")),deser:function(e){var o=e[0];return r.findIndex(function(u){return Ui(o)===Ui(u)})+s}}}function Wi(r,s){return{regex:r,deser:function(e){var o=e[1],u=e[2];return je(o,u)},groups:s}}function Gr(r){return{regex:r,deser:function(i){var e=i[0];return e}}}function Ql(r){return r.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function Xl(r,s){var i=At(s),e=At(s,"{2}"),o=At(s,"{3}"),u=At(s,"{4}"),m=At(s,"{6}"),h=At(s,"{1,2}"),g=At(s,"{1,3}"),T=At(s,"{1,6}"),N=At(s,"{1,9}"),D=At(s,"{2,4}"),I=At(s,"{4,6}"),Z=function(K){return{regex:RegExp(Ql(K.val)),deser:function(Er){var Kr=Er[0];return Kr},literal:!0}},$=function(K){if(r.literal)return Z(K);switch(K.val){case"G":return Ct(s.eras("short",!1),0);case"GG":return Ct(s.eras("long",!1),0);case"y":return ye(T);case"yy":return ye(D,et);case"yyyy":return ye(u);case"yyyyy":return ye(I);case"yyyyyy":return ye(m);case"M":return ye(h);case"MM":return ye(e);case"MMM":return Ct(s.months("short",!0,!1),1);case"MMMM":return Ct(s.months("long",!0,!1),1);case"L":return ye(h);case"LL":return ye(e);case"LLL":return Ct(s.months("short",!1,!1),1);case"LLLL":return Ct(s.months("long",!1,!1),1);case"d":return ye(h);case"dd":return ye(e);case"o":return ye(g);case"ooo":return ye(o);case"HH":return ye(e);case"H":return ye(h);case"hh":return ye(e);case"h":return ye(h);case"mm":return ye(e);case"m":return ye(h);case"q":return ye(h);case"qq":return ye(e);case"s":return ye(h);case"ss":return ye(e);case"S":return ye(g);case"SSS":return ye(o);case"u":return Gr(N);case"uu":return Gr(h);case"uuu":return ye(i);case"a":return Ct(s.meridiems(),0);case"kkkk":return ye(u);case"kk":return ye(D,et);case"W":return ye(h);case"WW":return ye(e);case"E":case"c":return ye(i);case"EEE":return Ct(s.weekdays("short",!1,!1),1);case"EEEE":return Ct(s.weekdays("long",!1,!1),1);case"ccc":return Ct(s.weekdays("short",!0,!1),1);case"cccc":return Ct(s.weekdays("long",!0,!1),1);case"Z":case"ZZ":return Wi(new RegExp("([+-]"+h.source+")(?::("+e.source+"))?"),2);case"ZZZ":return Wi(new RegExp("([+-]"+h.source+")("+e.source+")?"),2);case"z":return Gr(/[a-z_+-/]{1,256}?/i);default:return Z(K)}},ce=$(r)||{invalidReason:Yl};return ce.token=r,ce}var Kl={year:{"2-digit":"yy",numeric:"yyyyy"},month:{numeric:"M","2-digit":"MM",short:"MMM",long:"MMMM"},day:{numeric:"d","2-digit":"dd"},weekday:{short:"EEE",long:"EEEE"},dayperiod:"a",dayPeriod:"a",hour:{numeric:"h","2-digit":"hh"},minute:{numeric:"m","2-digit":"mm"},second:{numeric:"s","2-digit":"ss"}};function $l(r,s,i){var e=r.type,o=r.value;if(e==="literal")return{literal:!0,val:o};var u=i[e],m=Kl[e];if(typeof m=="object"&&(m=m[u]),m)return{literal:!1,val:m}}function eu(r){var s=r.map(function(i){return i.regex}).reduce(function(i,e){return i+"("+e.source+")"},"");return["^"+s+"$",r]}function tu(r,s,i){var e=r.match(s);if(e){var o={},u=1;for(var m in i)if(he(i,m)){var h=i[m],g=h.groups?h.groups+1:1;!h.literal&&h.token&&(o[h.token.val[0]]=h.deser(e.slice(u,u+g))),u+=g}return[e,o]}else return[e,{}]}function nu(r){var s=function(m){switch(m){case"S":return"millisecond";case"s":return"second";case"m":return"minute";case"h":case"H":return"hour";case"d":return"day";case"o":return"ordinal";case"L":case"M":return"month";case"y":return"year";case"E":case"c":return"weekday";case"W":return"weekNumber";case"k":return"weekYear";case"q":return"quarter";default:return null}},i=null,e;ie(r.z)||(i=Ue.create(r.z)),ie(r.Z)||(i||(i=new Xe(r.Z)),e=r.Z),ie(r.q)||(r.M=(r.q-1)*3+1),ie(r.h)||(r.h<12&&r.a===1?r.h+=12:r.h===12&&r.a===0&&(r.h=0)),r.G===0&&r.y&&(r.y=-r.y),ie(r.u)||(r.S=wn(r.u));var o=Object.keys(r).reduce(function(u,m){var h=s(m);return h&&(u[h]=r[m]),u},{});return[o,i,e]}var Br=null;function ru(){return Br||(Br=Re.fromMillis(1555555555555)),Br}function au(r,s){if(r.literal)return r;var i=Ke.macroTokenToFormatOpts(r.val);if(!i)return r;var e=Ke.create(s,i),o=e.formatDateTimeParts(ru()),u=o.map(function(m){return $l(m,s,i)});return u.includes(void 0)?r:u}function iu(r,s){var i;return(i=Array.prototype).concat.apply(i,r.map(function(e){return au(e,s)}))}function ji(r,s,i){var e=iu(Ke.parseFormat(i),r),o=e.map(function(K){return Xl(K,r)}),u=o.find(function(K){return K.invalidReason});if(u)return{input:s,tokens:e,invalidReason:u.invalidReason};var m=eu(o),h=m[0],g=m[1],T=RegExp(h,"i"),N=tu(s,T,g),D=N[0],I=N[1],Z=I?nu(I):[null,null,void 0],$=Z[0],ce=Z[1],ue=Z[2];if(he(I,"a")&&he(I,"H"))throw new q("Can't include meridiem when specifying 24-hour format");return{input:s,tokens:e,regex:T,rawMatches:D,matches:I,result:$,zone:ce,specificOffset:ue}}function ou(r,s,i){var e=ji(r,s,i),o=e.result,u=e.zone,m=e.specificOffset,h=e.invalidReason;return[o,u,m,h]}var Zi=[0,31,59,90,120,151,181,212,243,273,304,334],Gi=[0,31,60,91,121,152,182,213,244,274,305,335];function bt(r,s){return new Ce("unit out of range","you specified "+s+" (of type "+typeof s+") as a "+r+", which is invalid")}function Bi(r,s,i){var e=new Date(Date.UTC(r,s-1,i)).getUTCDay();return e===0?7:e}function Yi(r,s,i){return i+(mt(r)?Gi:Zi)[s-1]}function Ji(r,s){var i=mt(r)?Gi:Zi,e=i.findIndex(function(u){return u<s}),o=s-i[e];return{month:e+1,day:o}}function Yr(r){var s=r.year,i=r.month,e=r.day,o=Yi(s,i,e),u=Bi(s,i,e),m=Math.floor((o-u+10)/7),h;return m<1?(h=s-1,m=nn(h)):m>nn(s)?(h=s+1,m=1):h=s,d({weekYear:h,weekNumber:m,weekday:u},yt(r))}function qi(r){var s=r.weekYear,i=r.weekNumber,e=r.weekday,o=Bi(s,1,4),u=De(s),m=i*7+e-o-3,h;m<1?(h=s-1,m+=De(h)):m>u?(h=s+1,m-=De(s)):h=s;var g=Ji(h,m),T=g.month,N=g.day;return d({year:h,month:T,day:N},yt(r))}function Jr(r){var s=r.year,i=r.month,e=r.day,o=Yi(s,i,e);return d({year:s,ordinal:o},yt(r))}function Qi(r){var s=r.year,i=r.ordinal,e=Ji(s,i),o=e.month,u=e.day;return d({year:s,month:o,day:u},yt(r))}function su(r){var s=St(r.weekYear),i=ge(r.weekNumber,1,nn(r.weekYear)),e=ge(r.weekday,1,7);return s?i?e?!1:bt("weekday",r.weekday):bt("week",r.week):bt("weekYear",r.weekYear)}function lu(r){var s=St(r.year),i=ge(r.ordinal,1,De(r.year));return s?i?!1:bt("ordinal",r.ordinal):bt("year",r.year)}function Xi(r){var s=St(r.year),i=ge(r.month,1,12),e=ge(r.day,1,xt(r.year,r.month));return s?i?e?!1:bt("day",r.day):bt("month",r.month):bt("year",r.year)}function Ki(r){var s=r.hour,i=r.minute,e=r.second,o=r.millisecond,u=ge(s,0,23)||s===24&&i===0&&e===0&&o===0,m=ge(i,0,59),h=ge(e,0,59),g=ge(o,0,999);return u?m?h?g?!1:bt("millisecond",o):bt("second",e):bt("minute",i):bt("hour",s)}var qr="Invalid DateTime",$i=864e13;function Sr(r){return new Ce("unsupported zone",'the zone "'+r.name+'" is not supported')}function Qr(r){return r.weekData===null&&(r.weekData=Yr(r.c)),r.weekData}function ar(r,s){var i={ts:r.ts,zone:r.zone,c:r.c,o:r.o,loc:r.loc,invalid:r.invalid};return new Re(d({},i,s,{old:i}))}function eo(r,s,i){var e=r-s*60*1e3,o=i.offset(e);if(s===o)return[e,s];e-=(o-s)*60*1e3;var u=i.offset(e);return o===u?[e,o]:[r-Math.min(o,u)*60*1e3,Math.max(o,u)]}function to(r,s){r+=s*60*1e3;var i=new Date(r);return{year:i.getUTCFullYear(),month:i.getUTCMonth()+1,day:i.getUTCDate(),hour:i.getUTCHours(),minute:i.getUTCMinutes(),second:i.getUTCSeconds(),millisecond:i.getUTCMilliseconds()}}function Or(r,s,i){return eo(Bt(r),s,i)}function no(r,s){var i=r.o,e=r.c.year+Math.trunc(s.years),o=r.c.month+Math.trunc(s.months)+Math.trunc(s.quarters)*3,u=d({},r.c,{year:e,month:o,day:Math.min(r.c.day,xt(e,o))+Math.trunc(s.days)+Math.trunc(s.weeks)*7}),m=Ze.fromObject({years:s.years-Math.trunc(s.years),quarters:s.quarters-Math.trunc(s.quarters),months:s.months-Math.trunc(s.months),weeks:s.weeks-Math.trunc(s.weeks),days:s.days-Math.trunc(s.days),hours:s.hours,minutes:s.minutes,seconds:s.seconds,milliseconds:s.milliseconds}).as("milliseconds"),h=Bt(u),g=eo(h,i,r.zone),T=g[0],N=g[1];return m!==0&&(T+=m,N=r.zone.offset(T)),{ts:T,o:N}}function ir(r,s,i,e,o,u){var m=i.setZone,h=i.zone;if(r&&Object.keys(r).length!==0){var g=s||h,T=Re.fromObject(r,d({},i,{zone:g,specificOffset:u}));return m?T:T.setZone(h)}else return Re.invalid(new Ce("unparsable",'the input "'+o+`" can't be parsed as `+e))}function kr(r,s,i){return i===void 0&&(i=!0),r.isValid?Ke.create(Ae.create("en-US"),{allowZ:i,forceSimple:!0}).formatDateTimeFromString(r,s):null}function Xr(r,s){var i=r.c.year>9999||r.c.year<0,e="";return i&&r.c.year>=0&&(e+="+"),e+=Te(r.c.year,i?6:4),s?(e+="-",e+=Te(r.c.month),e+="-",e+=Te(r.c.day)):(e+=Te(r.c.month),e+=Te(r.c.day)),e}function ro(r,s,i,e,o){var u=Te(r.c.hour);return s?(u+=":",u+=Te(r.c.minute),(r.c.second!==0||!i)&&(u+=":")):u+=Te(r.c.minute),(r.c.second!==0||!i)&&(u+=Te(r.c.second),(r.c.millisecond!==0||!e)&&(u+=".",u+=Te(r.c.millisecond,3))),o&&(r.isOffsetFixed&&r.offset===0?u+="Z":r.o<0?(u+="-",u+=Te(Math.trunc(-r.o/60)),u+=":",u+=Te(Math.trunc(-r.o%60))):(u+="+",u+=Te(Math.trunc(r.o/60)),u+=":",u+=Te(Math.trunc(r.o%60)))),u}var ao={month:1,day:1,hour:0,minute:0,second:0,millisecond:0},uu={weekNumber:1,weekday:1,hour:0,minute:0,second:0,millisecond:0},du={ordinal:1,hour:0,minute:0,second:0,millisecond:0},io=["year","month","day","hour","minute","second","millisecond"],cu=["weekYear","weekNumber","weekday","hour","minute","second","millisecond"],fu=["year","ordinal","hour","minute","second","millisecond"];function oo(r){var s={year:"year",years:"year",month:"month",months:"month",day:"day",days:"day",hour:"hour",hours:"hour",minute:"minute",minutes:"minute",quarter:"quarter",quarters:"quarter",second:"second",seconds:"second",millisecond:"millisecond",milliseconds:"millisecond",weekday:"weekday",weekdays:"weekday",weeknumber:"weekNumber",weeksnumber:"weekNumber",weeknumbers:"weekNumber",weekyear:"weekYear",weekyears:"weekYear",ordinal:"ordinal"}[r.toLowerCase()];if(!s)throw new oe(r);return s}function so(r,s){var i=nt(s.zone,re.defaultZone),e=Ae.fromObject(s),o=re.now(),u,m;if(ie(r.year))u=o;else{for(var h=H(io),g;!(g=h()).done;){var T=g.value;ie(r[T])&&(r[T]=ao[T])}var N=Xi(r)||Ki(r);if(N)return Re.invalid(N);var D=i.offset(o),I=Or(r,D,i);u=I[0],m=I[1]}return new Re({ts:u,zone:i,loc:e,o:m})}function lo(r,s,i){var e=ie(i.round)?!0:i.round,o=function(D,I){D=Ot(D,e||i.calendary?0:2,!0);var Z=s.loc.clone(i).relFormatter(i);return Z.format(D,I)},u=function(D){return i.calendary?s.hasSame(r,D)?0:s.startOf(D).diff(r.startOf(D),D).get(D):s.diff(r,D).get(D)};if(i.unit)return o(u(i.unit),i.unit);for(var m=H(i.units),h;!(h=m()).done;){var g=h.value,T=u(g);if(Math.abs(T)>=1)return o(T,g)}return o(r>s?-0:0,i.units[i.units.length-1])}function uo(r){var s={},i;return r.length>0&&typeof r[r.length-1]=="object"?(s=r[r.length-1],i=Array.from(r).slice(0,r.length-1)):i=Array.from(r),[s,i]}var Re=function(){function r(i){var e=i.zone||re.defaultZone,o=i.invalid||(Number.isNaN(i.ts)?new Ce("invalid input"):null)||(e.isValid?null:Sr(e));this.ts=ie(i.ts)?re.now():i.ts;var u=null,m=null;if(!o){var h=i.old&&i.old.ts===this.ts&&i.old.zone.equals(e);if(h){var g=[i.old.c,i.old.o];u=g[0],m=g[1]}else{var T=e.offset(this.ts);u=to(this.ts,T),o=Number.isNaN(u.year)?new Ce("invalid input"):null,u=o?null:u,m=o?null:T}}this._zone=e,this.loc=i.loc||Ae.create(),this.invalid=o,this.weekData=null,this.c=u,this.o=m,this.isLuxonDateTime=!0}r.now=function(){return new r({})},r.local=function(){var e=uo(arguments),o=e[0],u=e[1],m=u[0],h=u[1],g=u[2],T=u[3],N=u[4],D=u[5],I=u[6];return so({year:m,month:h,day:g,hour:T,minute:N,second:D,millisecond:I},o)},r.utc=function(){var e=uo(arguments),o=e[0],u=e[1],m=u[0],h=u[1],g=u[2],T=u[3],N=u[4],D=u[5],I=u[6];return o.zone=Xe.utcInstance,so({year:m,month:h,day:g,hour:T,minute:N,second:D,millisecond:I},o)},r.fromJSDate=function(e,o){o===void 0&&(o={});var u=R(e)?e.valueOf():NaN;if(Number.isNaN(u))return r.invalid("invalid input");var m=nt(o.zone,re.defaultZone);return m.isValid?new r({ts:u,zone:m,loc:Ae.fromObject(o)}):r.invalid(Sr(m))},r.fromMillis=function(e,o){if(o===void 0&&(o={}),V(e))return e<-$i||e>$i?r.invalid("Timestamp out of range"):new r({ts:e,zone:nt(o.zone,re.defaultZone),loc:Ae.fromObject(o)});throw new ae("fromMillis requires a numerical input, but received a "+typeof e+" with value "+e)},r.fromSeconds=function(e,o){if(o===void 0&&(o={}),V(e))return new r({ts:e*1e3,zone:nt(o.zone,re.defaultZone),loc:Ae.fromObject(o)});throw new ae("fromSeconds requires a numerical input")},r.fromObject=function(e,o){o===void 0&&(o={}),e=e||{};var u=nt(o.zone,re.defaultZone);if(!u.isValid)return r.invalid(Sr(u));var m=re.now(),h=ie(o.specificOffset)?u.offset(m):o.specificOffset,g=vt(e,oo),T=!ie(g.ordinal),N=!ie(g.year),D=!ie(g.month)||!ie(g.day),I=N||D,Z=g.weekYear||g.weekNumber,$=Ae.fromObject(o);if((I||T)&&Z)throw new q("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(D&&T)throw new q("Can't mix ordinal dates with month/day");var ce=Z||g.weekday&&!I,ue,K,Ge=to(m,h);ce?(ue=cu,K=uu,Ge=Yr(Ge)):T?(ue=fu,K=du,Ge=Jr(Ge)):(ue=io,K=ao);for(var Er=!1,Kr=H(ue),co;!(co=Kr()).done;){var sr=co.value,hu=g[sr];ie(hu)?Er?g[sr]=K[sr]:g[sr]=Ge[sr]:Er=!0}var vu=ce?su(g):T?lu(g):Xi(g),fo=vu||Ki(g);if(fo)return r.invalid(fo);var yu=ce?qi(g):T?Qi(g):g,mo=Or(yu,h,u),gu=mo[0],pu=mo[1],$r=new r({ts:gu,zone:u,o:pu,loc:$});return g.weekday&&I&&e.weekday!==$r.weekday?r.invalid("mismatched weekday","you can't specify both a weekday of "+g.weekday+" and a date of "+$r.toISO()):$r},r.fromISO=function(e,o){o===void 0&&(o={});var u=kl(e),m=u[0],h=u[1];return ir(m,h,o,"ISO 8601",e)},r.fromRFC2822=function(e,o){o===void 0&&(o={});var u=El(e),m=u[0],h=u[1];return ir(m,h,o,"RFC 2822",e)},r.fromHTTP=function(e,o){o===void 0&&(o={});var u=Dl(e),m=u[0],h=u[1];return ir(m,h,o,"HTTP",o)},r.fromFormat=function(e,o,u){if(u===void 0&&(u={}),ie(e)||ie(o))throw new ae("fromFormat requires an input string and a format");var m=u,h=m.locale,g=h===void 0?null:h,T=m.numberingSystem,N=T===void 0?null:T,D=Ae.fromOpts({locale:g,numberingSystem:N,defaultToEN:!0}),I=ou(D,e,o),Z=I[0],$=I[1],ce=I[2],ue=I[3];return ue?r.invalid(ue):ir(Z,$,u,"format "+o,e,ce)},r.fromString=function(e,o,u){return u===void 0&&(u={}),r.fromFormat(e,o,u)},r.fromSQL=function(e,o){o===void 0&&(o={});var u=Fl(e),m=u[0],h=u[1];return ir(m,h,o,"SQL",e)},r.invalid=function(e,o){if(o===void 0&&(o=null),!e)throw new ae("need to specify a reason the DateTime is invalid");var u=e instanceof Ce?e:new Ce(e,o);if(re.throwOnInvalid)throw new F(u);return new r({invalid:u})},r.isDateTime=function(e){return e&&e.isLuxonDateTime||!1};var s=r.prototype;return s.get=function(e){return this[e]},s.resolvedLocaleOptions=function(e){e===void 0&&(e={});var o=Ke.create(this.loc.clone(e),e).resolvedOptions(this),u=o.locale,m=o.numberingSystem,h=o.calendar;return{locale:u,numberingSystem:m,outputCalendar:h}},s.toUTC=function(e,o){return e===void 0&&(e=0),o===void 0&&(o={}),this.setZone(Xe.instance(e),o)},s.toLocal=function(){return this.setZone(re.defaultZone)},s.setZone=function(e,o){var u=o===void 0?{}:o,m=u.keepLocalTime,h=m===void 0?!1:m,g=u.keepCalendarTime,T=g===void 0?!1:g;if(e=nt(e,re.defaultZone),e.equals(this.zone))return this;if(e.isValid){var N=this.ts;if(h||T){var D=e.offset(this.ts),I=this.toObject(),Z=Or(I,D,e);N=Z[0]}return ar(this,{ts:N,zone:e})}else return r.invalid(Sr(e))},s.reconfigure=function(e){var o=e===void 0?{}:e,u=o.locale,m=o.numberingSystem,h=o.outputCalendar,g=this.loc.clone({locale:u,numberingSystem:m,outputCalendar:h});return ar(this,{loc:g})},s.setLocale=function(e){return this.reconfigure({locale:e})},s.set=function(e){if(!this.isValid)return this;var o=vt(e,oo),u=!ie(o.weekYear)||!ie(o.weekNumber)||!ie(o.weekday),m=!ie(o.ordinal),h=!ie(o.year),g=!ie(o.month)||!ie(o.day),T=h||g,N=o.weekYear||o.weekNumber;if((T||m)&&N)throw new q("Can't mix weekYear/weekNumber units with year/month/day or ordinals");if(g&&m)throw new q("Can't mix ordinal dates with month/day");var D;u?D=qi(d({},Yr(this.c),o)):ie(o.ordinal)?(D=d({},this.toObject(),o),ie(o.day)&&(D.day=Math.min(xt(D.year,D.month),D.day))):D=Qi(d({},Jr(this.c),o));var I=Or(D,this.o,this.zone),Z=I[0],$=I[1];return ar(this,{ts:Z,o:$})},s.plus=function(e){if(!this.isValid)return this;var o=Ze.fromDurationLike(e);return ar(this,no(this,o))},s.minus=function(e){if(!this.isValid)return this;var o=Ze.fromDurationLike(e).negate();return ar(this,no(this,o))},s.startOf=function(e){if(!this.isValid)return this;var o={},u=Ze.normalizeUnit(e);switch(u){case"years":o.month=1;case"quarters":case"months":o.day=1;case"weeks":case"days":o.hour=0;case"hours":o.minute=0;case"minutes":o.second=0;case"seconds":o.millisecond=0;break}if(u==="weeks"&&(o.weekday=1),u==="quarters"){var m=Math.ceil(this.month/3);o.month=(m-1)*3+1}return this.set(o)},s.endOf=function(e){var o;return this.isValid?this.plus((o={},o[e]=1,o)).startOf(e).minus(1):this},s.toFormat=function(e,o){return o===void 0&&(o={}),this.isValid?Ke.create(this.loc.redefaultToEN(o)).formatDateTimeFromString(this,e):qr},s.toLocaleString=function(e,o){return e===void 0&&(e=me),o===void 0&&(o={}),this.isValid?Ke.create(this.loc.clone(o),e).formatDateTime(this):qr},s.toLocaleParts=function(e){return e===void 0&&(e={}),this.isValid?Ke.create(this.loc.clone(e),e).formatDateTimeParts(this):[]},s.toISO=function(e){var o=e===void 0?{}:e,u=o.format,m=u===void 0?"extended":u,h=o.suppressSeconds,g=h===void 0?!1:h,T=o.suppressMilliseconds,N=T===void 0?!1:T,D=o.includeOffset,I=D===void 0?!0:D;if(!this.isValid)return null;var Z=m==="extended",$=Xr(this,Z);return $+="T",$+=ro(this,Z,g,N,I),$},s.toISODate=function(e){var o=e===void 0?{}:e,u=o.format,m=u===void 0?"extended":u;return this.isValid?Xr(this,m==="extended"):null},s.toISOWeekDate=function(){return kr(this,"kkkk-'W'WW-c")},s.toISOTime=function(e){var o=e===void 0?{}:e,u=o.suppressMilliseconds,m=u===void 0?!1:u,h=o.suppressSeconds,g=h===void 0?!1:h,T=o.includeOffset,N=T===void 0?!0:T,D=o.includePrefix,I=D===void 0?!1:D,Z=o.format,$=Z===void 0?"extended":Z;if(!this.isValid)return null;var ce=I?"T":"";return ce+ro(this,$==="extended",g,m,N)},s.toRFC2822=function(){return kr(this,"EEE, dd LLL yyyy HH:mm:ss ZZZ",!1)},s.toHTTP=function(){return kr(this.toUTC(),"EEE, dd LLL yyyy HH:mm:ss 'GMT'")},s.toSQLDate=function(){return this.isValid?Xr(this,!0):null},s.toSQLTime=function(e){var o=e===void 0?{}:e,u=o.includeOffset,m=u===void 0?!0:u,h=o.includeZone,g=h===void 0?!1:h,T="HH:mm:ss.SSS";return(g||m)&&(T+=" ",g?T+="z":m&&(T+="ZZ")),kr(this,T,!0)},s.toSQL=function(e){return e===void 0&&(e={}),this.isValid?this.toSQLDate()+" "+this.toSQLTime(e):null},s.toString=function(){return this.isValid?this.toISO():qr},s.valueOf=function(){return this.toMillis()},s.toMillis=function(){return this.isValid?this.ts:NaN},s.toSeconds=function(){return this.isValid?this.ts/1e3:NaN},s.toJSON=function(){return this.toISO()},s.toBSON=function(){return this.toJSDate()},s.toObject=function(e){if(e===void 0&&(e={}),!this.isValid)return{};var o=d({},this.c);return e.includeConfig&&(o.outputCalendar=this.outputCalendar,o.numberingSystem=this.loc.numberingSystem,o.locale=this.loc.locale),o},s.toJSDate=function(){return new Date(this.isValid?this.ts:NaN)},s.diff=function(e,o,u){if(o===void 0&&(o="milliseconds"),u===void 0&&(u={}),!this.isValid||!e.isValid)return Ze.invalid("created by diffing an invalid DateTime");var m=d({locale:this.locale,numberingSystem:this.numberingSystem},u),h=te(o).map(Ze.normalizeUnit),g=e.valueOf()>this.valueOf(),T=g?this:e,N=g?e:this,D=Zl(T,N,h,m);return g?D.negate():D},s.diffNow=function(e,o){return e===void 0&&(e="milliseconds"),o===void 0&&(o={}),this.diff(r.now(),e,o)},s.until=function(e){return this.isValid?nr.fromDateTimes(this,e):this},s.hasSame=function(e,o){if(!this.isValid)return!1;var u=e.valueOf(),m=this.setZone(e.zone,{keepLocalTime:!0});return m.startOf(o)<=u&&u<=m.endOf(o)},s.equals=function(e){return this.isValid&&e.isValid&&this.valueOf()===e.valueOf()&&this.zone.equals(e.zone)&&this.loc.equals(e.loc)},s.toRelative=function(e){if(e===void 0&&(e={}),!this.isValid)return null;var o=e.base||r.fromObject({},{zone:this.zone}),u=e.padding?this<o?-e.padding:e.padding:0,m=["years","months","days","hours","minutes","seconds"],h=e.unit;return Array.isArray(e.unit)&&(m=e.unit,h=void 0),lo(o,this.plus(u),d({},e,{numeric:"always",units:m,unit:h}))},s.toRelativeCalendar=function(e){return e===void 0&&(e={}),this.isValid?lo(e.base||r.fromObject({},{zone:this.zone}),this,d({},e,{numeric:"auto",units:["years","months","days"],calendary:!0})):null},r.min=function(){for(var e=arguments.length,o=new Array(e),u=0;u<e;u++)o[u]=arguments[u];if(!o.every(r.isDateTime))throw new ae("min requires all arguments be DateTimes");return U(o,function(m){return m.valueOf()},Math.min)},r.max=function(){for(var e=arguments.length,o=new Array(e),u=0;u<e;u++)o[u]=arguments[u];if(!o.every(r.isDateTime))throw new ae("max requires all arguments be DateTimes");return U(o,function(m){return m.valueOf()},Math.max)},r.fromFormatExplain=function(e,o,u){u===void 0&&(u={});var m=u,h=m.locale,g=h===void 0?null:h,T=m.numberingSystem,N=T===void 0?null:T,D=Ae.fromOpts({locale:g,numberingSystem:N,defaultToEN:!0});return ji(D,e,o)},r.fromStringExplain=function(e,o,u){return u===void 0&&(u={}),r.fromFormatExplain(e,o,u)},l(r,[{key:"isValid",get:function(){return this.invalid===null}},{key:"invalidReason",get:function(){return this.invalid?this.invalid.reason:null}},{key:"invalidExplanation",get:function(){return this.invalid?this.invalid.explanation:null}},{key:"locale",get:function(){return this.isValid?this.loc.locale:null}},{key:"numberingSystem",get:function(){return this.isValid?this.loc.numberingSystem:null}},{key:"outputCalendar",get:function(){return this.isValid?this.loc.outputCalendar:null}},{key:"zone",get:function(){return this._zone}},{key:"zoneName",get:function(){return this.isValid?this.zone.name:null}},{key:"year",get:function(){return this.isValid?this.c.year:NaN}},{key:"quarter",get:function(){return this.isValid?Math.ceil(this.c.month/3):NaN}},{key:"month",get:function(){return this.isValid?this.c.month:NaN}},{key:"day",get:function(){return this.isValid?this.c.day:NaN}},{key:"hour",get:function(){return this.isValid?this.c.hour:NaN}},{key:"minute",get:function(){return this.isValid?this.c.minute:NaN}},{key:"second",get:function(){return this.isValid?this.c.second:NaN}},{key:"millisecond",get:function(){return this.isValid?this.c.millisecond:NaN}},{key:"weekYear",get:function(){return this.isValid?Qr(this).weekYear:NaN}},{key:"weekNumber",get:function(){return this.isValid?Qr(this).weekNumber:NaN}},{key:"weekday",get:function(){return this.isValid?Qr(this).weekday:NaN}},{key:"ordinal",get:function(){return this.isValid?Jr(this.c).ordinal:NaN}},{key:"monthShort",get:function(){return this.isValid?rr.months("short",{locObj:this.loc})[this.month-1]:null}},{key:"monthLong",get:function(){return this.isValid?rr.months("long",{locObj:this.loc})[this.month-1]:null}},{key:"weekdayShort",get:function(){return this.isValid?rr.weekdays("short",{locObj:this.loc})[this.weekday-1]:null}},{key:"weekdayLong",get:function(){return this.isValid?rr.weekdays("long",{locObj:this.loc})[this.weekday-1]:null}},{key:"offset",get:function(){return this.isValid?+this.o:NaN}},{key:"offsetNameShort",get:function(){return this.isValid?this.zone.offsetName(this.ts,{format:"short",locale:this.locale}):null}},{key:"offsetNameLong",get:function(){return this.isValid?this.zone.offsetName(this.ts,{format:"long",locale:this.locale}):null}},{key:"isOffsetFixed",get:function(){return this.isValid?this.zone.isUniversal:null}},{key:"isInDST",get:function(){return this.isOffsetFixed?!1:this.offset>this.set({month:1}).offset||this.offset>this.set({month:5}).offset}},{key:"isInLeapYear",get:function(){return mt(this.year)}},{key:"daysInMonth",get:function(){return xt(this.year,this.month)}},{key:"daysInYear",get:function(){return this.isValid?De(this.year):NaN}},{key:"weeksInWeekYear",get:function(){return this.isValid?nn(this.weekYear):NaN}}],[{key:"DATE_SHORT",get:function(){return me}},{key:"DATE_MED",get:function(){return $e}},{key:"DATE_MED_WITH_WEEKDAY",get:function(){return Wt}},{key:"DATE_FULL",get:function(){return jt}},{key:"DATE_HUGE",get:function(){return ct}},{key:"TIME_SIMPLE",get:function(){return mn}},{key:"TIME_WITH_SECONDS",get:function(){return Zt}},{key:"TIME_WITH_SHORT_OFFSET",get:function(){return hn}},{key:"TIME_WITH_LONG_OFFSET",get:function(){return en}},{key:"TIME_24_SIMPLE",get:function(){return Rt}},{key:"TIME_24_WITH_SECONDS",get:function(){return Gt}},{key:"TIME_24_WITH_SHORT_OFFSET",get:function(){return tn}},{key:"TIME_24_WITH_LONG_OFFSET",get:function(){return Ft}},{key:"DATETIME_SHORT",get:function(){return vn}},{key:"DATETIME_SHORT_WITH_SECONDS",get:function(){return yn}},{key:"DATETIME_MED",get:function(){return gn}},{key:"DATETIME_MED_WITH_SECONDS",get:function(){return pn}},{key:"DATETIME_MED_WITH_WEEKDAY",get:function(){return Un}},{key:"DATETIME_FULL",get:function(){return _n}},{key:"DATETIME_FULL_WITH_SECONDS",get:function(){return bn}},{key:"DATETIME_HUGE",get:function(){return Tt}},{key:"DATETIME_HUGE_WITH_SECONDS",get:function(){return Ye}}]),r}();function or(r){if(Re.isDateTime(r))return r;if(r&&r.valueOf&&V(r.valueOf()))return Re.fromJSDate(r);if(r&&typeof r=="object")return Re.fromObject(r);throw new ae("Unknown datetime argument: "+r+", of type "+typeof r)}var mu="2.3.0";n.DateTime=Re,n.Duration=Ze,n.FixedOffsetZone=Xe,n.IANAZone=Ue,n.Info=rr,n.Interval=nr,n.InvalidZone=un,n.Settings=re,n.SystemZone=on,n.VERSION=mu,n.Zone=ne});function xr(t){return Ut.IANAZone.isValidZone(t)}function Za(t,n){const a=Ut.DateTime.fromJSDate(t).toLocaleString(Ut.DateTime.TIME_SIMPLE).replace(/\./g,"");try{const l=Ut.DateTime.fromJSDate(t,{zone:n});return!l.isValid&&(l.invalidReason==="unsupported zone"||!n)?a:l.toLocaleString(Ut.DateTime.TIME_SIMPLE).replace(/\./g,"")}catch(l){return a}}function Ga(t){if(!t||!xr(t))return 0;const n=Ut.DateTime.now(),a=Ut.DateTime.now().setZone(t,{keepLocalTime:!0});return n.diff(a).milliseconds}function Ps(t){return!t||!xr(t)?Ut.DateTime.now().offsetNameShort:Ut.DateTime.now().setZone(t).offsetNameShort}function Ba(t,n){return t.getTime()+Ga(n)}const Pr=10;function zs(t,n){t.forEach(a=>{n[a.id]={overlaps:t.filter(l=>a.id!==l.id&&l.when.start_time<a.when.end_time&&l.when.end_time>a.when.start_time),offset:0,leftNeighbour:null}})}function Hs(t,n){const a=n[t.id].overlaps;if(a.length===0){t.relativeOverlapWidth=1,t.relativeOverlapOffset=0;return}const l=n[t.id].leftNeighbour;!!l&&a.filter(d=>t.when.end_time-t.when.start_time>=d.when.end_time-d.when.start_time).length===0?t.relativeOverlapWidth=1-l.relativeOverlapWidth:t.relativeOverlapWidth=Vs(t,a),t.relativeOverlapOffset=n[t.id].offset,t.relativeOverlapWidth=n[t.id].widthOverride?n[t.id].widthOverride:t.relativeOverlapWidth,a.forEach(d=>{!l||d.when.start_time<l.when.end_time?(n[d.id].offset+=t.relativeOverlapWidth,n[d.id].leftNeighbour=t):n[d.id].widthOverride=t.relativeOverlapOffset})}function Vs(t,n){const a=Math.ceil((t.when.end_time-t.when.start_time)/(60*Pr)),l=new Array(a).fill(1);return n.forEach(d=>{let c=0;if(t.when.start_time<=d.when.start_time){const v=Math.ceil((d.when.start_time-t.when.start_time)/(60*Pr));c=Math.min(Math.max(0,v),l.length-1)}let f=l.length-1;if(t.when.end_time>=d.when.end_time){const v=Math.ceil(Math.abs(d.when.end_time-t.when.end_time)/(60*Pr));f=Math.max(c,l.length-v-1)}for(let v=c;v<=f;v++)l[v]++}),1/Math.max(...l)}function Ya(t){return"start_time"in t.when&&"end_time"in t.when?(new Date(t.when.start_time*1e3).getTime()-new Date(new Date(t.when.start_time*1e3).setHours(0,0,0,0)).getTime())/6e4:0}function Ja(t){if(!("start_time"in t.when&&"end_time"in t.when))return 0;let n=new Date(t.when.start_time*1e3).getTime()-new Date(new Date(t.when.start_time*1e3).setHours(0,0,0,0)).getTime();n=n/6e4;let a=new Date(t.when.end_time*1e3).getTime()-new Date(t.when.start_time*1e3).getTime();return a=a/6e4,n+a}var hr=ja(function(t,n){/*! @license DOMPurify 2.3.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.5/LICENSE */(function(a,l){t.exports=l()})(Fs,function(){function a(R){if(Array.isArray(R)){for(var P=0,te=Array(R.length);P<R.length;P++)te[P]=R[P];return te}else return Array.from(R)}var l=Object.hasOwnProperty,d=Object.setPrototypeOf,c=Object.isFrozen,f=Object.getPrototypeOf,v=Object.getOwnPropertyDescriptor,p=Object.freeze,w=Object.seal,O=Object.create,b=typeof Reflect!="undefined"&&Reflect,k=b.apply,L=b.construct;k||(k=function(P,te,U){return P.apply(te,U)}),p||(p=function(P){return P}),w||(w=function(P){return P}),L||(L=function(P,te){return new(Function.prototype.bind.apply(P,[null].concat(a(te))))});var Q=E(Array.prototype.forEach),H=E(Array.prototype.pop),C=E(Array.prototype.push),F=E(String.prototype.toLowerCase),fe=E(String.prototype.match),pe=E(String.prototype.replace),q=E(String.prototype.indexOf),oe=E(String.prototype.trim),ae=E(RegExp.prototype.test),Oe=ee(TypeError);function E(R){return function(P){for(var te=arguments.length,U=Array(te>1?te-1:0),X=1;X<te;X++)U[X-1]=arguments[X];return k(R,P,U)}}function ee(R){return function(){for(var P=arguments.length,te=Array(P),U=0;U<P;U++)te[U]=arguments[U];return L(R,te)}}function A(R,P){d&&d(R,null);for(var te=P.length;te--;){var U=P[te];if(typeof U=="string"){var X=F(U);X!==U&&(c(P)||(P[te]=X),U=X)}R[U]=!0}return R}function me(R){var P=O(null),te=void 0;for(te in R)k(l,R,[te])&&(P[te]=R[te]);return P}function $e(R,P){for(;R!==null;){var te=v(R,P);if(te){if(te.get)return E(te.get);if(typeof te.value=="function")return E(te.value)}R=f(R)}function U(X){return console.warn("fallback value for",X),null}return U}var Wt=p(["a","abbr","acronym","address","area","article","aside","audio","b","bdi","bdo","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","content","data","datalist","dd","decorator","del","details","dfn","dialog","dir","div","dl","dt","element","em","fieldset","figcaption","figure","font","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","img","input","ins","kbd","label","legend","li","main","map","mark","marquee","menu","menuitem","meter","nav","nobr","ol","optgroup","option","output","p","picture","pre","progress","q","rp","rt","ruby","s","samp","section","select","shadow","small","source","spacer","span","strike","strong","style","sub","summary","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","tr","track","tt","u","ul","var","video","wbr"]),jt=p(["svg","a","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","circle","clippath","defs","desc","ellipse","filter","font","g","glyph","glyphref","hkern","image","line","lineargradient","marker","mask","metadata","mpath","path","pattern","polygon","polyline","radialgradient","rect","stop","style","switch","symbol","text","textpath","title","tref","tspan","view","vkern"]),ct=p(["feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence"]),mn=p(["animate","color-profile","cursor","discard","fedropshadow","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignobject","hatch","hatchpath","mesh","meshgradient","meshpatch","meshrow","missing-glyph","script","set","solidcolor","unknown","use"]),Zt=p(["math","menclose","merror","mfenced","mfrac","mglyph","mi","mlabeledtr","mmultiscripts","mn","mo","mover","mpadded","mphantom","mroot","mrow","ms","mspace","msqrt","mstyle","msub","msup","msubsup","mtable","mtd","mtext","mtr","munder","munderover"]),hn=p(["maction","maligngroup","malignmark","mlongdiv","mscarries","mscarry","msgroup","mstack","msline","msrow","semantics","annotation","annotation-xml","mprescripts","none"]),en=p(["#text"]),Rt=p(["accept","action","align","alt","autocapitalize","autocomplete","autopictureinpicture","autoplay","background","bgcolor","border","capture","cellpadding","cellspacing","checked","cite","class","clear","color","cols","colspan","controls","controlslist","coords","crossorigin","datetime","decoding","default","dir","disabled","disablepictureinpicture","disableremoteplayback","download","draggable","enctype","enterkeyhint","face","for","headers","height","hidden","high","href","hreflang","id","inputmode","integrity","ismap","kind","label","lang","list","loading","loop","low","max","maxlength","media","method","min","minlength","multiple","muted","name","nonce","noshade","novalidate","nowrap","open","optimum","pattern","placeholder","playsinline","poster","preload","pubdate","radiogroup","readonly","rel","required","rev","reversed","role","rows","rowspan","spellcheck","scope","selected","shape","size","sizes","span","srclang","start","src","srcset","step","style","summary","tabindex","title","translate","type","usemap","valign","value","width","xmlns","slot"]),Gt=p(["accent-height","accumulate","additive","alignment-baseline","ascent","attributename","attributetype","azimuth","basefrequency","baseline-shift","begin","bias","by","class","clip","clippathunits","clip-path","clip-rule","color","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cx","cy","d","dx","dy","diffuseconstant","direction","display","divisor","dur","edgemode","elevation","end","fill","fill-opacity","fill-rule","filter","filterunits","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","fx","fy","g1","g2","glyph-name","glyphref","gradientunits","gradienttransform","height","href","id","image-rendering","in","in2","k","k1","k2","k3","k4","kerning","keypoints","keysplines","keytimes","lang","lengthadjust","letter-spacing","kernelmatrix","kernelunitlength","lighting-color","local","marker-end","marker-mid","marker-start","markerheight","markerunits","markerwidth","maskcontentunits","maskunits","max","mask","media","method","mode","min","name","numoctaves","offset","operator","opacity","order","orient","orientation","origin","overflow","paint-order","path","pathlength","patterncontentunits","patterntransform","patternunits","points","preservealpha","preserveaspectratio","primitiveunits","r","rx","ry","radius","refx","refy","repeatcount","repeatdur","restart","result","rotate","scale","seed","shape-rendering","specularconstant","specularexponent","spreadmethod","startoffset","stddeviation","stitchtiles","stop-color","stop-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke","stroke-width","style","surfacescale","systemlanguage","tabindex","targetx","targety","transform","transform-origin","text-anchor","text-decoration","text-rendering","textlength","type","u1","u2","unicode","values","viewbox","visibility","version","vert-adv-y","vert-origin-x","vert-origin-y","width","word-spacing","wrap","writing-mode","xchannelselector","ychannelselector","x","x1","x2","xmlns","y","y1","y2","z","zoomandpan"]),tn=p(["accent","accentunder","align","bevelled","close","columnsalign","columnlines","columnspan","denomalign","depth","dir","display","displaystyle","encoding","fence","frame","height","href","id","largeop","length","linethickness","lspace","lquote","mathbackground","mathcolor","mathsize","mathvariant","maxsize","minsize","movablelimits","notation","numalign","open","rowalign","rowlines","rowspacing","rowspan","rspace","rquote","scriptlevel","scriptminsize","scriptsizemultiplier","selection","separator","separators","stretchy","subscriptshift","supscriptshift","symmetric","voffset","width","xmlns"]),Ft=p(["xlink:href","xml:id","xlink:title","xml:space","xmlns:xlink"]),vn=w(/\{\{[\s\S]*|[\s\S]*\}\}/gm),yn=w(/<%[\s\S]*|[\s\S]*%>/gm),gn=w(/^data-[\-\w.\u00B7-\uFFFF]/),pn=w(/^aria-[\-\w]+$/),Un=w(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i),_n=w(/^(?:\w+script|data):/i),bn=w(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g),Tt=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(R){return typeof R}:function(R){return R&&typeof Symbol=="function"&&R.constructor===Symbol&&R!==Symbol.prototype?"symbol":typeof R};function Ye(R){if(Array.isArray(R)){for(var P=0,te=Array(R.length);P<R.length;P++)te[P]=R[P];return te}else return Array.from(R)}var ie=function(){return typeof window=="undefined"?null:window},V=function(P,te){if((typeof P=="undefined"?"undefined":Tt(P))!=="object"||typeof P.createPolicy!="function")return null;var U=null,X="data-tt-policy-suffix";te.currentScript&&te.currentScript.hasAttribute(X)&&(U=te.currentScript.getAttribute(X));var he="dompurify"+(U?"#"+U:"");try{return P.createPolicy(he,{createHTML:function(Fe){return Fe}})}catch(ge){return console.warn("TrustedTypes policy "+he+" could not be created."),null}};function St(){var R=arguments.length>0&&arguments[0]!==void 0?arguments[0]:ie(),P=function(_){return St(_)};if(P.version="2.3.5",P.removed=[],!R||!R.document||R.document.nodeType!==9)return P.isSupported=!1,P;var te=R.document,U=R.document,X=R.DocumentFragment,he=R.HTMLTemplateElement,ge=R.Node,Fe=R.Element,Te=R.NodeFilter,_e=R.NamedNodeMap,ft=_e===void 0?R.NamedNodeMap||R.MozNamedAttrMap:_e,wn=R.HTMLFormElement,Ot=R.DOMParser,mt=R.trustedTypes,De=Fe.prototype,xt=$e(De,"cloneNode"),Bt=$e(De,"nextSibling"),nn=$e(De,"childNodes"),et=$e(De,"parentNode");if(typeof he=="function"){var ot=U.createElement("template");ot.content&&ot.content.ownerDocument&&(U=ot.content.ownerDocument)}var je=V(mt,te),ht=je?je.createHTML(""):"",vt=U,xe=vt.implementation,yt=vt.createNodeIterator,kt=vt.createDocumentFragment,Tn=vt.getElementsByTagName,Ie=te.importNode,Et={};try{Et=me(U).documentMode?U.documentMode:{}}catch(W){}var Je={};P.isSupported=typeof et=="function"&&xe&&typeof xe.createHTMLDocument!="undefined"&&Et!==9;var Yt=vn,Jt=yn,jn=gn,Ve=pn,tt=_n,rn=bn,Sn=Un,ke=null,an=A({},[].concat(Ye(Wt),Ye(jt),Ye(ct),Ye(Zt),Ye(en))),Ne=null,Pt=A({},[].concat(Ye(Rt),Ye(Gt),Ye(tn),Ye(Ft))),se=Object.seal(Object.create(null,{tagNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},attributeNameCheck:{writable:!0,configurable:!1,enumerable:!0,value:null},allowCustomizedBuiltInElements:{writable:!0,configurable:!1,enumerable:!0,value:!1}})),Me=null,On=null,kn=!0,En=!0,Ke=!1,Ce=!1,ne=!1,qe=!1,on=!1,Qe=!1,Dt=!1,sn=!1,Dn=!0,In=!0,qt=!1,st={},Ue=null,ln=A({},["annotation-xml","audio","colgroup","desc","foreignobject","head","iframe","math","mi","mn","mo","ms","mtext","noembed","noframes","noscript","plaintext","script","style","svg","template","thead","title","video","xmp"]),Xe=null,un=A({},["audio","video","img","source","image","track"]),nt=null,Nn=A({},["alt","class","for","id","label","name","pattern","placeholder","role","summary","title","value","style","xmlns"]),dn="http://www.w3.org/1998/Math/MathML",y="http://www.w3.org/2000/svg",S="http://www.w3.org/1999/xhtml",Y=S,le=!1,re=void 0,rt=["application/xhtml+xml","text/html"],gt="text/html",pt=void 0,zt=null,Qt=U.createElement("form"),at=function(_){return _ instanceof RegExp||_ instanceof Function},It=function(_){zt&&zt===_||((!_||(typeof _=="undefined"?"undefined":Tt(_))!=="object")&&(_={}),_=me(_),ke="ALLOWED_TAGS"in _?A({},_.ALLOWED_TAGS):an,Ne="ALLOWED_ATTR"in _?A({},_.ALLOWED_ATTR):Pt,nt="ADD_URI_SAFE_ATTR"in _?A(me(Nn),_.ADD_URI_SAFE_ATTR):Nn,Xe="ADD_DATA_URI_TAGS"in _?A(me(un),_.ADD_DATA_URI_TAGS):un,Ue="FORBID_CONTENTS"in _?A({},_.FORBID_CONTENTS):ln,Me="FORBID_TAGS"in _?A({},_.FORBID_TAGS):{},On="FORBID_ATTR"in _?A({},_.FORBID_ATTR):{},st="USE_PROFILES"in _?_.USE_PROFILES:!1,kn=_.ALLOW_ARIA_ATTR!==!1,En=_.ALLOW_DATA_ATTR!==!1,Ke=_.ALLOW_UNKNOWN_PROTOCOLS||!1,Ce=_.SAFE_FOR_TEMPLATES||!1,ne=_.WHOLE_DOCUMENT||!1,Qe=_.RETURN_DOM||!1,Dt=_.RETURN_DOM_FRAGMENT||!1,sn=_.RETURN_TRUSTED_TYPE||!1,on=_.FORCE_BODY||!1,Dn=_.SANITIZE_DOM!==!1,In=_.KEEP_CONTENT!==!1,qt=_.IN_PLACE||!1,Sn=_.ALLOWED_URI_REGEXP||Sn,Y=_.NAMESPACE||S,_.CUSTOM_ELEMENT_HANDLING&&at(_.CUSTOM_ELEMENT_HANDLING.tagNameCheck)&&(se.tagNameCheck=_.CUSTOM_ELEMENT_HANDLING.tagNameCheck),_.CUSTOM_ELEMENT_HANDLING&&at(_.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)&&(se.attributeNameCheck=_.CUSTOM_ELEMENT_HANDLING.attributeNameCheck),_.CUSTOM_ELEMENT_HANDLING&&typeof _.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements=="boolean"&&(se.allowCustomizedBuiltInElements=_.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements),re=rt.indexOf(_.PARSER_MEDIA_TYPE)===-1?re=gt:re=_.PARSER_MEDIA_TYPE,pt=re==="application/xhtml+xml"?function(M){return M}:F,Ce&&(En=!1),Dt&&(Qe=!0),st&&(ke=A({},[].concat(Ye(en))),Ne=[],st.html===!0&&(A(ke,Wt),A(Ne,Rt)),st.svg===!0&&(A(ke,jt),A(Ne,Gt),A(Ne,Ft)),st.svgFilters===!0&&(A(ke,ct),A(Ne,Gt),A(Ne,Ft)),st.mathMl===!0&&(A(ke,Zt),A(Ne,tn),A(Ne,Ft))),_.ADD_TAGS&&(ke===an&&(ke=me(ke)),A(ke,_.ADD_TAGS)),_.ADD_ATTR&&(Ne===Pt&&(Ne=me(Ne)),A(Ne,_.ADD_ATTR)),_.ADD_URI_SAFE_ATTR&&A(nt,_.ADD_URI_SAFE_ATTR),_.FORBID_CONTENTS&&(Ue===ln&&(Ue=me(Ue)),A(Ue,_.FORBID_CONTENTS)),In&&(ke["#text"]=!0),ne&&A(ke,["html","head","body"]),ke.table&&(A(ke,["tbody"]),delete Me.tbody),p&&p(_),zt=_)},yr=A({},["mi","mo","mn","ms","mtext"]),Zn=A({},["foreignobject","desc","title","annotation-xml"]),Gn=A({},jt);A(Gn,ct),A(Gn,mn);var Xt=A({},Zt);A(Xt,hn);var Vr=function(_){var M=et(_);(!M||!M.tagName)&&(M={namespaceURI:S,tagName:"template"});var x=F(_.tagName),ve=F(M.tagName);if(_.namespaceURI===y)return M.namespaceURI===S?x==="svg":M.namespaceURI===dn?x==="svg"&&(ve==="annotation-xml"||yr[ve]):Boolean(Gn[x]);if(_.namespaceURI===dn)return M.namespaceURI===S?x==="math":M.namespaceURI===y?x==="math"&&Zn[ve]:Boolean(Xt[x]);if(_.namespaceURI===S){if(M.namespaceURI===y&&!Zn[ve]||M.namespaceURI===dn&&!yr[ve])return!1;var Le=A({},["title","style","font","a","script"]);return!Xt[x]&&(Le[x]||!Gn[x])}return!1},Nt=function(_){C(P.removed,{element:_});try{_.parentNode.removeChild(_)}catch(M){try{_.outerHTML=ht}catch(x){_.remove()}}},gr=function(_,M){try{C(P.removed,{attribute:M.getAttributeNode(_),from:M})}catch(x){C(P.removed,{attribute:null,from:M})}if(M.removeAttribute(_),_==="is"&&!Ne[_])if(Qe||Dt)try{Nt(M)}catch(x){}else try{M.setAttribute(_,"")}catch(x){}},pr=function(_){var M=void 0,x=void 0;if(on)_="<remove></remove>"+_;else{var ve=fe(_,/^[\r\n\t ]+/);x=ve&&ve[0]}re==="application/xhtml+xml"&&(_='<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>'+_+"</body></html>");var Le=je?je.createHTML(_):_;if(Y===S)try{M=new Ot().parseFromString(Le,re)}catch(Pe){}if(!M||!M.documentElement){M=xe.createDocument(Y,"template",null);try{M.documentElement.innerHTML=le?"":Le}catch(Pe){}}var We=M.body||M.documentElement;return _&&x&&We.insertBefore(U.createTextNode(x),We.childNodes[0]||null),Y===S?Tn.call(M,ne?"html":"body")[0]:ne?M.documentElement:We},_r=function(_){return yt.call(_.ownerDocument||_,_,Te.SHOW_ELEMENT|Te.SHOW_COMMENT|Te.SHOW_TEXT,null,!1)},Bn=function(_){return _ instanceof wn&&(typeof _.nodeName!="string"||typeof _.textContent!="string"||typeof _.removeChild!="function"||!(_.attributes instanceof ft)||typeof _.removeAttribute!="function"||typeof _.setAttribute!="function"||typeof _.namespaceURI!="string"||typeof _.insertBefore!="function")},Mn=function(_){return(typeof ge=="undefined"?"undefined":Tt(ge))==="object"?_ instanceof ge:_&&(typeof _=="undefined"?"undefined":Tt(_))==="object"&&typeof _.nodeType=="number"&&typeof _.nodeName=="string"},Mt=function(_,M,x){!Je[_]||Q(Je[_],function(ve){ve.call(P,M,x,zt)})},br=function(_){var M=void 0;if(Mt("beforeSanitizeElements",_,null),Bn(_)||fe(_.nodeName,/[\u0080-\uFFFF]/))return Nt(_),!0;var x=pt(_.nodeName);if(Mt("uponSanitizeElement",_,{tagName:x,allowedTags:ke}),!Mn(_.firstElementChild)&&(!Mn(_.content)||!Mn(_.content.firstElementChild))&&ae(/<[/\w]/g,_.innerHTML)&&ae(/<[/\w]/g,_.textContent)||x==="select"&&ae(/<template/i,_.innerHTML))return Nt(_),!0;if(!ke[x]||Me[x]){if(In&&!Ue[x]){var ve=et(_)||_.parentNode,Le=nn(_)||_.childNodes;if(Le&&ve)for(var We=Le.length,Pe=We-1;Pe>=0;--Pe)ve.insertBefore(xt(Le[Pe],!0),Bt(_))}return!Me[x]&&Ae(x)&&(se.tagNameCheck instanceof RegExp&&ae(se.tagNameCheck,x)||se.tagNameCheck instanceof Function&&se.tagNameCheck(x))?!1:(Nt(_),!0)}return _ instanceof Fe&&!Vr(_)||(x==="noscript"||x==="noembed")&&ae(/<\/no(script|embed)/i,_.innerHTML)?(Nt(_),!0):(Ce&&_.nodeType===3&&(M=_.textContent,M=pe(M,Yt," "),M=pe(M,Jt," "),_.textContent!==M&&(C(P.removed,{element:_.cloneNode()}),_.textContent=M)),Mt("afterSanitizeElements",_,null),!1)},wr=function(_,M,x){if(Dn&&(M==="id"||M==="name")&&(x in U||x in Qt))return!1;if(!(En&&!On[M]&&ae(jn,M))){if(!(kn&&ae(Ve,M))){if(!Ne[M]||On[M]){if(!(Ae(_)&&(se.tagNameCheck instanceof RegExp&&ae(se.tagNameCheck,_)||se.tagNameCheck instanceof Function&&se.tagNameCheck(_))&&(se.attributeNameCheck instanceof RegExp&&ae(se.attributeNameCheck,M)||se.attributeNameCheck instanceof Function&&se.attributeNameCheck(M))||M==="is"&&se.allowCustomizedBuiltInElements&&(se.tagNameCheck instanceof RegExp&&ae(se.tagNameCheck,x)||se.tagNameCheck instanceof Function&&se.tagNameCheck(x))))return!1}else if(!nt[M]){if(!ae(Sn,pe(x,rn,""))){if(!((M==="src"||M==="xlink:href"||M==="href")&&_!=="script"&&q(x,"data:")===0&&Xe[_])){if(!(Ke&&!ae(tt,pe(x,rn,"")))){if(x)return!1}}}}}}return!0},Ae=function(_){return _.indexOf("-")>0},Kt=function(_){var M=void 0,x=void 0,ve=void 0,Le=void 0;Mt("beforeSanitizeAttributes",_,null);var We=_.attributes;if(!!We){var Pe={attrName:"",attrValue:"",keepAttr:!0,allowedAttributes:Ne};for(Le=We.length;Le--;){M=We[Le];var Yn=M,it=Yn.name,Tr=Yn.namespaceURI;if(x=oe(M.value),ve=pt(it),Pe.attrName=ve,Pe.attrValue=x,Pe.keepAttr=!0,Pe.forceKeepAttr=void 0,Mt("uponSanitizeAttribute",_,Pe),x=Pe.attrValue,!Pe.forceKeepAttr&&(gr(it,_),!!Pe.keepAttr)){if(ae(/\/>/i,x)){gr(it,_);continue}Ce&&(x=pe(x,Yt," "),x=pe(x,Jt," "));var Ur=pt(_.nodeName);if(!!wr(Ur,ve,x))try{Tr?_.setAttributeNS(Tr,it,x):_.setAttribute(it,x),H(P.removed)}catch(Wr){}}}Mt("afterSanitizeAttributes",_,null)}},$t=function W(_){var M=void 0,x=_r(_);for(Mt("beforeSanitizeShadowDOM",_,null);M=x.nextNode();)Mt("uponSanitizeShadowNode",M,null),!br(M)&&(M.content instanceof X&&W(M.content),Kt(M));Mt("afterSanitizeShadowDOM",_,null)};return P.sanitize=function(W,_){var M=void 0,x=void 0,ve=void 0,Le=void 0,We=void 0;if(le=!W,le&&(W="<!-->"),typeof W!="string"&&!Mn(W)){if(typeof W.toString!="function")throw Oe("toString is not a function");if(W=W.toString(),typeof W!="string")throw Oe("dirty is not a string, aborting")}if(!P.isSupported){if(Tt(R.toStaticHTML)==="object"||typeof R.toStaticHTML=="function"){if(typeof W=="string")return R.toStaticHTML(W);if(Mn(W))return R.toStaticHTML(W.outerHTML)}return W}if(qe||It(_),P.removed=[],typeof W=="string"&&(qt=!1),qt){if(W.nodeName){var Pe=pt(W.nodeName);if(!ke[Pe]||Me[Pe])throw Oe("root node is forbidden and cannot be sanitized in-place")}}else if(W instanceof ge)M=pr("<!---->"),x=M.ownerDocument.importNode(W,!0),x.nodeType===1&&x.nodeName==="BODY"||x.nodeName==="HTML"?M=x:M.appendChild(x);else{if(!Qe&&!Ce&&!ne&&W.indexOf("<")===-1)return je&&sn?je.createHTML(W):W;if(M=pr(W),!M)return Qe?null:sn?ht:""}M&&on&&Nt(M.firstChild);for(var Yn=_r(qt?W:M);ve=Yn.nextNode();)ve.nodeType===3&&ve===Le||br(ve)||(ve.content instanceof X&&$t(ve.content),Kt(ve),Le=ve);if(Le=null,qt)return W;if(Qe){if(Dt)for(We=kt.call(M.ownerDocument);M.firstChild;)We.appendChild(M.firstChild);else We=M;return Ne.shadowroot&&(We=Ie.call(te,We,!0)),We}var it=ne?M.outerHTML:M.innerHTML;return Ce&&(it=pe(it,Yt," "),it=pe(it,Jt," ")),je&&sn?je.createHTML(it):it},P.setConfig=function(W){It(W),qe=!0},P.clearConfig=function(){zt=null,qe=!1},P.isValidAttribute=function(W,_,M){zt||It({});var x=pt(W),ve=pt(_);return wr(x,ve,M)},P.addHook=function(W,_){typeof _=="function"&&(Je[W]=Je[W]||[],C(Je[W],_))},P.removeHook=function(W){Je[W]&&H(Je[W])},P.removeHooks=function(W){Je[W]&&(Je[W]=[])},P.removeAllHooks=function(){Je={}},P}var Wn=St();return Wn})}),zr=new Date,Hr=new Date;function qa(t,n,a,l){function d(c){return t(c=arguments.length===0?new Date:new Date(+c)),c}return d.floor=function(c){return t(c=new Date(+c)),c},d.ceil=function(c){return t(c=new Date(c-1)),n(c,1),t(c),c},d.round=function(c){var f=d(c),v=d.ceil(c);return c-f<v-c?f:v},d.offset=function(c,f){return n(c=new Date(+c),f==null?1:Math.floor(f)),c},d.range=function(c,f,v){var p=[],w;if(c=d.ceil(c),v=v==null?1:Math.floor(v),!(c<f)||!(v>0))return p;do p.push(w=new Date(+c)),n(c,v),t(c);while(w<c&&c<f);return p},d.filter=function(c){return qa(function(f){if(f>=f)for(;t(f),!c(f);)f.setTime(f-1)},function(f,v){if(f>=f)if(v<0)for(;++v<=0;)for(;n(f,-1),!c(f););else for(;--v>=0;)for(;n(f,1),!c(f););})},a&&(d.count=function(c,f){return zr.setTime(+c),Hr.setTime(+f),t(zr),t(Hr),Math.floor(a(zr,Hr))},d.every=function(c){return c=Math.floor(c),!isFinite(c)||!(c>0)?null:c>1?d.filter(l?function(f){return l(f)%c==0}:function(f){return d.count(0,f)%c==0}):d}),d}const Qa=1e3*60,Us=Qa*60*24;var vr=qa(t=>t.setHours(0,0,0,0),(t,n)=>t.setDate(t.getDate()+n),(t,n)=>(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Qa)/Us,t=>t.getDate()-1);function Xa(t,n,a){const l=t.slice();return l[117]=n[a],l}function Ka(t,n,a){const l=t.slice();l[120]=n[a];const d=l[120][0];l[121]=d;const c=l[120][1];return l[122]=c,l}function $a(t,n,a){const l=t.slice();return l[125]=n[a],l}function ei(t,n,a){const l=t.slice();return l[125]=n[a],l}function ti(t,n,a){const l=t.slice();return l[117]=n[a],l}function ni(t,n,a){const l=t.slice();l[120]=n[a];const d=l[120][0];l[121]=d;const c=l[120][1];return l[122]=c,l}function ri(t){let n;return{c(){n=J("link"),z(n,"rel","stylesheet"),z(n,"href",t[12])},m(a,l){G(a,n,l)},p(a,l){l[0]&4096&&z(n,"href",a[12])},d(a){a&&B(n)}}}function Ws(t){return{c:be,m:be,p:be,d:be}}function js(t){let n,a,l,d,c,f,v,p,w,O,b,k,L,Q,H,C,F=t[1].header_type!=="none"&&ai(t),fe=!t[1].hide_all_day_events&&li(t),pe=t[21],q=[];for(let ee=0;ee<pe.length;ee+=1)q[ee]=vi(ei(t,pe,ee));let oe=(t[116].length||!t[1].show_no_events_message&&!t[24])&&yi(t);function ae(ee,A){if(ee[116].length)return qs;if(ee[1].show_no_events_message&&!ee[24]&&ee[10][ee[4]])return Js}let Oe=ae(t),E=Oe&&Oe(t);return{c(){F&&F.c(),n=we(),a=J("div"),fe&&fe.c(),l=we(),d=J("div"),c=J("div"),f=J("span"),v=Se(t[13]),p=we(),w=J("div");for(let ee=0;ee<q.length;ee+=1)q[ee].c();O=we(),b=J("ul"),oe&&oe.c(),k=we(),E&&E.c(),z(a,"class","all-day"),z(c,"class","offset"),z(w,"class","ticks"),z(b,"class",L="events "+t[1].theme),Be(b,"transform","translate("+t[23].x+"px,0px)"),cr(()=>t[94].call(b)),Ee(b,"diff-by-calendar",t[1].color_by==="calendar"),Ee(b,"diff-by-event",t[1].color_by==="event"),Ee(b,"overflowing",t[5]),Ee(b,"scrolling",t[17]),z(d,"class","timespan"),Ee(d,"condensed",t[9]),Ee(d,"hide-ticks",t[1].hide_ticks)},m(ee,A){F&&F.m(ee,A),G(ee,n,A),G(ee,a,A),fe&&fe.m(a,null),G(ee,l,A),G(ee,d,A),j(d,c),j(c,f),j(f,v),j(d,p),j(d,w);for(let me=0;me<q.length;me+=1)q[me].m(w,null);j(d,O),j(d,b),oe&&oe.m(b,null),j(b,k),E&&E.m(b,null),t[93](b),Q=bo(b,t[94].bind(b)),H||(C=[ze(b,"wheel",function(){lr(t[1].prevent_zoom||t[9]?Mi:t[28])&&(t[1].prevent_zoom||t[9]?Mi:t[28]).apply(this,arguments)}),ze(b,"pointerdown",t[33]),ze(b,"pointermove",t[34]),ze(b,"pointerup",t[35]),ze(b,"mouseleave",t[35]),ze(d,"selectstart",t[95])],H=!0)},p(ee,A){if(t=ee,t[1].header_type!=="none"?F?F.p(t,A):(F=ai(t),F.c(),F.m(n.parentNode,n)):F&&(F.d(1),F=null),t[1].hide_all_day_events?fe&&(fe.d(1),fe=null):fe?fe.p(t,A):(fe=li(t),fe.c(),fe.m(a,null)),A[0]&8192&&He(v,t[13]),A[0]&2097152){pe=t[21];let me;for(me=0;me<pe.length;me+=1){const $e=ei(t,pe,me);q[me]?q[me].p($e,A):(q[me]=vi($e),q[me].c(),q[me].m(w,null))}for(;me<q.length;me+=1)q[me].d(1);q.length=pe.length}t[116].length||!t[1].show_no_events_message&&!t[24]?oe?oe.p(t,A):(oe=yi(t),oe.c(),oe.m(b,k)):oe&&(oe.d(1),oe=null),Oe===(Oe=ae(t))&&E?E.p(t,A):(E&&E.d(1),E=Oe&&Oe(t),E&&(E.c(),E.m(b,null))),A[0]&2&&L!==(L="events "+t[1].theme)&&z(b,"class",L),A[0]&8388608&&Be(b,"transform","translate("+t[23].x+"px,0px)"),A[0]&2&&Ee(b,"diff-by-calendar",t[1].color_by==="calendar"),A[0]&2&&Ee(b,"diff-by-event",t[1].color_by==="event"),A[0]&34&&Ee(b,"overflowing",t[5]),A[0]&131074&&Ee(b,"scrolling",t[17]),A[0]&512&&Ee(d,"condensed",t[9]),A[0]&2&&Ee(d,"hide-ticks",t[1].hide_ticks)},d(ee){F&&F.d(ee),ee&&B(n),ee&&B(a),fe&&fe.d(),ee&&B(l),ee&&B(d),xn(q,ee),oe&&oe.d(),E&&E.d(),t[93](null),Q(),H=!1,wt(C)}}}function ai(t){var fe,pe;let n,a,l,d,c,f=((fe=t[2])==null?void 0:fe.toLocaleString("default",{weekday:t[9]?"short":"long"}))+"",v,p,w,O=((pe=t[2])==null?void 0:pe.toLocaleString("default",{day:"numeric"}))+"",b,k,L,Q,H=t[1].header_type==="full"&&ii(t),C=t[1].allow_date_change&&oi(t),F=t[1].allow_date_change&&si(t);return{c(){n=J("header"),H&&H.c(),a=we(),l=J("div"),C&&C.c(),d=we(),c=J("h2"),v=Se(f),p=we(),w=J("span"),b=Se(O),k=we(),F&&F.c(),z(w,"class","date"),z(l,"class","day"),Ee(l,"allow_date_change",t[1].allow_date_change)},m(q,oe){G(q,n,oe),H&&H.m(n,null),j(n,a),j(n,l),C&&C.m(l,null),j(l,d),j(l,c),j(c,v),j(c,p),j(c,w),j(w,b),j(l,k),F&&F.m(l,null),L||(Q=[ze(n,"pointerdown",t[30]),ze(n,"pointermove",t[31]),ze(n,"pointerup",t[32]),ze(n,"mouseleave",t[32])],L=!0)},p(q,oe){var ae,Oe;q[1].header_type==="full"?H?H.p(q,oe):(H=ii(q),H.c(),H.m(n,a)):H&&(H.d(1),H=null),q[1].allow_date_change?C?C.p(q,oe):(C=oi(q),C.c(),C.m(l,d)):C&&(C.d(1),C=null),oe[0]&516&&f!==(f=((ae=q[2])==null?void 0:ae.toLocaleString("default",{weekday:q[9]?"short":"long"}))+"")&&He(v,f),oe[0]&4&&O!==(O=((Oe=q[2])==null?void 0:Oe.toLocaleString("default",{day:"numeric"}))+"")&&He(b,O),q[1].allow_date_change?F?F.p(q,oe):(F=si(q),F.c(),F.m(l,null)):F&&(F.d(1),F=null),oe[0]&2&&Ee(l,"allow_date_change",q[1].allow_date_change)},d(q){q&&B(n),H&&H.d(),C&&C.d(),F&&F.d(),L=!1,wt(Q)}}}function ii(t){var w,O;let n,a,l=((w=t[2])==null?void 0:w.toLocaleString("default",{month:"long"}))+"",d,c,f,v=((O=t[2])==null?void 0:O.toLocaleString("default",{year:"numeric"}))+"",p;return{c(){n=J("div"),a=J("h1"),d=Se(l),c=we(),f=J("span"),p=Se(v),z(f,"class","year"),z(n,"class","month")},m(b,k){G(b,n,k),j(n,a),j(a,d),j(a,c),j(a,f),j(f,p)},p(b,k){var L,Q;k[0]&4&&l!==(l=((L=b[2])==null?void 0:L.toLocaleString("default",{month:"long"}))+"")&&He(d,l),k[0]&4&&v!==(v=((Q=b[2])==null?void 0:Q.toLocaleString("default",{year:"numeric"}))+"")&&He(p,v)},d(b){b&&B(n)}}}function oi(t){let n,a,l,d,c;return{c(){n=J("button"),a=Pn("svg"),l=Pn("path"),z(l,"d","M0.371272 12.413L10.6278 22.4264C11.1225 22.9093 11.9245 22.9093 12.4191 22.4264L13.6153 21.2585C14.1092 20.7764 14.1101 19.995 13.6175 19.5117L5.48895 11.5385L13.6175 3.56541C14.1101 3.08216 14.1092 2.30079 13.6153 1.81868L12.4191 0.650778C11.9244 0.167839 11.1224 0.167839 10.6278 0.650778L0.371272 10.6641C-0.123338 11.1471 -0.123338 11.93 0.371272 12.413Z"),z(a,"width","14"),z(a,"height","23"),z(a,"viewBox","0 0 14 23"),z(a,"xmlns","http://www.w3.org/2000/svg"),n.disabled=t[14],z(n,"class","prev change-date")},m(f,v){G(f,n,v),j(n,a),j(a,l),d||(c=ze(n,"click",t[27]),d=!0)},p(f,v){v[0]&16384&&(n.disabled=f[14])},d(f){f&&B(n),d=!1,c()}}}function si(t){let n,a,l,d,c;return{c(){n=J("button"),a=Pn("svg"),l=Pn("path"),z(l,"d","M13.6153 10.6642L3.35873 0.650778C2.86407 0.16784 2.0621 0.16784 1.56749 0.650778L0.371229 1.81868C-0.12259 2.30079 -0.123539 3.08216 0.369118 3.56541L8.49763 11.5386L0.369118 19.5117C-0.123539 19.995 -0.12259 20.7764 0.371229 21.2585L1.56749 22.4264C2.06215 22.9093 2.86412 22.9093 3.35873 22.4264L13.6153 12.413C14.1099 11.9301 14.1099 11.1471 13.6153 10.6642Z"),z(a,"width","14"),z(a,"height","23"),z(a,"viewBox","0 0 14 23"),z(a,"xmlns","http://www.w3.org/2000/svg"),n.disabled=t[15],z(n,"class","next change-date")},m(f,v){G(f,n,v),j(n,a),j(a,l),d||(c=ze(n,"click",t[26]),d=!0)},p(f,v){v[0]&32768&&(n.disabled=f[15])},d(f){f&&B(n),d=!1,c()}}}function li(t){let n,a=Array.isArray(t[22]),l,d=a&&ui(t);return{c(){n=J("ul"),d&&d.c(),z(n,"class",l="events "+t[1].theme)},m(c,f){G(c,n,f),d&&d.m(n,null)},p(c,f){f[0]&4194304&&(a=Array.isArray(c[22])),a?d?d.p(c,f):(d=ui(c),d.c(),d.m(n,null)):d&&(d.d(1),d=null),f[0]&2&&l!==(l="events "+c[1].theme)&&z(n,"class",l)},d(c){c&&B(n),d&&d.d()}}}function ui(t){let n,a=t[22],l=[];for(let d=0;d<a.length;d+=1)l[d]=hi(ti(t,a,d));return{c(){for(let d=0;d<l.length;d+=1)l[d].c();n=zn()},m(d,c){for(let f=0;f<l.length;f+=1)l[f].m(d,c);G(d,n,c)},p(d,c){if(c[0]&541067274){a=d[22];let f;for(f=0;f<a.length;f+=1){const v=ti(d,a,f);l[f]?l[f].p(v,c):(l[f]=hi(v),l[f].c(),l[f].m(n.parentNode,n))}for(;f<l.length;f+=1)l[f].d(1);l.length=a.length}},d(d){xn(l,d),d&&B(n)}}}function Zs(t){let n;return{c(){n=J("h2"),n.textContent="Busy"},m(a,l){G(a,n,l)},p:be,d(a){a&&B(n)}}}function Gs(t){let n,a=t[117].title+"",l;return{c(){n=J("h2"),l=Se(a)},m(d,c){G(d,n,c),j(n,l)},p(d,c){c[0]&4194304&&a!==(a=d[117].title+"")&&He(l,a)},d(d){d&&B(n)}}}function di(t){var w,O;let n,a,l=hr.sanitize((w=t[117].description)!=null?w:"")+"",d,c=t[1].display_metadata&&t[117].metadata&&((O=Object.keys(t[117].metadata))==null?void 0:O.length),f,v=t[117].location&&ci(t),p=c&&fi(t);return{c(){v&&v.c(),n=we(),a=J("p"),d=we(),p&&p.c(),f=zn()},m(b,k){v&&v.m(b,k),G(b,n,k),G(b,a,k),a.innerHTML=l,G(b,d,k),p&&p.m(b,k),G(b,f,k)},p(b,k){var L,Q;b[117].location?v?v.p(b,k):(v=ci(b),v.c(),v.m(n.parentNode,n)):v&&(v.d(1),v=null),k[0]&4194304&&l!==(l=hr.sanitize((L=b[117].description)!=null?L:"")+"")&&(a.innerHTML=l),k[0]&4194306&&(c=b[1].display_metadata&&b[117].metadata&&((Q=Object.keys(b[117].metadata))==null?void 0:Q.length)),c?p?p.p(b,k):(p=fi(b),p.c(),p.m(f.parentNode,f)):p&&(p.d(1),p=null)},d(b){v&&v.d(b),b&&B(n),b&&B(a),b&&B(d),p&&p.d(b),b&&B(f)}}}function ci(t){let n;function a(c,f){return c[117].locationString?Ys:Bs}let l=a(t),d=l(t);return{c(){n=J("span"),d.c(),z(n,"class","location")},m(c,f){G(c,n,f),d.m(n,null)},p(c,f){l===(l=a(c))&&d?d.p(c,f):(d.d(1),d=l(c),d&&(d.c(),d.m(n,null)))},d(c){c&&B(n),d.d()}}}function Bs(t){let n=t[117].location+"",a;return{c(){a=Se(n)},m(l,d){G(l,a,d)},p(l,d){d[0]&4194304&&n!==(n=l[117].location+"")&&He(a,n)},d(l){l&&B(a)}}}function Ys(t){let n,a=t[117].locationString+"",l,d;return{c(){n=J("a"),l=Se(a),z(n,"href",d=t[117].location),z(n,"target","_blank")},m(c,f){G(c,n,f),j(n,l)},p(c,f){f[0]&4194304&&a!==(a=c[117].locationString+"")&&He(l,a),f[0]&4194304&&d!==(d=c[117].location)&&z(n,"href",d)},d(c){c&&B(n)}}}function fi(t){let n,a=Object.entries(t[117].metadata),l=[];for(let d=0;d<a.length;d+=1)l[d]=mi(ni(t,a,d));return{c(){n=J("ul");for(let d=0;d<l.length;d+=1)l[d].c();z(n,"class","metadata")},m(d,c){G(d,n,c);for(let f=0;f<l.length;f+=1)l[f].m(n,null)},p(d,c){if(c[0]&4194304){a=Object.entries(d[117].metadata);let f;for(f=0;f<a.length;f+=1){const v=ni(d,a,f);l[f]?l[f].p(v,c):(l[f]=mi(v),l[f].c(),l[f].m(n,null))}for(;f<l.length;f+=1)l[f].d(1);l.length=a.length}},d(d){d&&B(n),xn(l,d)}}}function mi(t){let n,a,l=t[121]+"",d,c,f,v=t[122]+"",p,w;return{c(){n=J("li"),a=J("strong"),d=Se(l),c=Se(":"),f=we(),p=Se(v),w=we()},m(O,b){G(O,n,b),j(n,a),j(a,d),j(a,c),j(n,f),j(n,p),j(n,w)},p(O,b){b[0]&4194304&&l!==(l=O[121]+"")&&He(d,l),b[0]&4194304&&v!==(v=O[122]+"")&&He(p,v)},d(O){O&&B(n)}}}function hi(t){let n,a,l,d,c,f,v,p;function w(H,C){return H[11]?Zs:Gs}let O=w(t),b=O(t),k=!t[11]&&di(t);function L(...H){return t[89](t[117],...H)}function Q(...H){return t[90](t[117],...H)}return{c(){var H;n=J("li"),a=J("div"),b.c(),l=we(),k&&k.c(),d=we(),z(a,"class","inner"),z(n,"tabindex","0"),z(n,"class",c="event status-"+t[117].attendeeStatus),z(n,"data-calendar-id",f=((H=t[3])==null?void 0:H.indexOf(t[117].calendar_id))+1)},m(H,C){G(H,n,C),j(n,a),b.m(a,null),j(a,l),k&&k.m(a,null),j(n,d),v||(p=[ze(n,"click",L),ze(n,"keyup",Q)],v=!0)},p(H,C){var F;t=H,O===(O=w(t))&&b?b.p(t,C):(b.d(1),b=O(t),b&&(b.c(),b.m(a,l))),t[11]?k&&(k.d(1),k=null):k?k.p(t,C):(k=di(t),k.c(),k.m(a,null)),C[0]&4194304&&c!==(c="event status-"+t[117].attendeeStatus)&&z(n,"class",c),C[0]&4194312&&f!==(f=((F=t[3])==null?void 0:F.indexOf(t[117].calendar_id))+1)&&z(n,"data-calendar-id",f)},d(H){H&&B(n),b.d(),k&&k.d(),v=!1,wt(p)}}}function vi(t){let n,a=t[125].formatted+"",l,d;return{c(){n=J("span"),l=Se(a),d=we(),Be(n,"top",t[125].relativeTickPosition*100+"%"),z(n,"class","tick")},m(c,f){G(c,n,f),j(n,l),j(n,d)},p(c,f){f[0]&2097152&&a!==(a=c[125].formatted+"")&&He(l,a),f[0]&2097152&&Be(n,"top",c[125].relativeTickPosition*100+"%")},d(c){c&&B(n)}}}function yi(t){let n,a=t[21],l=[];for(let d=0;d<a.length;d+=1)l[d]=gi($a(t,a,d));return{c(){n=J("div");for(let d=0;d<l.length;d+=1)l[d].c();z(n,"class","hour-ticks")},m(d,c){G(d,n,c);for(let f=0;f<l.length;f+=1)l[f].m(n,null)},p(d,c){if(c[0]&2097152){a=d[21];let f;for(f=0;f<a.length;f+=1){const v=$a(d,a,f);l[f]?l[f].p(v,c):(l[f]=gi(v),l[f].c(),l[f].m(n,null))}for(;f<l.length;f+=1)l[f].d(1);l.length=a.length}},d(d){d&&B(n),xn(l,d)}}}function gi(t){let n;return{c(){n=J("span"),Be(n,"top",t[125].relativeTickPosition*100+"%")},m(a,l){G(a,n,l)},p(a,l){l[0]&2097152&&Be(n,"top",a[125].relativeTickPosition*100+"%")},d(a){a&&B(n)}}}function Js(t){let n,a,l=t[2].toDateString()+"",d;return{c(){n=J("li"),a=Se("No events for "),d=Se(l),z(n,"class","no-events")},m(c,f){G(c,n,f),j(n,a),j(n,d)},p(c,f){f[0]&4&&l!==(l=c[2].toDateString()+"")&&He(d,l)},d(c){c&&B(n)}}}function qs(t){let n,a,l=[...t[116],t[19]],d=[];for(let f=0;f<l.length;f+=1)d[f]=Oi(Xa(t,l,f));let c=!t[1].hide_current_time&&ki(t);return{c(){for(let f=0;f<d.length;f+=1)d[f].c();n=we(),c&&c.c(),a=zn()},m(f,v){for(let p=0;p<d.length;p+=1)d[p].m(f,v);G(f,n,v),c&&c.m(f,v),G(f,a,v)},p(f,v){if(v[0]&537659978){l=[...f[116],f[19]];let p;for(p=0;p<l.length;p+=1){const w=Xa(f,l,p);d[p]?d[p].p(w,v):(d[p]=Oi(w),d[p].c(),d[p].m(n.parentNode,n))}for(;p<d.length;p+=1)d[p].d(1);d.length=l.length}f[1].hide_current_time?c&&(c.d(1),c=null):c?c.p(f,v):(c=ki(f),c.c(),c.m(a.parentNode,a))},d(f){xn(d,f),f&&B(n),c&&c.d(f),f&&B(a)}}}function pi(t){let n,a,l,d,c,f,v,p;function w(C,F){return C[11]?Qs:Xs}let O=w(t),b=O(t),k=t[117].when&&"start_time"in t[117].when&&_i(t),L=!t[11]&&bi(t);function Q(...C){return t[91](t[117],...C)}function H(...C){return t[92](t[117],...C)}return{c(){var C;n=J("li"),a=J("div"),b.c(),l=we(),k&&k.c(),d=we(),L&&L.c(),z(a,"class","inner"),Ee(a,"tiny-event",t[117].relativeRunTime<=.03),z(n,"tabindex","0"),z(n,"class",c="event status-"+t[117].attendeeStatus),z(n,"data-calendar-id",f=((C=t[3])==null?void 0:C.indexOf(t[117].calendar_id))+1),Be(n,"top",t[117].relativeStartTime*100+"%"),Be(n,"height",t[9]?`calc(${t[117].relativeRunTime*100}% - 4px)`:`calc(${t[117].relativeRunTime*100}%  - 4px)`),Be(n,"left",t[117].relativeOverlapOffset*100+"%"),Be(n,"width","calc("+t[117].relativeOverlapWidth*100+"% - 4px)"),Ee(n,"new-event",t[117].isNewEvent),Ee(n,"expanded",t[18]===t[117].id)},m(C,F){G(C,n,F),j(n,a),b.m(a,null),j(a,l),k&&k.m(a,null),j(a,d),L&&L.m(a,null),v||(p=[ze(n,"click",Q),ze(n,"keyup",H)],v=!0)},p(C,F){var fe;t=C,O===(O=w(t))&&b?b.p(t,F):(b.d(1),b=O(t),b&&(b.c(),b.m(a,l))),t[117].when&&"start_time"in t[117].when?k?k.p(t,F):(k=_i(t),k.c(),k.m(a,d)):k&&(k.d(1),k=null),t[11]?L&&(L.d(1),L=null):L?L.p(t,F):(L=bi(t),L.c(),L.m(a,null)),F[0]&524352&&Ee(a,"tiny-event",t[117].relativeRunTime<=.03),F[0]&524352&&c!==(c="event status-"+t[117].attendeeStatus)&&z(n,"class",c),F[0]&524360&&f!==(f=((fe=t[3])==null?void 0:fe.indexOf(t[117].calendar_id))+1)&&z(n,"data-calendar-id",f),F[0]&524352&&Be(n,"top",t[117].relativeStartTime*100+"%"),F[0]&524864&&Be(n,"height",t[9]?`calc(${t[117].relativeRunTime*100}% - 4px)`:`calc(${t[117].relativeRunTime*100}%  - 4px)`),F[0]&524352&&Be(n,"left",t[117].relativeOverlapOffset*100+"%"),F[0]&524352&&Be(n,"width","calc("+t[117].relativeOverlapWidth*100+"% - 4px)"),F[0]&524352&&Ee(n,"new-event",t[117].isNewEvent),F[0]&786496&&Ee(n,"expanded",t[18]===t[117].id)},d(C){C&&B(n),b.d(),k&&k.d(),L&&L.d(),v=!1,wt(p)}}}function Qs(t){let n;return{c(){n=J("h2"),n.textContent="Busy"},m(a,l){G(a,n,l)},p:be,d(a){a&&B(n)}}}function Xs(t){let n,a=t[117].title+"",l;return{c(){n=J("h2"),l=Se(a)},m(d,c){G(d,n,c),j(n,l)},p(d,c){c[0]&524352&&a!==(a=d[117].title+"")&&He(l,a)},d(d){d&&B(n)}}}function _i(t){let n,a=Za(new Date(t[117].when.start_time*1e3),t[1].timezone)+"",l;return{c(){n=J("span"),l=Se(a),z(n,"class","time")},m(d,c){G(d,n,c),j(n,l)},p(d,c){c[0]&524354&&a!==(a=Za(new Date(d[117].when.start_time*1e3),d[1].timezone)+"")&&He(l,a)},d(d){d&&B(n)}}}function bi(t){var w,O;let n,a,l=hr.sanitize((w=t[117].description)!=null?w:"")+"",d,c=t[1].display_metadata&&t[117].metadata&&((O=Object.keys(t[117].metadata))==null?void 0:O.length),f,v=t[117].location&&wi(t),p=c&&Ti(t);return{c(){v&&v.c(),n=we(),a=J("p"),d=we(),p&&p.c(),f=zn()},m(b,k){v&&v.m(b,k),G(b,n,k),G(b,a,k),a.innerHTML=l,G(b,d,k),p&&p.m(b,k),G(b,f,k)},p(b,k){var L,Q;b[117].location?v?v.p(b,k):(v=wi(b),v.c(),v.m(n.parentNode,n)):v&&(v.d(1),v=null),k[0]&524352&&l!==(l=hr.sanitize((L=b[117].description)!=null?L:"")+"")&&(a.innerHTML=l),k[0]&524354&&(c=b[1].display_metadata&&b[117].metadata&&((Q=Object.keys(b[117].metadata))==null?void 0:Q.length)),c?p?p.p(b,k):(p=Ti(b),p.c(),p.m(f.parentNode,f)):p&&(p.d(1),p=null)},d(b){v&&v.d(b),b&&B(n),b&&B(a),b&&B(d),p&&p.d(b),b&&B(f)}}}function wi(t){let n;function a(c,f){return c[117].locationString?$s:Ks}let l=a(t),d=l(t);return{c(){n=J("span"),d.c(),z(n,"class","location")},m(c,f){G(c,n,f),d.m(n,null)},p(c,f){l===(l=a(c))&&d?d.p(c,f):(d.d(1),d=l(c),d&&(d.c(),d.m(n,null)))},d(c){c&&B(n),d.d()}}}function Ks(t){let n=t[117].location+"",a;return{c(){a=Se(n)},m(l,d){G(l,a,d)},p(l,d){d[0]&524352&&n!==(n=l[117].location+"")&&He(a,n)},d(l){l&&B(a)}}}function $s(t){let n,a=t[117].locationString+"",l,d;return{c(){n=J("a"),l=Se(a),z(n,"href",d=t[117].location),z(n,"target","_blank")},m(c,f){G(c,n,f),j(n,l)},p(c,f){f[0]&524352&&a!==(a=c[117].locationString+"")&&He(l,a),f[0]&524352&&d!==(d=c[117].location)&&z(n,"href",d)},d(c){c&&B(n)}}}function Ti(t){let n,a=Object.entries(t[117].metadata),l=[];for(let d=0;d<a.length;d+=1)l[d]=Si(Ka(t,a,d));return{c(){n=J("ul");for(let d=0;d<l.length;d+=1)l[d].c();z(n,"class","metadata")},m(d,c){G(d,n,c);for(let f=0;f<l.length;f+=1)l[f].m(n,null)},p(d,c){if(c[0]&524352){a=Object.entries(d[117].metadata);let f;for(f=0;f<a.length;f+=1){const v=Ka(d,a,f);l[f]?l[f].p(v,c):(l[f]=Si(v),l[f].c(),l[f].m(n,null))}for(;f<l.length;f+=1)l[f].d(1);l.length=a.length}},d(d){d&&B(n),xn(l,d)}}}function Si(t){let n,a,l=t[121]+"",d,c,f,v=t[122]+"",p;return{c(){n=J("li"),a=J("strong"),d=Se(l),c=Se(":"),f=we(),p=Se(v)},m(w,O){G(w,n,O),j(n,a),j(a,d),j(a,c),j(n,f),j(n,p)},p(w,O){O[0]&524352&&l!==(l=w[121]+"")&&He(d,l),O[0]&524352&&v!==(v=w[122]+"")&&He(p,v)},d(w){w&&B(n)}}}function Oi(t){let n,a=t[117]&&t[117].relativeStartTime!==void 0&&pi(t);return{c(){a&&a.c(),n=zn()},m(l,d){a&&a.m(l,d),G(l,n,d)},p(l,d){l[117]&&l[117].relativeStartTime!==void 0?a?a.p(l,d):(a=pi(l),a.c(),a.m(n.parentNode,n)):a&&(a.d(1),a=null)},d(l){a&&a.d(l),l&&B(n)}}}function ki(t){let n,a,l;return{c(){n=J("span"),a=Pn("svg"),l=Pn("path"),z(l,"d","M8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16H24C27.7277 16 30.8599 13.4505 31.748 10H39V6H31.748C30.8599 2.54955 27.7277 0 24 0H8ZM4 8C4 5.79086 5.79086 4 8 4H24C26.2091 4 28 5.79086 28 8C28 10.2091 26.2091 12 24 12H8C5.79086 12 4 10.2091 4 8Z"),z(a,"width","39"),z(a,"height","16"),z(a,"viewBox","0 0 39 16"),z(a,"fill","none"),z(a,"xmlns","http://www.w3.org/2000/svg"),z(n,"class","now"),Be(n,"top",t[20]()+"%")},m(d,c){G(d,n,c),j(n,a),j(a,l)},p(d,c){c[0]&1048576&&Be(n,"top",d[20]()+"%")},d(d){d&&B(n)}}}function el(t){let n;return{c(){n=Se("(loading events)")},m(a,l){G(a,n,l)},p:be,d(a){a&&B(n)}}}function tl(t){let n,a,l,d,c,f,v=t[12]&&ri(t),p={ctx:t,current:null,token:null,hasCatch:!1,pending:el,then:js,catch:Ws,value:116};return va(c=t[6],p),{c(){n=J("nylas-error"),a=we(),v&&v.c(),l=we(),d=J("main"),p.block.c(),this.c=be,ua(n,"id",t[0]),z(d,"class",f=t[12]?"custom":t[1].theme),Ee(d,"nylas-agenda",!0),Ee(d,"headless",t[1].header_type==="none")},m(w,O){G(w,n,O),G(w,a,O),v&&v.m(w,O),G(w,l,O),G(w,d,O),p.block.m(d,p.anchor=null),p.mount=()=>d,p.anchor=null},p(w,O){t=w,O[0]&1&&ua(n,"id",t[0]),t[12]?v?v.p(t,O):(v=ri(t),v.c(),v.m(l.parentNode,l)):v&&(v.d(1),v=null),p.ctx=t,O[0]&64&&c!==(c=t[6])&&va(c,p)||Do(p,t,O),O[0]&4098&&f!==(f=t[12]?"custom":t[1].theme)&&z(d,"class",f),O[0]&4098&&Ee(d,"nylas-agenda",!0),O[0]&4098&&Ee(d,"headless",t[1].header_type==="none")},i:be,o:be,d(w){w&&B(n),w&&B(a),v&&v.d(w),w&&B(l),w&&B(d),p.block.d(),p.token=null,p=null}}}const Ei=30;let Di=.2,Ii=.7;const nl=50,rl=100;function Ni(t){return new Date(t.getTime()+t.getTimezoneOffset()*6e4)}const Mi=()=>{};function al(t,n,a){let l,d,c,f,v,p,w,O,b,k,L,Q,H;Rn(t,er,y=>a(10,b=y)),Rn(t,Rr,y=>a(88,k=y)),Rn(t,Ds,y=>a(101,L=y));var C=this&&this.__awaiter||function(y,S,Y,le){function re(rt){return rt instanceof Y?rt:new Y(function(gt){gt(rt)})}return new(Y||(Y=Promise))(function(rt,gt){function pt(at){try{Qt(le.next(at))}catch(It){gt(It)}}function zt(at){try{Qt(le.throw(at))}catch(It){gt(It)}}function Qt(at){at.done?rt(at.value):re(at.value).then(pt,zt)}Qt((le=le.apply(y,S||[])).next())})},F,fe;const pe=Object.freeze(["overlaps","relativeOverlapOffset","relativeOverlapWidth","relativeRunTime","relativeStartTime"]);let q={},{id:oe=""}=n,{access_token:ae=""}=n,{allow_date_change:Oe}=n,{allow_event_creation:E}=n,{allowed_dates:ee}=n,{auto_time_box:A}=n,{end_minute:me}=n,{events:$e=[]}=n,{calendar_id:Wt}=n,{calendar_ids:jt}=n,{click_action:ct}=n,{color_by:mn}=n,{condensed_view:Zt}=n,{eagerly_fetch_events:hn}=n,{event_snap_interval:en}=n,{event_created:Rt}=n,{header_type:Gt}=n,{hide_all_day_events:tn}=n,{hide_current_time:Ft}=n,{hide_ticks:vn}=n,{prevent_zoom:yn}=n,{selected_date:gn}=n,{show_no_events_message:pn}=n,{start_minute:Un}=n,{theme:_n}=n,{timezone:bn}=n,{timezone_agnostic_all_day_events:Tt}=n,{display_metadata:Ye}=n;const ie={allow_date_change:!1,allow_event_creation:!1,allowed_dates:[],auto_time_box:!1,calendar_id:"",calendar_ids:"",color_by:"event",condensed_view:!1,eagerly_fetch_events:!0,end_minute:1440,event_snap_interval:15,header_type:"full",hide_all_day_events:!1,hide_current_time:!1,hide_ticks:!1,prevent_zoom:!1,show_no_events_message:!1,start_minute:0,theme:"theme-1",timezone:"",timezone_agnostic_all_day_events:!0,display_metadata:!0};let V=Fr({},{},ie),St=new Date().getTime(),Wn=!1;wo(()=>C(void 0,void 0,void 0,function*(){var y;yield To(),a(7,tt=Ve==null?void 0:Ve.getBoundingClientRect().height),tt===0&&a(16,Ve.style.height="300px",Ve),a(65,q=(yield L[JSON.stringify({component_id:oe,access_token:ae})])||{}),a(11,Wn=(y=q==null?void 0:q.show_as_busy)!==null&&y!==void 0?y:!1),a(1,V=Fr(n,q,ie)),Te(),setInterval(()=>{a(66,St=new Date().getTime())},15e3)}));const R=Is(Ir());let P=n,te,U,X,he,ge,Fe=[];function Te(){var y;if(!!V.theme&&(V.theme.startsWith(".")||V.theme.startsWith("http"))&&a(12,te=V.theme),V.timezone&&(!xr(V.timezone)||V.timezone===Intl.DateTimeFormat().resolvedOptions().timeZone)&&a(1,V.timezone="",V),V.selected_date){const S=Ni(new Date(V.selected_date));S.setHours(0,0,0,0),a(2,U=S)}else if(X==null?void 0:X.length)a(2,U=X[0]);else{let S=new Date;V.timezone&&(S=new Date(Ba(S,V.timezone))),S.setHours(0,0,0,0),a(2,U=S)}a(1,V.hide_current_time=(y=V.hide_current_time)!==null&&y!==void 0?y:p.toLocaleDateString()!=U.toLocaleDateString(),V),a(68,X=wn()),a(3,Fe=nn())}let _e,ft;function wn(){let y=[];return V.allowed_dates&&typeof V.allowed_dates=="string"&&(V.allowed_dates.includes(",")?y=V.allowed_dates.split(",").map(S=>new Date(S)):y=[new Date(V.allowed_dates)],y=y.map(S=>(S.setHours(0,0,0,0),S))),V.allowed_dates&&typeof V.allowed_dates!="string"&&(y=V.allowed_dates),y}let Ot,mt,De,xt,Bt;function nn(){let y=V.calendar_ids;return typeof y=="string"&&y.length?y.split(",").map(S=>S.trim()):Wt?[Wt]:[]}let et,ot=[],je,ht=[];const{loadingEvents:vt}=er;Rn(t,vt,y=>a(24,H=y));let xe=[],yt=[],kt=[],Tn=!1,Ie,Et=[],Je,Yt;const Jt=()=>{if(!qe){if(X.length){const y=X.findIndex(S=>S.toDateString()===U.toDateString());a(2,U=X[y+1]||U)}else a(2,U=vr.offset(U,1));R("dateChange",new Date(new Date(U).setHours(0,0,0,0)))}},jn=()=>{if(!qe){if(X.length){const y=X.findIndex(S=>S.toDateString()===U.toDateString());a(2,U=X[y-1]||U)}else a(2,U=vr.offset(U,-1));R("dateChange",new Date(new Date(U).setHours(0,0,0,0)))}};let Ve,tt,rn=!1;const Sn=y=>{if(ke)return;a(17,rn=!0),setTimeout(()=>{a(17,rn=!1)},500),y.preventDefault();const S=Ve.getBoundingClientRect(),Y=y.clientY-S.top;let le=Math.abs(y.deltaY)/10;y.ctrlKey&&(y.preventDefault(),le*=20);const re=y.deltaY>=0?"out":"in",rt=[Y/S.height,(S.height-Y)/S.height];re==="out"&&(ge<=1440&&ge+le<=1440?a(70,ge+=le):a(70,ge=1440),he>=0&&he-le>=0?a(69,he-=le):a(69,he=0)),re==="in"&&ge>he+60&&(a(69,he+=le*rt[0]),a(70,ge-=le*rt[1]))};let ke="",an,Ne;function Pt(y,S){if(R("eventClicked",S),typeof ct=="function"){const Y=JSON.parse(JSON.stringify(S));for(const le of pe)delete Y[le];ct(y,Y)}l==="expand"&&"start_time"in S.when&&(S.id!==ke?(an=he,Ne=ge,a(69,he=Ya(S)),a(70,ge=Ja(S)),a(18,ke=S.id)):(a(18,ke=""),a(69,he=an),a(70,ge=Ne)))}let se={held:!1,x:0,y:0};const Me=Lo({x:0},{stiffness:Di,damping:Ii});Rn(t,Me,y=>a(23,Q=y));function On(y){a(84,se={held:!0,x:y.clientX,y:y.clientY}),a(8,Me.stiffness=1,Me),a(8,Me.damping=1,Me)}function kn(y){se.held&&Me.update(()=>({x:Math.sign(y.clientX-se.x)*Math.sqrt(Math.abs(y.clientX-se.x))}))}function En(y){if(se.held){let S=y.clientX-se.x;Math.abs(S)>nl&&V.allow_date_change?(S>0?jn():S<0&&Jt(),setTimeout(()=>{a(84,se={held:!1,x:0,y:0})},rl)):a(84,se={held:!1,x:0,y:0})}a(8,Me.stiffness=Di,Me),a(8,Me.damping=Ii,Me),Me.set({x:0})}function Ke(y){const S=Math.abs(y-Ve.getBoundingClientRect().y)/Ve.getBoundingClientRect().height,Y=De*S+he;return(Math.round(Y/V.event_snap_interval)*V.event_snap_interval-he)/De}function Ce(y){const S=Math.abs(y-se.y)/Ve.getBoundingClientRect().height,Y=De*S;return Math.round(Y/V.event_snap_interval)*V.event_snap_interval/De}let ne,qe=!1;function on(y){V.allow_event_creation&&!qe&&Array.isArray(Ie)&&(a(84,se={held:!0,x:y.clientX,y:y.clientY}),a(19,ne={id:`${Ie.length}`,title:"New Event",relativeStartTime:Ke(y.clientY),relativeRunTime:0,relativeOverlapWidth:1,when:{},isNewEvent:!0}),qe=!0)}let Qe=null;function Dt(y){V.allow_event_creation&&se.held&&!!ne&&y.clientY>Ve.getBoundingClientRect().y&&(se.y<=y.clientY?(Qe!==null&&(a(19,ne.relativeStartTime=Qe,ne),Qe=null),a(19,ne.relativeRunTime=Ce(y.clientY),ne)):(Qe===null&&(Qe=ne.relativeStartTime),a(19,ne.relativeStartTime=Ke(y.clientY),ne),a(19,ne.relativeRunTime=Math.abs(Qe-ne.relativeStartTime),ne)),a(19,ne=Object.assign({},ne)))}function sn(){if(V.allow_event_creation&&se.held&&ne&&ne.relativeRunTime>0){const y=De*ne.relativeStartTime+he,S=De*ne.relativeRunTime,Y=new Date(U);a(19,ne.when.start_time=Math.floor((Y.setHours(0,y,0,0)-_e)/1e3),ne),a(19,ne.when.end_time=Math.floor((Y.setHours(0,y+S,0,0)-_e)/1e3),ne),a(83,Ie=[...Ie,ne]),typeof Rt=="function"&&Array.isArray(Fe)&&Fe.length>0?(a(19,ne.calendar_id=Fe[0],ne),Rt(ne,qt,st,In)):qe=!1}else qe=!1;a(19,ne=null),Qe=null,a(84,se={held:!1,x:0,y:0})}function Dn(y){typeof y.when.start_time=="object"?y.when.start_time=Math.floor((y.when.start_time.getTime()-_e)/1e3):y.when.start_time=Math.floor((y.when.start_time-_e)/1e3),typeof y.when.end_time=="object"?y.when.end_time=Math.floor((y.when.end_time.getTime()-_e)/1e3):y.when.end_time=Math.floor((y.when.end_time-_e)/1e3)}function In(y){Dn(y);let S=new Date(y.when.start_time*1e3).getTime()-new Date(new Date(y.when.start_time*1e3).setHours(0,he,0,0)).getTime();S=S/6e4;let Y=new Date(y.when.end_time*1e3).getTime()-new Date(y.when.start_time*1e3).getTime();Y=Y/6e4,y.relativeStartTime=S/De,y.relativeRunTime=Y/De,a(83,Ie[Ie.length-1]=y,Ie),a(83,Ie=[...Ie])}function qt(y){if(typeof y!="object"){console.warn("Invalid event object provided.");return}Dn(y),er.createEvent(y,et),a(83,Ie[Ie.length-1].isNewEvent=!1,Ie),qe=!1}function st(){Ie.pop(),a(83,Ie=[...Ie]),qe=!1}const Ue=(y,S)=>Pt(S,y),ln=(y,S)=>{S.key==="Enter"&&Pt(S,y)},Xe=(y,S)=>Pt(S,y),un=(y,S)=>{S.key==="Enter"&&Pt(S,y)};function nt(y){Nr[y?"unshift":"push"](()=>{Ve=y,a(16,Ve)})}function Nn(){tt=this.clientHeight,a(7,tt)}const dn=y=>{V.allow_event_creation&&y.preventDefault()};return t.$$set=y=>{a(115,n=ea(ea({},n),aa(y))),"id"in y&&a(0,oe=y.id),"access_token"in y&&a(36,ae=y.access_token),"allow_date_change"in y&&a(37,Oe=y.allow_date_change),"allow_event_creation"in y&&a(38,E=y.allow_event_creation),"allowed_dates"in y&&a(39,ee=y.allowed_dates),"auto_time_box"in y&&a(40,A=y.auto_time_box),"end_minute"in y&&a(41,me=y.end_minute),"events"in y&&a(42,$e=y.events),"calendar_id"in y&&a(43,Wt=y.calendar_id),"calendar_ids"in y&&a(44,jt=y.calendar_ids),"click_action"in y&&a(45,ct=y.click_action),"color_by"in y&&a(46,mn=y.color_by),"condensed_view"in y&&a(47,Zt=y.condensed_view),"eagerly_fetch_events"in y&&a(48,hn=y.eagerly_fetch_events),"event_snap_interval"in y&&a(49,en=y.event_snap_interval),"event_created"in y&&a(50,Rt=y.event_created),"header_type"in y&&a(51,Gt=y.header_type),"hide_all_day_events"in y&&a(52,tn=y.hide_all_day_events),"hide_current_time"in y&&a(53,Ft=y.hide_current_time),"hide_ticks"in y&&a(54,vn=y.hide_ticks),"prevent_zoom"in y&&a(55,yn=y.prevent_zoom),"selected_date"in y&&a(56,gn=y.selected_date),"show_no_events_message"in y&&a(57,pn=y.show_no_events_message),"start_minute"in y&&a(58,Un=y.start_minute),"theme"in y&&a(59,_n=y.theme),"timezone"in y&&a(60,bn=y.timezone),"timezone_agnostic_all_day_events"in y&&a(61,Tt=y.timezone_agnostic_all_day_events),"display_metadata"in y&&a(62,Ye=y.display_metadata)},t.$$.update=()=>{if(t.$$.dirty[2]&8&&R("manifestLoaded",q),t.$$.dirty[2]&67108864&&Object.keys(k).length&&R("onError",k),JSON.stringify(P)!==JSON.stringify(n)&&(a(1,V=Fr(n,q,ie)),Te(),a(67,P=n)),t.$$.dirty[0]&2&&(a(71,_e=Ga(V.timezone)),a(13,ft=Ps(V.timezone))),t.$$.dirty[1]&16384&&(l=typeof ct=="function"?"none":"expand"),t.$$.dirty[0]&4|t.$$.dirty[2]&512&&a(75,xt=(new Date(U).getTime()-_e)/1e3),t.$$.dirty[0]&4|t.$$.dirty[2]&512&&a(76,Bt=(new Date(U).setHours(24,0,0,0)-_e)/1e3),t.$$.dirty[0]&9|t.$$.dirty[1]&32|t.$$.dirty[2]&24576&&a(77,et={component_id:oe,access_token:ae,calendarIDs:Fe,starts_after:xt,ends_before:Bt}),t.$$.dirty[0]&15|t.$$.dirty[1]&32|t.$$.dirty[2]&33344&&V.allow_date_change&&V.eagerly_fetch_events&&et){let y,S;if(X==null?void 0:X.length){const Y=X.findIndex(le=>le.toDateString()===U.toDateString());y=X[Y-1]||U,S=X[Y+1]||U}else y=vr.offset(U,-1),S=vr.offset(U,1);a(78,ot=[{component_id:oe,access_token:ae,calendarIDs:Fe,starts_after:(new Date(y).setHours(0,0,0,0)-_e)/1e3,ends_before:(new Date(y).setHours(24,0,0,0)-_e)/1e3},{component_id:oe,access_token:ae,calendarIDs:Fe,starts_after:(new Date(S).setHours(0,0,0,0)-_e)/1e3,ends_before:(new Date(S).setHours(24,0,0,0)-_e)/1e3}])}if(t.$$.dirty[0]&2|t.$$.dirty[2]&622592&&(()=>C(void 0,void 0,void 0,function*(){var y,S;if(V.events)a(80,xe=V.events);else{yt.push(er.getEvents(et));const Y=(yield Promise.allSettled(yt)).filter(le=>le.status!=="rejected");a(80,xe=(S=(y=Y.pop())===null||y===void 0?void 0:y.value)!==null&&S!==void 0?S:[]),a(81,yt.length=0,yt)}(ot==null?void 0:ot.length)&&ot.forEach(Y=>er.getEvents(Y))}))(),t.$$.dirty[0]&9|t.$$.dirty[1]&32&&(()=>C(void 0,void 0,void 0,function*(){if(oe&&(Fe==null?void 0:Fe.length)){const y={access_token:ae,component_id:oe,calendarIDs:Fe};a(79,ht=yield ys.getCalendars(y))}}))(),t.$$.dirty[2]&393220&&a(85,c=a(64,fe=xe==null?void 0:xe.filter(y=>"start_time"in y.when))===null||fe===void 0?void 0:fe.map(y=>{var S,Y;let le=ht.find(re=>re.id===y.calendar_id);return y.attendeeStatus=(Y=(S=y.participants)===null||S===void 0?void 0:S.find(re=>re.email===(le==null?void 0:le.name)))===null||Y===void 0?void 0:Y.status,y}).sort((y,S)=>y.when.start_time-S.when.start_time)),t.$$.dirty[0]&2|t.$$.dirty[2]&8389120&&(a(69,he=V.auto_time_box&&(c==null?void 0:c.length)?Ya(c[0])+_e/(1e3*60):V.start_minute),a(70,ge=V.auto_time_box&&(c==null?void 0:c.length)?Ja(c[c.length-1])+_e/(1e3*60):V.end_minute)),t.$$.dirty[2]&128){let y=new Date;y.setHours(0,he,0,0),a(72,Ot=y)}if(t.$$.dirty[2]&256){let y=new Date;y.setHours(0,ge,0,0),a(73,mt=y)}if(t.$$.dirty[2]&384&&a(74,De=Math.floor(ge-he)),t.$$.dirty[2]&32768&&a(4,je=JSON.stringify(et)),t.$$.dirty[0]&1026&&(V.events?a(82,kt=V.events.flat().filter(y=>{var S;return(S=y.when)===null||S===void 0?void 0:S.date})):Promise.all(Object.values(b)).then(y=>{a(82,kt=y.flat().filter(S=>{var Y;return(Y=S.when)===null||Y===void 0?void 0:Y.date}))})),t.$$.dirty[0]&6|t.$$.dirty[2]&1048578&&a(22,d=a(63,F=kt==null?void 0:kt.filter(y=>V.timezone_agnostic_all_day_events?Ni(new Date(y.when.date)).valueOf()===U.valueOf():new Date(y.when.date).toDateString()===U.toDateString()))===null||F===void 0?void 0:F.sort((y,S)=>(y.title||"").localeCompare(S.title||""))),t.$$.dirty[0]&2|t.$$.dirty[2]&262144&&(V.events||R("eventsLoaded",xe)),t.$$.dirty[0]&2|t.$$.dirty[2]&262144&&a(83,Ie=Array.isArray(xe)&&xe.length>0?xe:V.events||[]),t.$$.dirty[0]&130&&a(9,O=V.condensed_view||tt&&tt<500),t.$$.dirty[0]&1618|t.$$.dirty[1]&2048|t.$$.dirty[2]&10621056)if($e||c&&(ht==null?void 0:ht.length)){a(6,Et=Ie.filter(S=>S.status!=="cancelled"&&"start_time"in S.when).map((S,Y)=>{var le;if(O)return S.relativeStartTime=100/c.length/100*Y,S.relativeRunTime=100/c.length/100,S;let re=new Date(S.when.start_time*1e3);V.timezone&&(re=new Date(Ba(re,V.timezone)));let rt=(re.getTime()-re.setHours(0,he,0,0))/6e4,gt=new Date(S.when.end_time*1e3).getTime()-new Date(S.when.start_time*1e3).getTime();return gt=gt/6e4,S.relativeStartTime=rt/De,S.relativeRunTime=gt/De,((le=S.location)===null||le===void 0?void 0:le.startsWith("http"))&&(S.locationString=`Link: ${new URL(S.location).hostname}`),S}));const y=Et.filter(S=>"start_time"in S.when&&"end_time"in S.when);if(O)y.forEach(S=>{S.relativeOverlapWidth=1,S.relativeOverlapOffset=0});else{const S={};zs(y,S),y.sort((Y,le)=>Y.when.end_time-Y.when.start_time<le.when.end_time-le.when.start_time?1:-1).forEach(Y=>Hs(Y,S))}}else b[je]&&a(6,Et=[]);t.$$.dirty[0]&192&&a(5,Tn=Et.length*Ei>tt),t.$$.dirty[0]&128&&a(87,f=Ei/tt),t.$$.dirty[0]&608|t.$$.dirty[2]&33554432&&O&&Tn&&Et.forEach((y,S)=>{y.relativeStartTime=f*S,y.relativeRunTime=f}),t.$$.dirty[0]&4|t.$$.dirty[2]&64&&a(14,Je=!!((X==null?void 0:X.length)&&(X==null?void 0:X.findIndex(y=>y.toDateString()===U.toDateString()))===0)),t.$$.dirty[0]&4|t.$$.dirty[2]&64&&a(15,Yt=!!((X==null?void 0:X.length)&&(X==null?void 0:X.findIndex(y=>y.toDateString()===U.toDateString()))===X.length-1)),t.$$.dirty[2]&3072&&a(21,v=[...Array(24).keys()].map(y=>{const S=new Date;S.setHours(y,0,0,0);let Y=mt.getTime()-Ot.getTime();return Y=Y/6e4,{key:y,formatted:S.toLocaleTimeString("en-US",{hour:"numeric",hour12:!0}),timeString:S.toISOString(),timeStamp:S.getTime(),date:S,relativeTickPosition:(S.getTime()-Ot.getTime())/6e4/Y}})),t.$$.dirty[2]&528&&a(86,p=new Date(St+_e)),t.$$.dirty[2]&16780416&&a(20,w=()=>{let y=new Date(p);const S=(p.getTime()-y.setHours(0,he,0,0))/6e4,Y=(mt.getTime()-Ot.getTime())/6e4;return S/Y*100}),t.$$.dirty[0]&256|t.$$.dirty[2]&4194304&&se.x===0&&Me.set({x:0})},n=aa(n),[oe,V,U,Fe,je,Tn,Et,tt,Me,O,b,Wn,te,ft,Je,Yt,Ve,rn,ke,ne,w,v,d,Q,H,vt,Jt,jn,Sn,Pt,On,kn,En,on,Dt,sn,ae,Oe,E,ee,A,me,$e,Wt,jt,ct,mn,Zt,hn,en,Rt,Gt,tn,Ft,vn,yn,gn,pn,Un,_n,bn,Tt,Ye,F,fe,q,St,P,X,he,ge,_e,Ot,mt,De,xt,Bt,et,ot,ht,xe,yt,kt,Ie,se,c,p,f,k,Ue,ln,Xe,un,nt,Nn,dn]}class Ai extends Cr{constructor(n){super();this.shadowRoot.innerHTML=`<style>*{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline;list-style:none}.sr-only{position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden}main{--black:#161717;--grey-dark:#636671;--grey:#bdc0cb;--grey-lighter:#dfe1e8;--grey-dark-warm:#9fa4b5;--grey-lightest:#f7f7f8;--grey-background:#f0f1f5;--white:#ffffff;--blue:#314fa9;--blue-lighter:#f0f3ff;--red:#ee3248;--red-lighter:#ffeef0;--fs-12:0.75rem;--fs-14:0.875rem;--fs-16:1rem;--black-90:#2c2e2e;--grey-light:#f7f7f8;--grey-warm:#cbcbcb}.theme-1{--theme-header-color:#000000;--theme-ticks-color:#000000;--theme-icons-bg-color:#d5d5d5;--theme-dividers-border-color:#d5d5d5;--theme-current-time-bg-color:#36d2ac;--theme-declined-event-color:#ba7122;--theme-header-bg:#ffffff;--theme-event-color:#ffffff;--theme-calendar-1-bg-color:#002db4;--theme-calendar-2-bg-color:#315df2;--theme-calendar-3-bg-color:#078351;--theme-calendar-4-bg-color:#5fdb58;--theme-calendar-5-bg-color:#49a643;--theme-calendar-6-bg-color:#54d3b3;--theme-calendar-7-bg-color:#648fdc;--theme-calendar-8-bg-color:#a3cc3a;--theme-calendar-9-bg-color:#9fce7b;--theme-calendar-10-bg-color:#779138}.theme-2{--theme-header-color:#000000;--theme-ticks-color:#000000;--theme-icons-bg-color:#d5d5d5;--theme-dividers-border-color:#d5d5d5;--theme-current-time-bg-color:#d23636;--theme-declined-event-color:#eb8f24;--theme-header-bg:#ffffff;--theme-event-color:#ffffff;--theme-calendar-1-bg-color:#6300c6;--theme-calendar-2-bg-color:#170075;--theme-calendar-3-bg-color:#003f9e;--theme-calendar-4-bg-color:#813d9d;--theme-calendar-5-bg-color:#549dd0;--theme-calendar-6-bg-color:#c051dc;--theme-calendar-7-bg-color:#b788d4;--theme-calendar-8-bg-color:#674dd4;--theme-calendar-9-bg-color:#687cdc;--theme-calendar-10-bg-color:#5c518c}.theme-3{--theme-header-color:#000000;--theme-ticks-color:#000000;--theme-icons-bg-color:#d5d5d5;--theme-dividers-border-color:#d5d5d5;--theme-current-time-bg-color:#c12b73;--theme-declined-event-color:#ba1722;--theme-header-bg:#ffffff;--theme-event-color:#ffffff;--theme-calendar-1-bg-color:#1d9f51;--theme-calendar-2-bg-color:#0400c4;--theme-calendar-3-bg-color:#19a7b0;--theme-calendar-4-bg-color:#65c444;--theme-calendar-5-bg-color:#4c7fdf;--theme-calendar-6-bg-color:#6a9fe1;--theme-calendar-7-bg-color:#70c08c;--theme-calendar-8-bg-color:#37629d;--theme-calendar-9-bg-color:#4dafd7;--theme-calendar-10-bg-color:#3f7339}.theme-4{--theme-header-color:#ffffff;--theme-ticks-color:#ffffff;--secondaryText:#8b8e98;--theme-icons-bg-color:#414247;--theme-dividers-border-color:#414247;--theme-current-time-bg-color:#7ae1c7;--theme-declined-event-color:#ba1722;--theme-event-color:#ffffff;--theme-header-bg:#414247;--theme-calendar-1-bg-color:#1951fa;--theme-calendar-2-bg-color:#002db4;--theme-calendar-3-bg-color:#078351;--theme-calendar-4-bg-color:#466edb;--theme-calendar-5-bg-color:#26af65;--theme-calendar-6-bg-color:#6a95de;--theme-calendar-7-bg-color:#335695;--theme-calendar-8-bg-color:#60cbae;--theme-calendar-9-bg-color:#308157;--theme-calendar-10-bg-color:#54afda}.theme-5{--theme-header-color:#000000;--theme-ticks-color:#000000;--theme-icons-bg-color:#d5d5d5;--theme-dividers-border-color:#d5d5d5;--theme-current-time-bg-color:#cd5041;--theme-declined-event-color:#cd5041;--theme-header-bg:#ffffff;--theme-event-color:#ffffff;--theme-calendar-1-bg-color:#5285ed;--theme-calendar-2-bg-color:#ecb63f;--theme-calendar-3-bg-color:#459a5f;--theme-calendar-4-bg-color:#8dd255;--theme-calendar-5-bg-color:#9845c4;--theme-calendar-6-bg-color:#d81b60;--theme-calendar-7-bg-color:#60cbae;--theme-calendar-8-bg-color:#528fc8;--theme-calendar-9-bg-color:#b39ddb;--theme-calendar-10-bg-color:#bf6342}.events.diff-by-event .event:nth-of-type(10n
          + 1):not(.event-detail),.events.diff-by-event .event:nth-of-type(10n
          + 1).event-detail.status-yes .header,.events.diff-by-event .event:nth-of-type(10n
          + 1).event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)))}.events.diff-by-event .event:nth-of-type(10n
          + 1):not(.event-detail):not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 1).event-detail.status-yes .header:not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 1).event-detail.status-undefined .header:not(.status-maybe):not(.status-noreply)::before{content:"";background-color:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)));position:absolute;top:0;left:0;height:100%;width:0px;filter:brightness(70%)}.events.diff-by-event .event:nth-of-type(10n
          + 2):not(.event-detail),.events.diff-by-event .event:nth-of-type(10n
          + 2).event-detail.status-yes .header,.events.diff-by-event .event:nth-of-type(10n
          + 2).event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-2-bg-color, var(--secondaryCalendar, var(--theme-calendar-2-bg-color)))}.events.diff-by-event .event:nth-of-type(10n
          + 2):not(.event-detail):not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 2).event-detail.status-yes .header:not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 2).event-detail.status-undefined .header:not(.status-maybe):not(.status-noreply)::before{content:"";background-color:var(--nylas-agenda-calendar-2-bg-color, var(--secondaryCalendar, var(--theme-calendar-2-bg-color)));position:absolute;top:0;left:0;height:100%;width:0px;filter:brightness(70%)}.events.diff-by-event .event:nth-of-type(10n
          + 3):not(.event-detail),.events.diff-by-event .event:nth-of-type(10n
          + 3).event-detail.status-yes .header,.events.diff-by-event .event:nth-of-type(10n
          + 3).event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-3-bg-color, var(--thirdCalendar, var(--theme-calendar-3-bg-color)))}.events.diff-by-event .event:nth-of-type(10n
          + 3):not(.event-detail):not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 3).event-detail.status-yes .header:not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 3).event-detail.status-undefined .header:not(.status-maybe):not(.status-noreply)::before{content:"";background-color:var(--nylas-agenda-calendar-3-bg-color, var(--thirdCalendar, var(--theme-calendar-3-bg-color)));position:absolute;top:0;left:0;height:100%;width:0px;filter:brightness(70%)}.events.diff-by-event .event:nth-of-type(10n
          + 4):not(.event-detail),.events.diff-by-event .event:nth-of-type(10n
          + 4).event-detail.status-yes .header,.events.diff-by-event .event:nth-of-type(10n
          + 4).event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-4-bg-color, var(--calendarColour4, var(--theme-calendar-4-bg-color)))}.events.diff-by-event .event:nth-of-type(10n
          + 4):not(.event-detail):not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 4).event-detail.status-yes .header:not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 4).event-detail.status-undefined .header:not(.status-maybe):not(.status-noreply)::before{content:"";background-color:var(--nylas-agenda-calendar-4-bg-color, var(--calendarColour4, var(--theme-calendar-4-bg-color)));position:absolute;top:0;left:0;height:100%;width:0px;filter:brightness(70%)}.events.diff-by-event .event:nth-of-type(10n
          + 5):not(.event-detail),.events.diff-by-event .event:nth-of-type(10n
          + 5).event-detail.status-yes .header,.events.diff-by-event .event:nth-of-type(10n
          + 5).event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-5-bg-color, var(--calendarColour5, var(--theme-calendar-5-bg-color)))}.events.diff-by-event .event:nth-of-type(10n
          + 5):not(.event-detail):not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 5).event-detail.status-yes .header:not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 5).event-detail.status-undefined .header:not(.status-maybe):not(.status-noreply)::before{content:"";background-color:var(--nylas-agenda-calendar-5-bg-color, var(--calendarColour5, var(--theme-calendar-5-bg-color)));position:absolute;top:0;left:0;height:100%;width:0px;filter:brightness(70%)}.events.diff-by-event .event:nth-of-type(10n
          + 6):not(.event-detail),.events.diff-by-event .event:nth-of-type(10n
          + 6).event-detail.status-yes .header,.events.diff-by-event .event:nth-of-type(10n
          + 6).event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-6-bg-color, var(--calendarColour6, var(--theme-calendar-6-bg-color)))}.events.diff-by-event .event:nth-of-type(10n
          + 6):not(.event-detail):not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 6).event-detail.status-yes .header:not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 6).event-detail.status-undefined .header:not(.status-maybe):not(.status-noreply)::before{content:"";background-color:var(--nylas-agenda-calendar-6-bg-color, var(--calendarColour6, var(--theme-calendar-6-bg-color)));position:absolute;top:0;left:0;height:100%;width:0px;filter:brightness(70%)}.events.diff-by-event .event:nth-of-type(10n
          + 7):not(.event-detail),.events.diff-by-event .event:nth-of-type(10n
          + 7).event-detail.status-yes .header,.events.diff-by-event .event:nth-of-type(10n
          + 7).event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-7-bg-color, var(--calendarColour7, var(--theme-calendar-7-bg-color)))}.events.diff-by-event .event:nth-of-type(10n
          + 7):not(.event-detail):not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 7).event-detail.status-yes .header:not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 7).event-detail.status-undefined .header:not(.status-maybe):not(.status-noreply)::before{content:"";background-color:var(--nylas-agenda-calendar-7-bg-color, var(--calendarColour7, var(--theme-calendar-7-bg-color)));position:absolute;top:0;left:0;height:100%;width:0px;filter:brightness(70%)}.events.diff-by-event .event:nth-of-type(10n
          + 8):not(.event-detail),.events.diff-by-event .event:nth-of-type(10n
          + 8).event-detail.status-yes .header,.events.diff-by-event .event:nth-of-type(10n
          + 8).event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-8-bg-color, var(--calendarColour8, var(--theme-calendar-8-bg-color)))}.events.diff-by-event .event:nth-of-type(10n
          + 8):not(.event-detail):not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 8).event-detail.status-yes .header:not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 8).event-detail.status-undefined .header:not(.status-maybe):not(.status-noreply)::before{content:"";background-color:var(--nylas-agenda-calendar-8-bg-color, var(--calendarColour8, var(--theme-calendar-8-bg-color)));position:absolute;top:0;left:0;height:100%;width:0px;filter:brightness(70%)}.events.diff-by-event .event:nth-of-type(10n
          + 9):not(.event-detail),.events.diff-by-event .event:nth-of-type(10n
          + 9).event-detail.status-yes .header,.events.diff-by-event .event:nth-of-type(10n
          + 9).event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-9-bg-color, var(--calendarColour9, var(--theme-calendar-9-bg-color)))}.events.diff-by-event .event:nth-of-type(10n
          + 9):not(.event-detail):not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 9).event-detail.status-yes .header:not(.status-maybe):not(.status-noreply)::before,.events.diff-by-event .event:nth-of-type(10n
          + 9).event-detail.status-undefined .header:not(.status-maybe):not(.status-noreply)::before{content:"";background-color:var(--nylas-agenda-calendar-9-bg-color, var(--calendarColour9, var(--theme-calendar-9-bg-color)));position:absolute;top:0;left:0;height:100%;width:0px;filter:brightness(70%)}.events.diff-by-calendar .event[data-calendar-id="0"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="0"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="0"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="0"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="0"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="0"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="0"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="0"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="0"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)));color:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="1"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="1"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="1"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-2-bg-color, var(--secondaryCalendar, var(--theme-calendar-2-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="1"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="1"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="1"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="1"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="1"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="1"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-2-bg-color, var(--secondaryCalendar, var(--theme-calendar-2-bg-color)));color:var(--nylas-agenda-calendar-2-bg-color, var(--secondaryCalendar, var(--theme-calendar-2-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="2"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="2"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="2"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-3-bg-color, var(--thirdCalendar, var(--theme-calendar-3-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="2"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="2"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="2"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="2"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="2"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="2"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-3-bg-color, var(--thirdCalendar, var(--theme-calendar-3-bg-color)));color:var(--nylas-agenda-calendar-3-bg-color, var(--thirdCalendar, var(--theme-calendar-3-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="3"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="3"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="3"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-4-bg-color, var(--calendarColour4, var(--theme-calendar-4-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="3"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="3"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="3"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="3"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="3"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="3"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-4-bg-color, var(--calendarColour4, var(--theme-calendar-4-bg-color)));color:var(--nylas-agenda-calendar-4-bg-color, var(--calendarColour4, var(--theme-calendar-4-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="4"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="4"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="4"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-5-bg-color, var(--calendarColour5, var(--theme-calendar-5-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="4"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="4"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="4"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="4"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="4"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="4"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-5-bg-color, var(--calendarColour5, var(--theme-calendar-5-bg-color)));color:var(--nylas-agenda-calendar-5-bg-color, var(--calendarColour5, var(--theme-calendar-5-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="5"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="5"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="5"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-6-bg-color, var(--calendarColour6, var(--theme-calendar-6-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="5"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="5"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="5"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="5"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="5"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="5"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-6-bg-color, var(--calendarColour6, var(--theme-calendar-6-bg-color)));color:var(--nylas-agenda-calendar-6-bg-color, var(--calendarColour6, var(--theme-calendar-6-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="6"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="6"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="6"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-7-bg-color, var(--calendarColour7, var(--theme-calendar-7-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="6"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="6"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="6"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="6"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="6"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="6"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-7-bg-color, var(--calendarColour7, var(--theme-calendar-7-bg-color)));color:var(--nylas-agenda-calendar-7-bg-color, var(--calendarColour7, var(--theme-calendar-7-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="7"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="7"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="7"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-8-bg-color, var(--calendarColour8, var(--theme-calendar-8-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="7"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="7"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="7"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="7"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="7"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="7"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-8-bg-color, var(--calendarColour8, var(--theme-calendar-8-bg-color)));color:var(--nylas-agenda-calendar-8-bg-color, var(--calendarColour8, var(--theme-calendar-8-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="8"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="8"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="8"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-9-bg-color, var(--calendarColour9, var(--theme-calendar-9-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="8"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="8"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="8"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="8"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="8"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="8"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-9-bg-color, var(--calendarColour9, var(--theme-calendar-9-bg-color)));color:var(--nylas-agenda-calendar-9-bg-color, var(--calendarColour9, var(--theme-calendar-9-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="9"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="9"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="9"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-10-bg-color, var(--calendarColour10, var(--theme-calendar-10-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="9"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="9"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="9"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="9"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="9"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="9"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-10-bg-color, var(--calendarColour10, var(--theme-calendar-10-bg-color)));color:var(--nylas-agenda-calendar-10-bg-color, var(--calendarColour10, var(--theme-calendar-10-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="10"]:not(.event-detail),.events.diff-by-calendar .event[data-calendar-id="10"].event-detail.status-yes .header,.events.diff-by-calendar .event[data-calendar-id="10"].event-detail.status-undefined .header{background-color:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)))}.events.diff-by-calendar .event[data-calendar-id="10"].status-noreply,.events.diff-by-calendar .event[data-calendar-id="10"].status-noreply.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="10"].status-noreply.event-detail .details,.events.diff-by-calendar .event[data-calendar-id="10"].status-maybe,.events.diff-by-calendar .event[data-calendar-id="10"].status-maybe.event-detail .header,.events.diff-by-calendar .event[data-calendar-id="10"].status-maybe.event-detail .details{border-color:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)));color:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)))}.events .event:not(.event-detail.status-undefined):hover{background-color:var(--nylas-agenda-event-hover-bg-color, var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color))));color:var(--nylas-agenda-event-hover-color, var(--nylas-agenda-event-color, var(--calendarEventText, var(--theme-event-color))))}main{text-align:center;height:100%;margin:0 auto;font-family:inherit;display:grid;grid-template-rows:80px auto 1fr;grid-template-columns:1fr;grid-column-gap:5px;overflow:hidden;line-height:100%;transition:0.2s}main.headless{grid-template-rows:1fr}header{display:flex;flex-direction:column;align-items:center;justify-content:space-evenly;grid-column:1/3;color:var(--nylas-agenda-header-color, var(--mainTextAndDeclinedEvents, var(--theme-header-color)));background:var(--nylas-agenda-header-bg, var(--headerBackground, var(--theme-header-bg)));z-index:1;padding-left:10px}header button{padding:0rem 0.5rem;background:transparent}header button:first-of-type{padding-left:0}header button svg path{fill:var(--nylas-agenda-icons-bg-color, var(--linesAndIcons, var(--theme-icons-bg-color)));transition:0.2s}header .month,header .day{display:flex;flex-direction:row;gap:15px;align-items:center}header .month h1{font-size:26px;font-weight:bold;margin:0}header .month h1 span{font-weight:lighter}header .day{white-space:nowrap;display:grid}header .day.allow_date_change{grid-template-columns:1fr auto 1fr;width:100%}header .day button{cursor:pointer}header .day button.prev{text-align:right}header .day button.next{text-align:left}header .day button:hover svg path,header .day button:focus svg path{fill:hsl(var(--nylas-agenda-icons-bg-color, var(--linesAndIcons, var(--theme-icons-bg-color))), 50%)}header .day h2{font-size:20px;margin:0;font-weight:lighter}header .day h2 span{background-color:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)));color:var(--nylas-agenda-event-color, var(--calendarEventText, var(--theme-event-color)));border-radius:20px;display:inline-block;font-weight:bold;padding:4px;display:inline-block;width:22px;height:22px;font-weight:300;font-size:14px;text-align:center;line-height:22px}h2{font-family:inherit;font-size:12px;margin-bottom:0px;font-weight:600}.all-day{display:grid;grid-column:1/3;margin-bottom:1rem;max-height:20vh;overflow-y:scroll}.all-day .events{gap:0}.all-day .events .event{height:40px;position:relative;width:calc(100% - 4px)}.timespan{display:grid;grid-column:1/3;grid-template-columns:40px 1fr;grid-template-rows:1rem 1fr;overflow:hidden;line-height:100%;min-height:200px}.timespan.hide-ticks{grid-template-columns:0px 1fr;grid-template-rows:0px 1fr;grid-column-gap:0}.timespan.hide-ticks .ticks{visibility:hidden}.timespan.hide-ticks .offset{visibility:hidden}.offset{display:relative;grid-row:1/2;grid-column:1/3}.offset span{position:absolute;left:0;width:40px;text-align:right;display:block;white-space:nowrap;font-size:11px;opacity:0.6}.events{display:grid;gap:1rem;position:relative;min-width:100px;border-left:1px solid var(--nylas-agenda-dividers-border-color, var(--linesAndIcons, var(--theme-dividers-border-color)));border-right:1px solid var(--nylas-agenda-dividers-border-color, var(--linesAndIcons, var(--theme-dividers-border-color)))}.events.overflowing{overflow-y:auto}.events.scrolling .event,.events.scrolling .tick{transition:0s}.events .no-events{background:#eee;padding:1rem}.events .event{position:absolute;overflow:hidden;opacity:1;background:var(--nylas-agenda-calendar-1-bg-color, var(--primaryAndMainCalendar, var(--theme-calendar-1-bg-color)));border-radius:4px;box-sizing:border-box;color:var(--nylas-agenda-event-color, var(--calendarEventText, var(--theme-event-color)));cursor:pointer;text-align:left;font-size:0.9rem;letter-spacing:0.01rem;transition:0.5s;margin:2px;-webkit-font-smoothing:antialiased}.events .event.expanded{top:0 !important;left:0 !important;width:calc(100% - 4px) !important;height:calc(100% - 4px) !important;overflow-y:auto;z-index:1}.events .event.new-event{transition:none;animation-delay:0s !important;animation-duration:0s !important}.events .event.status-maybe{background-color:var(--nylas-agenda-empty-event-bg-color, var(--emptyEventBackground, #ddd)) !important;border-left-width:7px;color:var(--nylas-agenda-calendar-2-bg-color, var(--secondaryCalendar, var(--theme-calendar-2-bg-color))) !important;background-image:linear-gradient(45deg, transparent, transparent 40%, rgba(0, 0, 0, 0.2) 40%, rgba(0, 0, 0, 0.2) 50%, transparent 50%, transparent 90%, rgba(0, 0, 0, 0.2) 90%, rgba(0, 0, 0, 0.2));background-size:12px 12px}.events .event.status-noreply{background-color:var(--nylas-agenda-empty-event-bg-color, var(--emptyEventBackground, #ddd)) !important;color:var(--nylas-agenda-calendar-2-bg-color, var(--secondaryCalendar, var(--theme-calendar-2-bg-color, #444))) !important}.events .event.status-noreply a{color:var(--nylas-agenda-calendar-2-bg-color, var(--secondaryCalendar, var(--theme-calendar-2-bg-color))) !important}.events .event.status-no{border-color:var(--nylas-agenda-declined-event-color, var(--alertWarningDeclined, var(--theme-declined-event-color, #eb8f24)));color:var(--nylas-agenda-declined-event-color, var(--alertWarningDeclined, var(--theme-declined-event-color, #eb8f24)));background-color:var(--nylas-agenda-empty-event-bg-color, var(--emptyEventBackground, #ddd)) !important}.events .event.status-no>.inner>h2{text-decoration:line-through}.events .event.status-no a{color:var(--nylas-agenda-calendar-2-bg-color, var(--secondaryCalendar, var(--theme-calendar-2-bg-color))) !important}.events .event:nth-child(1){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.15s;animation-fill-mode:both}.events .event:nth-child(2){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.2s;animation-fill-mode:both}.events .event:nth-child(3){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.25s;animation-fill-mode:both}.events .event:nth-child(4){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.3s;animation-fill-mode:both}.events .event:nth-child(5){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.35s;animation-fill-mode:both}.events .event:nth-child(6){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.4s;animation-fill-mode:both}.events .event:nth-child(7){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.45s;animation-fill-mode:both}.events .event:nth-child(8){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.5s;animation-fill-mode:both}.events .event:nth-child(9){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.55s;animation-fill-mode:both}.events .event:nth-child(10){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.6s;animation-fill-mode:both}.events .event:nth-child(11){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.65s;animation-fill-mode:both}.events .event:nth-child(12){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.7s;animation-fill-mode:both}.events .event:nth-child(13){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.75s;animation-fill-mode:both}.events .event:nth-child(14){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.8s;animation-fill-mode:both}.events .event:nth-child(15){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.85s;animation-fill-mode:both}.events .event:nth-child(16){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.9s;animation-fill-mode:both}.events .event:nth-child(17){animation-name:eventsIn;animation-duration:0.5s;animation-delay:0.95s;animation-fill-mode:both}.events .event:nth-child(18){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1s;animation-fill-mode:both}.events .event:nth-child(19){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.05s;animation-fill-mode:both}.events .event:nth-child(20){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.1s;animation-fill-mode:both}.events .event:nth-child(21){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.15s;animation-fill-mode:both}.events .event:nth-child(22){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.2s;animation-fill-mode:both}.events .event:nth-child(23){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.25s;animation-fill-mode:both}.events .event:nth-child(24){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.3s;animation-fill-mode:both}.events .event:nth-child(25){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.35s;animation-fill-mode:both}.events .event:nth-child(26){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.4s;animation-fill-mode:both}.events .event:nth-child(27){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.45s;animation-fill-mode:both}.events .event:nth-child(28){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.5s;animation-fill-mode:both}.events .event:nth-child(29){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.55s;animation-fill-mode:both}.events .event:nth-child(30){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.6s;animation-fill-mode:both}.events .event:nth-child(31){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.65s;animation-fill-mode:both}.events .event:nth-child(32){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.7s;animation-fill-mode:both}.events .event:nth-child(33){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.75s;animation-fill-mode:both}.events .event:nth-child(34){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.8s;animation-fill-mode:both}.events .event:nth-child(35){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.85s;animation-fill-mode:both}.events .event:nth-child(36){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.9s;animation-fill-mode:both}.events .event:nth-child(37){animation-name:eventsIn;animation-duration:0.5s;animation-delay:1.95s;animation-fill-mode:both}.events .event:nth-child(38){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2s;animation-fill-mode:both}.events .event:nth-child(39){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.05s;animation-fill-mode:both}.events .event:nth-child(40){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.1s;animation-fill-mode:both}.events .event:nth-child(41){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.15s;animation-fill-mode:both}.events .event:nth-child(42){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.2s;animation-fill-mode:both}.events .event:nth-child(43){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.25s;animation-fill-mode:both}.events .event:nth-child(44){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.3s;animation-fill-mode:both}.events .event:nth-child(45){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.35s;animation-fill-mode:both}.events .event:nth-child(46){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.4s;animation-fill-mode:both}.events .event:nth-child(47){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.45s;animation-fill-mode:both}.events .event:nth-child(48){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.5s;animation-fill-mode:both}.events .event:nth-child(49){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.55s;animation-fill-mode:both}.events .event:nth-child(50){animation-name:eventsIn;animation-duration:0.5s;animation-delay:2.6s;animation-fill-mode:both}.events .event a{color:white;text-decoration:underline}.events .event .inner{padding:5px 5px 8px}.events .event .inner.tiny-event{padding-top:0}.events .event .inner.tiny-event h2,.events .event .inner.tiny-event span{font-size:70%}.events .event .inner span.time,.events .event .inner p{font-size:12px}.events .hour-ticks{height:100%;width:100%;position:relative}.events .hour-ticks span{position:absolute;height:1px;width:100%;border-top:1px solid var(--nylas-agenda-dividers-border-color, var(--linesAndIcons, var(--theme-dividers-border-color)));left:0}.ticks{pointer-events:none;height:100%;color:var(--nylas-agenda-ticks-color, var(--mainTextAndDeclinedEvents, var(--theme-ticks-color)));font-size:12px;position:relative;overflow:hidden}.ticks .tick{position:absolute;width:100%;text-align:right;display:block;white-space:nowrap;font-size:11px;opacity:0.5}.now{position:absolute;height:4px;width:100%;background-color:var(--nylas-agenda-current-time-bg-color, var(--timeLine, var(--theme-current-time-bg-color)))}.now svg{position:absolute;left:-39px;top:-6px;height:16px;width:39px}.now svg path{fill:var(--nylas-agenda-current-time-bg-color, var(--timeLine, var(--theme-current-time-bg-color)))}.condensed .events{grid-auto-rows:min-content;grid-column:1/3;gap:5px}.condensed .events .event{transition:0.5s}.condensed .events .event .inner{display:grid;grid-template-columns:min-content 1fr;gap:1rem}.condensed .events .event .inner>h2{grid-column:2;grid-row:1;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.condensed .events .event .inner>span.time{grid-column:1;grid-row:1;white-space:nowrap}.condensed .events .event .inner>p,.condensed .events .event .inner>.location{grid-column:1/-1}.condensed .events .event h2{float:left}.condensed .events .event span{float:left}.condensed .events .event p{clear:both}.condensed .ticks,.condensed .now{display:none}@media(min-width: 640px){main{max-width:none}}@keyframes eventsIn{0%{transform:translate(0, 30px);opacity:0}50%{opacity:1}100%{transform:translate(0, 0)}}</style>`,ya(this,{target:this.shadowRoot,props:da(this.attributes),customElement:!0},al,tl,na,{id:0,access_token:36,allow_date_change:37,allow_event_creation:38,allowed_dates:39,auto_time_box:40,end_minute:41,events:42,calendar_id:43,calendar_ids:44,click_action:45,color_by:46,condensed_view:47,eagerly_fetch_events:48,event_snap_interval:49,event_created:50,header_type:51,hide_all_day_events:52,hide_current_time:53,hide_ticks:54,prevent_zoom:55,selected_date:56,show_no_events_message:57,start_minute:58,theme:59,timezone:60,timezone_agnostic_all_day_events:61,display_metadata:62},null,[-1,-1,-1,-1,-1]),n&&(n.target&&G(n.target,this,n.anchor),n.props&&(this.$set(n.props),de()))}static get observedAttributes(){return["id","access_token","allow_date_change","allow_event_creation","allowed_dates","auto_time_box","end_minute","events","calendar_id","calendar_ids","click_action","color_by","condensed_view","eagerly_fetch_events","event_snap_interval","event_created","header_type","hide_all_day_events","hide_current_time","hide_ticks","prevent_zoom","selected_date","show_no_events_message","start_minute","theme","timezone","timezone_agnostic_all_day_events","display_metadata"]}get id(){return this.$$.ctx[0]}set id(n){this.$$set({id:n}),de()}get access_token(){return this.$$.ctx[36]}set access_token(n){this.$$set({access_token:n}),de()}get allow_date_change(){return this.$$.ctx[37]}set allow_date_change(n){this.$$set({allow_date_change:n}),de()}get allow_event_creation(){return this.$$.ctx[38]}set allow_event_creation(n){this.$$set({allow_event_creation:n}),de()}get allowed_dates(){return this.$$.ctx[39]}set allowed_dates(n){this.$$set({allowed_dates:n}),de()}get auto_time_box(){return this.$$.ctx[40]}set auto_time_box(n){this.$$set({auto_time_box:n}),de()}get end_minute(){return this.$$.ctx[41]}set end_minute(n){this.$$set({end_minute:n}),de()}get events(){return this.$$.ctx[42]}set events(n){this.$$set({events:n}),de()}get calendar_id(){return this.$$.ctx[43]}set calendar_id(n){this.$$set({calendar_id:n}),de()}get calendar_ids(){return this.$$.ctx[44]}set calendar_ids(n){this.$$set({calendar_ids:n}),de()}get click_action(){return this.$$.ctx[45]}set click_action(n){this.$$set({click_action:n}),de()}get color_by(){return this.$$.ctx[46]}set color_by(n){this.$$set({color_by:n}),de()}get condensed_view(){return this.$$.ctx[47]}set condensed_view(n){this.$$set({condensed_view:n}),de()}get eagerly_fetch_events(){return this.$$.ctx[48]}set eagerly_fetch_events(n){this.$$set({eagerly_fetch_events:n}),de()}get event_snap_interval(){return this.$$.ctx[49]}set event_snap_interval(n){this.$$set({event_snap_interval:n}),de()}get event_created(){return this.$$.ctx[50]}set event_created(n){this.$$set({event_created:n}),de()}get header_type(){return this.$$.ctx[51]}set header_type(n){this.$$set({header_type:n}),de()}get hide_all_day_events(){return this.$$.ctx[52]}set hide_all_day_events(n){this.$$set({hide_all_day_events:n}),de()}get hide_current_time(){return this.$$.ctx[53]}set hide_current_time(n){this.$$set({hide_current_time:n}),de()}get hide_ticks(){return this.$$.ctx[54]}set hide_ticks(n){this.$$set({hide_ticks:n}),de()}get prevent_zoom(){return this.$$.ctx[55]}set prevent_zoom(n){this.$$set({prevent_zoom:n}),de()}get selected_date(){return this.$$.ctx[56]}set selected_date(n){this.$$set({selected_date:n}),de()}get show_no_events_message(){return this.$$.ctx[57]}set show_no_events_message(n){this.$$set({show_no_events_message:n}),de()}get start_minute(){return this.$$.ctx[58]}set start_minute(n){this.$$set({start_minute:n}),de()}get theme(){return this.$$.ctx[59]}set theme(n){this.$$set({theme:n}),de()}get timezone(){return this.$$.ctx[60]}set timezone(n){this.$$set({timezone:n}),de()}get timezone_agnostic_all_day_events(){return this.$$.ctx[61]}set timezone_agnostic_all_day_events(n){this.$$set({timezone_agnostic_all_day_events:n}),de()}get display_metadata(){return this.$$.ctx[62]}set display_metadata(n){this.$$set({display_metadata:n}),de()}}return customElements.define("nylas-agenda",Ai),Ai});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
